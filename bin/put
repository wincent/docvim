#!/bin/sh

# Put fresh copies of output files into downstream projects based on integration
# test golden files.
#
# Assumes downstreams exist as peers of the current repo.
#
# Note: Normally one would update the downstreams from each downstream itself,
# using the globally installed `docvim` instance, but this script provides a
# means of conveniently running an arbitary, potentially unreleased, version of
# `docvim` against a downstream.

set -e

usage() {
  echo "Install fresh copies of generated files from integration tests."
  echo
  echo "Usage:"
  echo
  echo "  bin/put command-t   #"
  echo "  bin/put ferret      #"
  echo "  bin/put pinnacle    #"
  echo "  bin/put scalpel     # freshen a specific downstream"
  echo "  bin/put terminus    #"
  echo "  bin/get vim-clipper #"
  echo "  bin/put vim-docvim  #"
  echo "  ---------------------------------------------------"
  echo "  bin/put all         # freshen all downstreams"
  exit
}

update() {
  local PROJECT
  PROJECT="$1"
  echo "Updating $PROJECT"
  cp "tests/fixtures/integration/$PROJECT/golden/markdown.golden" \
    "../$PROJECT/README.md"
  mkdir -p "../$PROJECT/doc"
  cp "tests/fixtures/integration/$PROJECT/golden/plaintext.golden" \
    "../$PROJECT/doc/$PROJECT.txt"
}

if [ $# -eq 0 ]; then
  usage
else
  while [ $# -gt 0 ]; do
    PROJECT=$1
    shift
    case $PROJECT in
      all)
        update command-t
        update ferret
        update pinnacle
        update scalpel
        update terminus
        update vim-clipper
        update vim-docvim
        ;;
      command-t|ferret|pinnacle|scalpel|terminus|vim-clipper|vim-docvim)
        update "$PROJECT"
        ;;
      *)
        echo "Unrecognized project: $PROJECT"
        echo
        usage
        ;;
    esac
  done
fi
