# Top-level heading

## Sub-heading

--- (Horizontal dividers)

> Blockquote

`inline code`

```
fenced codeblocks (leading space syntax not supported)
```

![alt text](http://example.com/image.jpg)
(becomes a link in vimdoc, but an image in markdown)

- Lists.

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ OUTPUT ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

Token { kind: Heading(Heading1), char_start: 0, char_end: 1, byte_start: 0, byte_end: 1, column_start: 1, column_end: 2, line_start: 1, line_end: 1 }: #
Token { kind: Space, char_start: 1, char_end: 2, byte_start: 1, byte_end: 2, column_start: 2, column_end: 3, line_start: 1, line_end: 1 }:  
Token { kind: Text, char_start: 2, char_end: 5, byte_start: 2, byte_end: 5, column_start: 3, column_end: 6, line_start: 1, line_end: 1 }: Top
Token { kind: Hyphen, char_start: 5, char_end: 6, byte_start: 5, byte_end: 6, column_start: 6, column_end: 7, line_start: 1, line_end: 1 }: -
Token { kind: Text, char_start: 6, char_end: 11, byte_start: 6, byte_end: 11, column_start: 7, column_end: 12, line_start: 1, line_end: 1 }: level
Token { kind: Space, char_start: 11, char_end: 12, byte_start: 11, byte_end: 12, column_start: 12, column_end: 13, line_start: 1, line_end: 1 }:  
Token { kind: Text, char_start: 12, char_end: 19, byte_start: 12, byte_end: 19, column_start: 13, column_end: 20, line_start: 1, line_end: 1 }: heading
Token { kind: Newline, char_start: 19, char_end: 20, byte_start: 19, byte_end: 20, column_start: 20, column_end: 1, line_start: 1, line_end: 2 }: 

Token { kind: Newline, char_start: 20, char_end: 21, byte_start: 20, byte_end: 21, column_start: 1, column_end: 1, line_start: 2, line_end: 3 }: 

Token { kind: Heading(Heading2), char_start: 21, char_end: 23, byte_start: 21, byte_end: 23, column_start: 1, column_end: 3, line_start: 3, line_end: 3 }: ##
Token { kind: Space, char_start: 23, char_end: 24, byte_start: 23, byte_end: 24, column_start: 3, column_end: 4, line_start: 3, line_end: 3 }:  
Token { kind: Text, char_start: 24, char_end: 27, byte_start: 24, byte_end: 27, column_start: 4, column_end: 7, line_start: 3, line_end: 3 }: Sub
Token { kind: Hyphen, char_start: 27, char_end: 28, byte_start: 27, byte_end: 28, column_start: 7, column_end: 8, line_start: 3, line_end: 3 }: -
Token { kind: Text, char_start: 28, char_end: 35, byte_start: 28, byte_end: 35, column_start: 8, column_end: 15, line_start: 3, line_end: 3 }: heading
Token { kind: Newline, char_start: 35, char_end: 36, byte_start: 35, byte_end: 36, column_start: 15, column_end: 1, line_start: 3, line_end: 4 }: 

Token { kind: Newline, char_start: 36, char_end: 37, byte_start: 36, byte_end: 37, column_start: 1, column_end: 1, line_start: 4, line_end: 5 }: 

Token { kind: HorizontalRule, char_start: 37, char_end: 40, byte_start: 37, byte_end: 40, column_start: 1, column_end: 4, line_start: 5, line_end: 5 }: ---
Token { kind: Space, char_start: 40, char_end: 41, byte_start: 40, byte_end: 41, column_start: 4, column_end: 5, line_start: 5, line_end: 5 }:  
Token { kind: Lparen, char_start: 41, char_end: 42, byte_start: 41, byte_end: 42, column_start: 5, column_end: 6, line_start: 5, line_end: 5 }: (
Token { kind: Text, char_start: 42, char_end: 52, byte_start: 42, byte_end: 52, column_start: 6, column_end: 16, line_start: 5, line_end: 5 }: Horizontal
Token { kind: Space, char_start: 52, char_end: 53, byte_start: 52, byte_end: 53, column_start: 16, column_end: 17, line_start: 5, line_end: 5 }:  
Token { kind: Text, char_start: 53, char_end: 61, byte_start: 53, byte_end: 61, column_start: 17, column_end: 25, line_start: 5, line_end: 5 }: dividers
Token { kind: Rparen, char_start: 61, char_end: 62, byte_start: 61, byte_end: 62, column_start: 25, column_end: 26, line_start: 5, line_end: 5 }: )
Token { kind: Newline, char_start: 62, char_end: 63, byte_start: 62, byte_end: 63, column_start: 26, column_end: 1, line_start: 5, line_end: 6 }: 

Token { kind: Newline, char_start: 63, char_end: 64, byte_start: 63, byte_end: 64, column_start: 1, column_end: 1, line_start: 6, line_end: 7 }: 

Token { kind: BlockQuote, char_start: 64, char_end: 65, byte_start: 64, byte_end: 65, column_start: 1, column_end: 2, line_start: 7, line_end: 7 }: >
Token { kind: Space, char_start: 65, char_end: 66, byte_start: 65, byte_end: 66, column_start: 2, column_end: 3, line_start: 7, line_end: 7 }:  
Token { kind: Text, char_start: 66, char_end: 76, byte_start: 66, byte_end: 76, column_start: 3, column_end: 13, line_start: 7, line_end: 7 }: Blockquote
Token { kind: Newline, char_start: 76, char_end: 77, byte_start: 76, byte_end: 77, column_start: 13, column_end: 1, line_start: 7, line_end: 8 }: 

Token { kind: Newline, char_start: 77, char_end: 78, byte_start: 77, byte_end: 78, column_start: 1, column_end: 1, line_start: 8, line_end: 9 }: 

Token { kind: Backtick, char_start: 78, char_end: 79, byte_start: 78, byte_end: 79, column_start: 1, column_end: 2, line_start: 9, line_end: 9 }: `
Token { kind: Text, char_start: 79, char_end: 85, byte_start: 79, byte_end: 85, column_start: 2, column_end: 8, line_start: 9, line_end: 9 }: inline
Token { kind: Space, char_start: 85, char_end: 86, byte_start: 85, byte_end: 86, column_start: 8, column_end: 9, line_start: 9, line_end: 9 }:  
Token { kind: Text, char_start: 86, char_end: 90, byte_start: 86, byte_end: 90, column_start: 9, column_end: 13, line_start: 9, line_end: 9 }: code
Token { kind: Backtick, char_start: 90, char_end: 91, byte_start: 90, byte_end: 91, column_start: 13, column_end: 14, line_start: 9, line_end: 9 }: `
Token { kind: Newline, char_start: 91, char_end: 92, byte_start: 91, byte_end: 92, column_start: 14, column_end: 1, line_start: 9, line_end: 10 }: 

Token { kind: Newline, char_start: 92, char_end: 93, byte_start: 92, byte_end: 93, column_start: 1, column_end: 1, line_start: 10, line_end: 11 }: 

Token { kind: CodeFence, char_start: 93, char_end: 96, byte_start: 93, byte_end: 96, column_start: 1, column_end: 4, line_start: 11, line_end: 11 }: ```
Token { kind: Newline, char_start: 96, char_end: 97, byte_start: 96, byte_end: 97, column_start: 4, column_end: 1, line_start: 11, line_end: 12 }: 

Token { kind: Text, char_start: 97, char_end: 103, byte_start: 97, byte_end: 103, column_start: 1, column_end: 7, line_start: 12, line_end: 12 }: fenced
Token { kind: Space, char_start: 103, char_end: 104, byte_start: 103, byte_end: 104, column_start: 7, column_end: 8, line_start: 12, line_end: 12 }:  
Token { kind: Text, char_start: 104, char_end: 114, byte_start: 104, byte_end: 114, column_start: 8, column_end: 18, line_start: 12, line_end: 12 }: codeblocks
Token { kind: Space, char_start: 114, char_end: 115, byte_start: 114, byte_end: 115, column_start: 18, column_end: 19, line_start: 12, line_end: 12 }:  
Token { kind: Lparen, char_start: 115, char_end: 116, byte_start: 115, byte_end: 116, column_start: 19, column_end: 20, line_start: 12, line_end: 12 }: (
Token { kind: Text, char_start: 116, char_end: 123, byte_start: 116, byte_end: 123, column_start: 20, column_end: 27, line_start: 12, line_end: 12 }: leading
Token { kind: Space, char_start: 123, char_end: 124, byte_start: 123, byte_end: 124, column_start: 27, column_end: 28, line_start: 12, line_end: 12 }:  
Token { kind: Text, char_start: 124, char_end: 129, byte_start: 124, byte_end: 129, column_start: 28, column_end: 33, line_start: 12, line_end: 12 }: space
Token { kind: Space, char_start: 129, char_end: 130, byte_start: 129, byte_end: 130, column_start: 33, column_end: 34, line_start: 12, line_end: 12 }:  
Token { kind: Text, char_start: 130, char_end: 136, byte_start: 130, byte_end: 136, column_start: 34, column_end: 40, line_start: 12, line_end: 12 }: syntax
Token { kind: Space, char_start: 136, char_end: 137, byte_start: 136, byte_end: 137, column_start: 40, column_end: 41, line_start: 12, line_end: 12 }:  
Token { kind: Text, char_start: 137, char_end: 140, byte_start: 137, byte_end: 140, column_start: 41, column_end: 44, line_start: 12, line_end: 12 }: not
Token { kind: Space, char_start: 140, char_end: 141, byte_start: 140, byte_end: 141, column_start: 44, column_end: 45, line_start: 12, line_end: 12 }:  
Token { kind: Text, char_start: 141, char_end: 150, byte_start: 141, byte_end: 150, column_start: 45, column_end: 54, line_start: 12, line_end: 12 }: supported
Token { kind: Rparen, char_start: 150, char_end: 151, byte_start: 150, byte_end: 151, column_start: 54, column_end: 55, line_start: 12, line_end: 12 }: )
Token { kind: Newline, char_start: 151, char_end: 152, byte_start: 151, byte_end: 152, column_start: 55, column_end: 1, line_start: 12, line_end: 13 }: 

Token { kind: CodeFence, char_start: 152, char_end: 155, byte_start: 152, byte_end: 155, column_start: 1, column_end: 4, line_start: 13, line_end: 13 }: ```
Token { kind: Newline, char_start: 155, char_end: 156, byte_start: 155, byte_end: 156, column_start: 4, column_end: 1, line_start: 13, line_end: 14 }: 

Token { kind: Newline, char_start: 156, char_end: 157, byte_start: 156, byte_end: 157, column_start: 1, column_end: 1, line_start: 14, line_end: 15 }: 

Token { kind: Bang, char_start: 157, char_end: 158, byte_start: 157, byte_end: 158, column_start: 1, column_end: 2, line_start: 15, line_end: 15 }: !
Token { kind: Lbracket, char_start: 158, char_end: 159, byte_start: 158, byte_end: 159, column_start: 2, column_end: 3, line_start: 15, line_end: 15 }: [
Token { kind: Text, char_start: 159, char_end: 162, byte_start: 159, byte_end: 162, column_start: 3, column_end: 6, line_start: 15, line_end: 15 }: alt
Token { kind: Space, char_start: 162, char_end: 163, byte_start: 162, byte_end: 163, column_start: 6, column_end: 7, line_start: 15, line_end: 15 }:  
Token { kind: Text, char_start: 163, char_end: 167, byte_start: 163, byte_end: 167, column_start: 7, column_end: 11, line_start: 15, line_end: 15 }: text
Token { kind: Rbracket, char_start: 167, char_end: 168, byte_start: 167, byte_end: 168, column_start: 11, column_end: 12, line_start: 15, line_end: 15 }: ]
Token { kind: Lparen, char_start: 168, char_end: 169, byte_start: 168, byte_end: 169, column_start: 12, column_end: 13, line_start: 15, line_end: 15 }: (
Token { kind: Text, char_start: 169, char_end: 197, byte_start: 169, byte_end: 197, column_start: 13, column_end: 41, line_start: 15, line_end: 15 }: http://example.com/image.jpg
Token { kind: Rparen, char_start: 197, char_end: 198, byte_start: 197, byte_end: 198, column_start: 41, column_end: 42, line_start: 15, line_end: 15 }: )
Token { kind: Newline, char_start: 198, char_end: 199, byte_start: 198, byte_end: 199, column_start: 42, column_end: 1, line_start: 15, line_end: 16 }: 

Token { kind: Lparen, char_start: 199, char_end: 200, byte_start: 199, byte_end: 200, column_start: 1, column_end: 2, line_start: 16, line_end: 16 }: (
Token { kind: Text, char_start: 200, char_end: 207, byte_start: 200, byte_end: 207, column_start: 2, column_end: 9, line_start: 16, line_end: 16 }: becomes
Token { kind: Space, char_start: 207, char_end: 208, byte_start: 207, byte_end: 208, column_start: 9, column_end: 10, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 208, char_end: 209, byte_start: 208, byte_end: 209, column_start: 10, column_end: 11, line_start: 16, line_end: 16 }: a
Token { kind: Space, char_start: 209, char_end: 210, byte_start: 209, byte_end: 210, column_start: 11, column_end: 12, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 210, char_end: 214, byte_start: 210, byte_end: 214, column_start: 12, column_end: 16, line_start: 16, line_end: 16 }: link
Token { kind: Space, char_start: 214, char_end: 215, byte_start: 214, byte_end: 215, column_start: 16, column_end: 17, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 215, char_end: 217, byte_start: 215, byte_end: 217, column_start: 17, column_end: 19, line_start: 16, line_end: 16 }: in
Token { kind: Space, char_start: 217, char_end: 218, byte_start: 217, byte_end: 218, column_start: 19, column_end: 20, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 218, char_end: 225, byte_start: 218, byte_end: 225, column_start: 20, column_end: 27, line_start: 16, line_end: 16 }: vimdoc,
Token { kind: Space, char_start: 225, char_end: 226, byte_start: 225, byte_end: 226, column_start: 27, column_end: 28, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 226, char_end: 229, byte_start: 226, byte_end: 229, column_start: 28, column_end: 31, line_start: 16, line_end: 16 }: but
Token { kind: Space, char_start: 229, char_end: 230, byte_start: 229, byte_end: 230, column_start: 31, column_end: 32, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 230, char_end: 232, byte_start: 230, byte_end: 232, column_start: 32, column_end: 34, line_start: 16, line_end: 16 }: an
Token { kind: Space, char_start: 232, char_end: 233, byte_start: 232, byte_end: 233, column_start: 34, column_end: 35, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 233, char_end: 238, byte_start: 233, byte_end: 238, column_start: 35, column_end: 40, line_start: 16, line_end: 16 }: image
Token { kind: Space, char_start: 238, char_end: 239, byte_start: 238, byte_end: 239, column_start: 40, column_end: 41, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 239, char_end: 241, byte_start: 239, byte_end: 241, column_start: 41, column_end: 43, line_start: 16, line_end: 16 }: in
Token { kind: Space, char_start: 241, char_end: 242, byte_start: 241, byte_end: 242, column_start: 43, column_end: 44, line_start: 16, line_end: 16 }:  
Token { kind: Text, char_start: 242, char_end: 250, byte_start: 242, byte_end: 250, column_start: 44, column_end: 52, line_start: 16, line_end: 16 }: markdown
Token { kind: Rparen, char_start: 250, char_end: 251, byte_start: 250, byte_end: 251, column_start: 52, column_end: 53, line_start: 16, line_end: 16 }: )
Token { kind: Newline, char_start: 251, char_end: 252, byte_start: 251, byte_end: 252, column_start: 53, column_end: 1, line_start: 16, line_end: 17 }: 

Token { kind: Newline, char_start: 252, char_end: 253, byte_start: 252, byte_end: 253, column_start: 1, column_end: 1, line_start: 17, line_end: 18 }: 

Token { kind: Hyphen, char_start: 253, char_end: 254, byte_start: 253, byte_end: 254, column_start: 1, column_end: 2, line_start: 18, line_end: 18 }: -
Token { kind: Space, char_start: 254, char_end: 255, byte_start: 254, byte_end: 255, column_start: 2, column_end: 3, line_start: 18, line_end: 18 }:  
Token { kind: Text, char_start: 255, char_end: 261, byte_start: 255, byte_end: 261, column_start: 3, column_end: 9, line_start: 18, line_end: 18 }: Lists.
