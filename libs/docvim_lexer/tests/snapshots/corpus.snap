-- Copyright 2015-present Greg Hurrell. All rights reserved.
-- Licensed under the terms of the MIT license.

local util = require 'corpus.util'

local chooser_buffer = nil
local chooser_selected_index = nil
local chooser_window = nil
local chooser_namespace = vim.api.nvim_create_namespace('')

local current_search = nil

local preview_buffer = nil
local preview_window = nil

-- TODO: can we make these a bit more private?
local mappings = {
  ['<C-j>'] = '<Cmd>lua corpus.preview_next()<CR>',
  ['<C-k>'] = '<Cmd>lua corpus.preview_previous()<CR>',
  ['<Down>'] = '<Cmd>lua corpus.preview_next()<CR>',
  ['<Up>'] = '<Cmd>lua corpus.preview_previous()<CR>',
}

-- TODO: detect pre-existing mappings, save them, and restore them if needed.
local set_up_mappings = function()
  for lhs, rhs in pairs(mappings) do
    vim.api.nvim_set_keymap('c', lhs, rhs, {silent = true})
  end
  -- TODO sub to VimResized autocmd
end

local tear_down_mappings = function()
  for lhs, rhs in pairs(mappings) do
    if vim.fn.maparg(lhs, 'c') == rhs then
      -- TODO: find out if bang from old version was actually necessary
      -- vim.cmd('silent! cunmap ' .. lhs)
      vim.api.nvim_del_keymap('c', lhs)
    end
  end
  -- TODO unsub to VimResized autocmd
end

-- TODO make most of these private (really only want them public for testing
-- during development)
corpus = {
  choose = function(selection, bang)
    selection = vim.trim(selection)
    local create = bang == '!'
    local file = nil
    if vim.endswith(selection, '!') and vim.g.CorpusBangCreation == 1 then
      create = true
      selection = selection:sub(0, -2)
    end
    if not create then
      file = corpus.get_selected_file()
    end
    if file ~= nil then
      -- In a Corpus directory, trying to open a file.
      vim.cmd('edit ' .. vim.fn.fnameescape(file))
    else
      -- In create mode, or not in a Corpus directory.
      local directory = corpus.directory()
      if selection:find('/') then
        selection = corpus.normalize(selection)
        if vim.tbl_contains(corpus.directories(), selection) then
          directory = selection
          file = ''
        else
          error(
            'Invalid path: expected a new note name with no slashes, ' ..
            'or a directory defined in the `CorpusDirectories` configuration'
          )
        end
      elseif directory == nil then
        error('Please configure `CorpusDirectories`')
      else
        file = selection
      end
      vim.cmd('cd ' .. vim.fn.fnameescape(directory))
      if file ~= '' and file ~= nil then
        if not vim.endswith(file, '.md') then
          file = file .. '.md'
        end
        vim.cmd('edit ' .. vim.fn.fnameescape(file))
      end
    end
  end,

  cmdline_changed = function(char)
    if char == ':' then
      local line = vim.fn.getcmdline()
      local _, _, term = string.find(line, '^%s*Corpus%f[%A]%s*(.-)%s*$')
      if term ~= nil then
        if corpus.in_directory() then
          set_up_mappings()
          local width = math.floor(vim.o.columns / 2)
          if chooser_window == nil then
            chooser_buffer = vim.api.nvim_create_buf(
              false, -- listed?
              true -- scratch?
            )
            chooser_window = vim.api.nvim_open_win(
              chooser_buffer,
              false --[[ enter? --]], {
                col = 0,
                row = 0,
                focusable = false,
                relative = 'editor',
                style = 'minimal',
                width = width,
                height = vim.o.lines - 2,
              }
            )
            vim.api.nvim_win_set_option(chooser_window, 'wrap', false)
            vim.api.nvim_win_set_option(chooser_window, 'winhl', 'Normal:Question')
          end

          local update = function(results)
            local lines = nil

            if #results > 0 then
              -- 1 because Neovim cursor indexing is 1-based, as are Lua lists.
              chooser_selected_index = 1

              lines = util.list.map(results, function (result, i)
                local name = vim.fn.fnamemodify(result, ':r')
                local prefix = nil
                if i == chooser_selected_index then
                  prefix = '> '
                else
                  prefix = '  '
                end
                -- Right pad so that selection highlight extends fully across.
                if width < 102 then
                  return prefix .. string.format('%-' .. (width - 2) .. 's', name)
                else
                  -- Avoid: "invalid format (width or precision too long)"
                  local padded = prefix .. string.format('%-99s', name)
                  local diff = width - padded:len()
                  if diff > 0 then
                    padded = padded .. string.rep(' ', diff)
                  end
                  return padded
                end
              end)
            else
              lines = {}
              chooser_selected_index = nil
            end

            vim.api.nvim_buf_set_lines(
              chooser_buffer,
              0, -- start
              -1, -- end
              false, -- strict indexing?
              lines
            )

            -- Reserve two lines for statusline and command line.
            vim.api.nvim_win_set_height(
              chooser_window,
              vim.o.lines - 2
            )

            -- TODO: only do this if lines actually changed, or selection changed
            corpus.highlight_selection()
          end

          if term:len() > 0 then
            corpus.search(term, update)
          else
            corpus.list(update)
          end

          return
        end
      end
    end
    tear_down_mappings()
  end,

  cmdline_enter = function()
    chooser_selected_index = nil
  end,

  cmdline_leave = function()
    if chooser_window ~= nil then
      vim.api.nvim_win_close(chooser_window, true --[[ force? --]])
      chooser_window = nil
    end
    if preview_window ~= nil then
      vim.api.nvim_win_close(preview_window, true --[[ force? --]])
      preview_window = nil
    end
    tear_down_mappings()
  end,

  commit = function(file, operation)
    local config = corpus.config_for_file(file)
    if config.autocommit then
      file = vim.fn.fnamemodify(file, ':t')
      local location = vim.fn.expand(config.location)
      local subject = 'docs: ' .. operation .. ' ' .. vim.fn.fnamemodify(file, ':r') .. ' (Corpus autocommit)'

      -- Just in case this is a new file (otherwise `git commit` will fail).
      corpus.git(location, 'add', '--', file)
      -- TODO: check v:shell_error for this one ^^^
      -- vim.api.nvim_get_vvar('shell_error')

      -- Note that this will fail silently if there are no changes to the
      -- file (because we aren't passing `--allow-empty`) and that's ok.
      corpus.git(location, 'commit', '-m', subject, '--', file)
    end
  end,

  complete = function(arglead, cmdline, cursor_pos)
    if corpus.in_directory() then
      local file = corpus.get_selected_file()
      if file ~= nil then
        local title = corpus.get_selected_file():sub(1, -4) -- strip ".md"
        local prefix, _ = cmdline:gsub('^%s*Corpus!?%s+', '') -- strip "Corpus "
        if vim.startswith(title, prefix) then
          -- If on "foo bar bazzzz"
          --                   ^
          -- Must return "bazzzz", not "zzz".
          local suffix = title:sub(prefix:len() - arglead:len() + 1, -1)
          return {suffix}
        end
      end
    else
      local directories = corpus.directories()
      return util.list.filter(directories, function(directory, i)
        return vim.startswith(directory, arglead)
      end)
    end
  end,

  -- Returns config from the `CorpusDirectories` (Lua global) for
  -- `file`, or an empty table if `file` is not in one of the
  -- directories defined in `CorpusDirectories`.
  config_for_file = function(file)
    local base = vim.fn.fnamemodify(file, ':h')
    local config = corpus.corpus_directories()
    for directory, settings in pairs(config) do
      local candidate = corpus.normalize(directory)
      if candidate == base then
        return vim.tbl_extend('force', {location = candidate}, settings)
      end
    end
    return vim.empty_dict()
  end,

  corpus_directories = function()
    return _G.CorpusDirectories or vim.g.CorpusDirectories or vim.empty_dict()
  end,

  -- If current working directory is a configured Corpus directory, returns it.
  -- Otherwise, returns the first found default.
  directory = function()
    if corpus.in_directory() then
      return vim.fn.getcwd()
    else
      local directories = corpus.directories()
      return directories[1]
    end
  end,

  directories = function()
    local config = corpus.corpus_directories()
    local directories = vim.tbl_keys(config)
    if table.getn(directories) == 0 then
      vim.api.nvim_err_writeln(
        'No Corpus directories configured: please set CorpusDirectories'
      )
    end
    return util.list.map(directories, function(directory)
      return corpus.normalize(directory)
    end)
  end,

  -- Adds 'corpus' to the 'filetype' if the current file is under a directory
  -- configured via `CorpusDirectories`.
  ftdetect = function()
    local file = corpus.normalize('<afile>')
    local config = corpus.config_for_file(file)
    if next(config) ~= nil then
      local filetypes = vim.split(vim.bo.filetype, '.', true)
      if not vim.tbl_contains(filetypes, 'corpus') then
        vim.bo.filetype = vim.bo.filetype .. '.corpus'
      end
    end
  end,

  get_selected_file = function()
    if chooser_selected_index ~= nil then
      local line = vim.api.nvim_buf_get_lines(
        chooser_buffer,
        chooser_selected_index - 1,
        chooser_selected_index,
        false
      )[1]

      -- Strip leading "> " or "  ", and append extension.
      return vim.trim(line:sub(3, line:len())) .. '.md'
    end
  end,

  git = function(directory, ...)
    if vim.fn.isdirectory(directory) == 0 then
      error('Not a directory: ' .. directory)
    end
    if vim.fn.isdirectory(directory .. '/.git') == 0 then
      -- TODO: decide whether it's right to do this unconditionally like this
      corpus.run({'git', '-C', directory, 'init'})
    end

    local command = util.list.concat({'git', '-C', directory}, {...})
    return corpus.run(command)
  end,

  highlight_selection = function ()
    if chooser_selected_index ~= nil then
      vim.api.nvim_win_set_cursor(chooser_window, {chooser_selected_index, 0})
      vim.api.nvim_buf_clear_namespace(
        chooser_buffer,
        chooser_namespace,
        0, -- TODO only clear whole buffer when resetting
        -1 -- (just clearing previous would suffice)
      )
      vim.api.nvim_buf_add_highlight(
        chooser_buffer,
        chooser_namespace,
        vim.g.CorpusChooserSelectionHighlight or 'PMenuSel',
        chooser_selected_index - 1, -- line (0-indexed)
        0, -- col_start
        -1 -- col_end (end-of-line)
      )
    end
    corpus.preview()
  end,

  in_directory = function()
    local directories = corpus.directories()
    local cwd = vim.fn.getcwd()
    return vim.tbl_contains(directories, cwd)
  end,

  -- List all documents in the corpus.
  list = function(callback)
    if current_search ~= nil then
      current_search.cancel()
    end

    local directory = corpus.directory()

    if directory == nil then
      callback({})
    else
      -- Using util.run here just for consistency, although the truth is this
      -- one is not going to be a bottleneck.
      local args = {
        'ls-files',
        '--cached',
        '--others',
        '-z',
        '--',
        '*.md'
      }

      local stdout = {}

      current_search = util.run('git', args, {
        cwd = directory,
        on_exit = function(code, signal)
          if code == 0 then
            local list = {}
            -- Take care to ensure we don't cut a filename in half given:
            --
            --    chunk[1]: first file name\0second file
            --    chunk[2]: name\0third file name\0
            --
            local pending = ''
            for _, chunk in ipairs(stdout) do
              for match in chunk:gmatch('%Z*%z?') do
                if vim.endswith(match, '\0') then
                  table.insert(list, pending .. match:sub(1, -2))
                  pending = ''
                else
                  pending = pending .. match
                end
              end
            end
            callback(list)
          else
            callback({})
          end
        end,
        on_stdout = function(err, data)
          if err == nil then
            table.insert(stdout, data)
          end
        end,
      })
    end
  end,

  preview = function()
    if preview_buffer == nil then
      preview_buffer = vim.api.nvim_create_buf(
        false, -- listed?
        true -- scratch?
      )
    end
    local lines = vim.o.lines
    if preview_window == nil then
      local width = math.floor(vim.o.columns / 2)
      preview_window = vim.api.nvim_open_win(
        preview_buffer,
        false --[[ enter? --]], {
            col = width,
            row = 0,
            focusable = false,
            relative = 'editor',
            style = 'minimal',
            width = width,
            height = lines - 2,
        }
      )
      vim.api.nvim_win_set_option(
        preview_window,
        'winhighlight',
        vim.g.CorpusPreviewWinhighlight or 'EndOfBuffer:LineNr,FoldColumn:StatusLine,Normal:LineNr'
      )
      vim.api.nvim_win_set_option(
        preview_window,
        'foldcolumn',
        '1'
      )
      vim.api.nvim_win_set_option(
        preview_window,
        'foldenable',
        false
      )
    end
    local file = corpus.get_selected_file()
    local contents = nil
    if file == nil then
      contents = {}
    else
      contents = vim.fn.readfile(
        file,
        '', -- if "b" then binary
        lines -- maximum lines
      )
    end
    -- Pad buffer with blank lines to make foldcolumn extend all the way down.
    -- Subtract two for statusline and command line.
    local padding = lines - table.getn(contents) - 2
    for i = 1, padding do
      util.list.push(contents, '')
    end

    vim.api.nvim_buf_set_lines(
      preview_buffer,
      0, -- start
      -1, -- end
      false, -- strict indexing?
      contents
    )
    vim.cmd('redraw')
  end,

  preview_next = function()
    if chooser_selected_index ~= nil then
      if chooser_selected_index < vim.api.nvim_buf_line_count(chooser_buffer) then
        local lines = vim.api.nvim_buf_get_lines(
          chooser_buffer,
          chooser_selected_index - 1,
          chooser_selected_index + 1,
          false
        )
        vim.api.nvim_buf_set_lines(
          chooser_buffer,
          chooser_selected_index - 1,
          chooser_selected_index + 1,
          false, -- strict indexing?
          {
            ({lines[1]:gsub('^..', '  ')})[1],
            ({lines[2]:gsub('^..', '> ')})[1],
          }
        )
        chooser_selected_index = chooser_selected_index + 1
        corpus.highlight_selection()
      end
    end
  end,

  -- TODO: DRY this up; it is very similar to preview_next
  preview_previous = function()
    if chooser_selected_index ~= nil then
      if chooser_selected_index > 1 then
        local lines = vim.api.nvim_buf_get_lines(
          chooser_buffer,
          chooser_selected_index - 2,
          chooser_selected_index,
          false
        )
        vim.api.nvim_buf_set_lines(
          chooser_buffer,
          chooser_selected_index - 2,
          chooser_selected_index,
          false, -- strict indexing?
          {
            ({lines[1]:gsub('^..', '> ')})[1],
            ({lines[2]:gsub('^..', '  ')})[1],
          }
        )
        chooser_selected_index = chooser_selected_index - 1
        corpus.highlight_selection()
      end
    end
  end,

  search = function(terms, callback)
    if current_search ~= nil then
      current_search.cancel()
    end

    local directory = corpus.directory()

    if directory == nil then
      callback({})
    else
      local args = {
        'grep',
        '-I',
        '-F',
        '-l',
        '-z',
        '--all-match',
        '--untracked'
      }

      if not corpus.smartcase(terms) then
        table.insert(args, '-i')
      end

      for term in terms:gmatch('%S+') do
        util.list.push(args, '-e', term)
      end

      util.list.push(args, '--', '*.md')

      local stdout = {}

      current_search = util.run('git', args, {
        cwd = directory,
        on_exit = function(code, signal)
          if code == 0 then
            local list = {}
            -- Just like in `corpus.list()`, beware of file names that are
            -- split over two chunks.
            local pending = ''
            for _, chunk in ipairs(stdout) do
              for match in chunk:gmatch('%Z*%z?') do
                if vim.endswith(match, '\0') then
                  local file = pending .. match:sub(1, -2)
                  pending = ''

                  -- Note Git Bug here: -z here doesn't always prevent stuff
                  -- from getting escaped; if in a subdirectory, `git grep` may
                  -- return results like:
                  --
                  --    "\"HTML is probably what you want\".md"
                  --    Akephalos.md
                  --    JavaScript loading.md
                  --
                  -- See: https://public-inbox.org/git/CAOyLvt9=wRfpvGGJqLMi7=wLWu881pOur8c9qNEg+Xqhf8W2ww@mail.gmail.com/
                  if vim.startswith(file, '"') and vim.endswith(file, '"') then
                    table.insert(list, file:sub(2, -2):gsub('\\"', '"'))
                  else
                    table.insert(list, file)
                  end
                else
                  pending = pending .. match
                end
              end
            end
            callback(list)
          elseif code == 1 then
            -- No matches, but "git grep" itself was correctly invoked.
            callback({})
          end
        end,
        on_stdout = function(err, data)
          -- Seems unlikely we'd get an `err` here, but...
          if err == nil then
            table.insert(stdout, data)
          end
        end,
      })
    end
  end,

  -- Turns `afile` into a simplified absolute path with all symlinks resolved.
  -- If `afile` corresponds to a directory any trailing slash will be removed.
  normalize = function(afile)
    local file = afile
    if vim.startswith(file, '<') then
      file = vim.fn.expand(file)
    end
    file = vim.fn.resolve(vim.fn.fnamemodify(file, ':p'))
    if vim.endswith(file, '/') then
      return file:sub(0, file:len() - 1)
    else
      return file
    end
  end,

  log = function(message)
    vim.api.nvim_command('unsilent echomsg "' .. message .. '"')
  end,

  -- TODO: better name for the param here (it's more than just args; it is
  -- command plus args)
  run = function(args)
    local command = table.concat(util.list.map(args, function(word)
      return vim.fn.shellescape(word)
    end), ' ')
    return vim.fn.systemlist(command)
  end,

  -- Like 'smartcase', will be case-insensitive unless argument contains an
  -- uppercase letter.
  smartcase = function(input)
    return input:match('%u') ~= nil
  end,

  title_for_file = function(file)
    return vim.fn.fnamemodify(file, ':t:r')
  end,
}

return corpus

↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ OUTPUT ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓

Token { kind: Comment(LineComment), char_start: 0, char_end: 61, byte_start: 0, byte_end: 61 }: -- Copyright 2015-present Greg Hurrell. All rights reserved.

Token { kind: Comment(LineComment), char_start: 61, char_end: 109, byte_start: 61, byte_end: 109 }: -- Licensed under the terms of the MIT license.

Token { kind: Name(Keyword(Local)), char_start: 110, char_end: 115, byte_start: 110, byte_end: 115 }: local
Token { kind: Name(Identifier), char_start: 116, char_end: 120, byte_start: 116, byte_end: 120 }: util
Token { kind: Op(Assign), char_start: 121, char_end: 122, byte_start: 121, byte_end: 122 }: =
Token { kind: Name(Identifier), char_start: 123, char_end: 130, byte_start: 123, byte_end: 130 }: require
Token { kind: Literal(Str(SingleQuoted)), char_start: 131, char_end: 144, byte_start: 131, byte_end: 144 }: 'corpus.util'
Token { kind: Name(Keyword(Local)), char_start: 146, char_end: 151, byte_start: 146, byte_end: 151 }: local
Token { kind: Name(Identifier), char_start: 152, char_end: 166, byte_start: 152, byte_end: 166 }: chooser_buffer
Token { kind: Op(Assign), char_start: 167, char_end: 168, byte_start: 167, byte_end: 168 }: =
Token { kind: Name(Keyword(Nil)), char_start: 169, char_end: 172, byte_start: 169, byte_end: 172 }: nil
Token { kind: Name(Keyword(Local)), char_start: 173, char_end: 178, byte_start: 173, byte_end: 178 }: local
Token { kind: Name(Identifier), char_start: 179, char_end: 201, byte_start: 179, byte_end: 201 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 202, char_end: 203, byte_start: 202, byte_end: 203 }: =
Token { kind: Name(Keyword(Nil)), char_start: 204, char_end: 207, byte_start: 204, byte_end: 207 }: nil
Token { kind: Name(Keyword(Local)), char_start: 208, char_end: 213, byte_start: 208, byte_end: 213 }: local
Token { kind: Name(Identifier), char_start: 214, char_end: 228, byte_start: 214, byte_end: 228 }: chooser_window
Token { kind: Op(Assign), char_start: 229, char_end: 230, byte_start: 229, byte_end: 230 }: =
Token { kind: Name(Keyword(Nil)), char_start: 231, char_end: 234, byte_start: 231, byte_end: 234 }: nil
Token { kind: Name(Keyword(Local)), char_start: 235, char_end: 240, byte_start: 235, byte_end: 240 }: local
Token { kind: Name(Identifier), char_start: 241, char_end: 258, byte_start: 241, byte_end: 258 }: chooser_namespace
Token { kind: Op(Assign), char_start: 259, char_end: 260, byte_start: 259, byte_end: 260 }: =
Token { kind: Name(Identifier), char_start: 261, char_end: 264, byte_start: 261, byte_end: 264 }: vim
Token { kind: Punctuator(Dot), char_start: 264, char_end: 265, byte_start: 264, byte_end: 265 }: .
Token { kind: Name(Identifier), char_start: 265, char_end: 268, byte_start: 265, byte_end: 268 }: api
Token { kind: Punctuator(Dot), char_start: 268, char_end: 269, byte_start: 268, byte_end: 269 }: .
Token { kind: Name(Identifier), char_start: 269, char_end: 290, byte_start: 269, byte_end: 290 }: nvim_create_namespace
Token { kind: Punctuator(Lparen), char_start: 290, char_end: 291, byte_start: 290, byte_end: 291 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 291, char_end: 293, byte_start: 291, byte_end: 293 }: ''
Token { kind: Punctuator(Rparen), char_start: 293, char_end: 294, byte_start: 293, byte_end: 294 }: )
Token { kind: Name(Keyword(Local)), char_start: 296, char_end: 301, byte_start: 296, byte_end: 301 }: local
Token { kind: Name(Identifier), char_start: 302, char_end: 316, byte_start: 302, byte_end: 316 }: current_search
Token { kind: Op(Assign), char_start: 317, char_end: 318, byte_start: 317, byte_end: 318 }: =
Token { kind: Name(Keyword(Nil)), char_start: 319, char_end: 322, byte_start: 319, byte_end: 322 }: nil
Token { kind: Name(Keyword(Local)), char_start: 324, char_end: 329, byte_start: 324, byte_end: 329 }: local
Token { kind: Name(Identifier), char_start: 330, char_end: 344, byte_start: 330, byte_end: 344 }: preview_buffer
Token { kind: Op(Assign), char_start: 345, char_end: 346, byte_start: 345, byte_end: 346 }: =
Token { kind: Name(Keyword(Nil)), char_start: 347, char_end: 350, byte_start: 347, byte_end: 350 }: nil
Token { kind: Name(Keyword(Local)), char_start: 351, char_end: 356, byte_start: 351, byte_end: 356 }: local
Token { kind: Name(Identifier), char_start: 357, char_end: 371, byte_start: 357, byte_end: 371 }: preview_window
Token { kind: Op(Assign), char_start: 372, char_end: 373, byte_start: 372, byte_end: 373 }: =
Token { kind: Name(Keyword(Nil)), char_start: 374, char_end: 377, byte_start: 374, byte_end: 377 }: nil
Token { kind: Comment(LineComment), char_start: 379, char_end: 426, byte_start: 379, byte_end: 426 }: -- TODO: can we make these a bit more private?

Token { kind: Name(Keyword(Local)), char_start: 426, char_end: 431, byte_start: 426, byte_end: 431 }: local
Token { kind: Name(Identifier), char_start: 432, char_end: 440, byte_start: 432, byte_end: 440 }: mappings
Token { kind: Op(Assign), char_start: 441, char_end: 442, byte_start: 441, byte_end: 442 }: =
Token { kind: Punctuator(Lcurly), char_start: 443, char_end: 444, byte_start: 443, byte_end: 444 }: {
Token { kind: Punctuator(Lbracket), char_start: 447, char_end: 448, byte_start: 447, byte_end: 448 }: [
Token { kind: Literal(Str(SingleQuoted)), char_start: 448, char_end: 455, byte_start: 448, byte_end: 455 }: '<C-j>'
Token { kind: Punctuator(Rbracket), char_start: 455, char_end: 456, byte_start: 455, byte_end: 456 }: ]
Token { kind: Op(Assign), char_start: 457, char_end: 458, byte_start: 457, byte_end: 458 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 459, char_end: 495, byte_start: 459, byte_end: 495 }: '<Cmd>lua corpus.preview_next()<CR>'
Token { kind: Punctuator(Comma), char_start: 495, char_end: 496, byte_start: 495, byte_end: 496 }: ,
Token { kind: Punctuator(Lbracket), char_start: 499, char_end: 500, byte_start: 499, byte_end: 500 }: [
Token { kind: Literal(Str(SingleQuoted)), char_start: 500, char_end: 507, byte_start: 500, byte_end: 507 }: '<C-k>'
Token { kind: Punctuator(Rbracket), char_start: 507, char_end: 508, byte_start: 507, byte_end: 508 }: ]
Token { kind: Op(Assign), char_start: 509, char_end: 510, byte_start: 509, byte_end: 510 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 511, char_end: 551, byte_start: 511, byte_end: 551 }: '<Cmd>lua corpus.preview_previous()<CR>'
Token { kind: Punctuator(Comma), char_start: 551, char_end: 552, byte_start: 551, byte_end: 552 }: ,
Token { kind: Punctuator(Lbracket), char_start: 555, char_end: 556, byte_start: 555, byte_end: 556 }: [
Token { kind: Literal(Str(SingleQuoted)), char_start: 556, char_end: 564, byte_start: 556, byte_end: 564 }: '<Down>'
Token { kind: Punctuator(Rbracket), char_start: 564, char_end: 565, byte_start: 564, byte_end: 565 }: ]
Token { kind: Op(Assign), char_start: 566, char_end: 567, byte_start: 566, byte_end: 567 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 568, char_end: 604, byte_start: 568, byte_end: 604 }: '<Cmd>lua corpus.preview_next()<CR>'
Token { kind: Punctuator(Comma), char_start: 604, char_end: 605, byte_start: 604, byte_end: 605 }: ,
Token { kind: Punctuator(Lbracket), char_start: 608, char_end: 609, byte_start: 608, byte_end: 609 }: [
Token { kind: Literal(Str(SingleQuoted)), char_start: 609, char_end: 615, byte_start: 609, byte_end: 615 }: '<Up>'
Token { kind: Punctuator(Rbracket), char_start: 615, char_end: 616, byte_start: 615, byte_end: 616 }: ]
Token { kind: Op(Assign), char_start: 617, char_end: 618, byte_start: 617, byte_end: 618 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 619, char_end: 659, byte_start: 619, byte_end: 659 }: '<Cmd>lua corpus.preview_previous()<CR>'
Token { kind: Punctuator(Comma), char_start: 659, char_end: 660, byte_start: 659, byte_end: 660 }: ,
Token { kind: Punctuator(Rcurly), char_start: 661, char_end: 662, byte_start: 661, byte_end: 662 }: }
Token { kind: Comment(LineComment), char_start: 664, char_end: 742, byte_start: 664, byte_end: 742 }: -- TODO: detect pre-existing mappings, save them, and restore them if needed.

Token { kind: Name(Keyword(Local)), char_start: 742, char_end: 747, byte_start: 742, byte_end: 747 }: local
Token { kind: Name(Identifier), char_start: 748, char_end: 763, byte_start: 748, byte_end: 763 }: set_up_mappings
Token { kind: Op(Assign), char_start: 764, char_end: 765, byte_start: 764, byte_end: 765 }: =
Token { kind: Name(Keyword(Function)), char_start: 766, char_end: 774, byte_start: 766, byte_end: 774 }: function
Token { kind: Punctuator(Lparen), char_start: 774, char_end: 775, byte_start: 774, byte_end: 775 }: (
Token { kind: Punctuator(Rparen), char_start: 775, char_end: 776, byte_start: 775, byte_end: 776 }: )
Token { kind: Name(Keyword(For)), char_start: 779, char_end: 782, byte_start: 779, byte_end: 782 }: for
Token { kind: Name(Identifier), char_start: 783, char_end: 786, byte_start: 783, byte_end: 786 }: lhs
Token { kind: Punctuator(Comma), char_start: 786, char_end: 787, byte_start: 786, byte_end: 787 }: ,
Token { kind: Name(Identifier), char_start: 788, char_end: 791, byte_start: 788, byte_end: 791 }: rhs
Token { kind: Name(Keyword(In)), char_start: 792, char_end: 794, byte_start: 792, byte_end: 794 }: in
Token { kind: Name(Identifier), char_start: 795, char_end: 800, byte_start: 795, byte_end: 800 }: pairs
Token { kind: Punctuator(Lparen), char_start: 800, char_end: 801, byte_start: 800, byte_end: 801 }: (
Token { kind: Name(Identifier), char_start: 801, char_end: 809, byte_start: 801, byte_end: 809 }: mappings
Token { kind: Punctuator(Rparen), char_start: 809, char_end: 810, byte_start: 809, byte_end: 810 }: )
Token { kind: Name(Keyword(Do)), char_start: 811, char_end: 813, byte_start: 811, byte_end: 813 }: do
Token { kind: Name(Identifier), char_start: 818, char_end: 821, byte_start: 818, byte_end: 821 }: vim
Token { kind: Punctuator(Dot), char_start: 821, char_end: 822, byte_start: 821, byte_end: 822 }: .
Token { kind: Name(Identifier), char_start: 822, char_end: 825, byte_start: 822, byte_end: 825 }: api
Token { kind: Punctuator(Dot), char_start: 825, char_end: 826, byte_start: 825, byte_end: 826 }: .
Token { kind: Name(Identifier), char_start: 826, char_end: 841, byte_start: 826, byte_end: 841 }: nvim_set_keymap
Token { kind: Punctuator(Lparen), char_start: 841, char_end: 842, byte_start: 841, byte_end: 842 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 842, char_end: 845, byte_start: 842, byte_end: 845 }: 'c'
Token { kind: Punctuator(Comma), char_start: 845, char_end: 846, byte_start: 845, byte_end: 846 }: ,
Token { kind: Name(Identifier), char_start: 847, char_end: 850, byte_start: 847, byte_end: 850 }: lhs
Token { kind: Punctuator(Comma), char_start: 850, char_end: 851, byte_start: 850, byte_end: 851 }: ,
Token { kind: Name(Identifier), char_start: 852, char_end: 855, byte_start: 852, byte_end: 855 }: rhs
Token { kind: Punctuator(Comma), char_start: 855, char_end: 856, byte_start: 855, byte_end: 856 }: ,
Token { kind: Punctuator(Lcurly), char_start: 857, char_end: 858, byte_start: 857, byte_end: 858 }: {
Token { kind: Name(Identifier), char_start: 858, char_end: 864, byte_start: 858, byte_end: 864 }: silent
Token { kind: Op(Assign), char_start: 865, char_end: 866, byte_start: 865, byte_end: 866 }: =
Token { kind: Name(Keyword(True)), char_start: 867, char_end: 871, byte_start: 867, byte_end: 871 }: true
Token { kind: Punctuator(Rcurly), char_start: 871, char_end: 872, byte_start: 871, byte_end: 872 }: }
Token { kind: Punctuator(Rparen), char_start: 872, char_end: 873, byte_start: 872, byte_end: 873 }: )
Token { kind: Name(Keyword(End)), char_start: 876, char_end: 879, byte_start: 876, byte_end: 879 }: end
Token { kind: Comment(LineComment), char_start: 882, char_end: 916, byte_start: 882, byte_end: 916 }: -- TODO sub to VimResized autocmd

Token { kind: Name(Keyword(End)), char_start: 916, char_end: 919, byte_start: 916, byte_end: 919 }: end
Token { kind: Name(Keyword(Local)), char_start: 921, char_end: 926, byte_start: 921, byte_end: 926 }: local
Token { kind: Name(Identifier), char_start: 927, char_end: 945, byte_start: 927, byte_end: 945 }: tear_down_mappings
Token { kind: Op(Assign), char_start: 946, char_end: 947, byte_start: 946, byte_end: 947 }: =
Token { kind: Name(Keyword(Function)), char_start: 948, char_end: 956, byte_start: 948, byte_end: 956 }: function
Token { kind: Punctuator(Lparen), char_start: 956, char_end: 957, byte_start: 956, byte_end: 957 }: (
Token { kind: Punctuator(Rparen), char_start: 957, char_end: 958, byte_start: 957, byte_end: 958 }: )
Token { kind: Name(Keyword(For)), char_start: 961, char_end: 964, byte_start: 961, byte_end: 964 }: for
Token { kind: Name(Identifier), char_start: 965, char_end: 968, byte_start: 965, byte_end: 968 }: lhs
Token { kind: Punctuator(Comma), char_start: 968, char_end: 969, byte_start: 968, byte_end: 969 }: ,
Token { kind: Name(Identifier), char_start: 970, char_end: 973, byte_start: 970, byte_end: 973 }: rhs
Token { kind: Name(Keyword(In)), char_start: 974, char_end: 976, byte_start: 974, byte_end: 976 }: in
Token { kind: Name(Identifier), char_start: 977, char_end: 982, byte_start: 977, byte_end: 982 }: pairs
Token { kind: Punctuator(Lparen), char_start: 982, char_end: 983, byte_start: 982, byte_end: 983 }: (
Token { kind: Name(Identifier), char_start: 983, char_end: 991, byte_start: 983, byte_end: 991 }: mappings
Token { kind: Punctuator(Rparen), char_start: 991, char_end: 992, byte_start: 991, byte_end: 992 }: )
Token { kind: Name(Keyword(Do)), char_start: 993, char_end: 995, byte_start: 993, byte_end: 995 }: do
Token { kind: Name(Keyword(If)), char_start: 1000, char_end: 1002, byte_start: 1000, byte_end: 1002 }: if
Token { kind: Name(Identifier), char_start: 1003, char_end: 1006, byte_start: 1003, byte_end: 1006 }: vim
Token { kind: Punctuator(Dot), char_start: 1006, char_end: 1007, byte_start: 1006, byte_end: 1007 }: .
Token { kind: Name(Identifier), char_start: 1007, char_end: 1009, byte_start: 1007, byte_end: 1009 }: fn
Token { kind: Punctuator(Dot), char_start: 1009, char_end: 1010, byte_start: 1009, byte_end: 1010 }: .
Token { kind: Name(Identifier), char_start: 1010, char_end: 1016, byte_start: 1010, byte_end: 1016 }: maparg
Token { kind: Punctuator(Lparen), char_start: 1016, char_end: 1017, byte_start: 1016, byte_end: 1017 }: (
Token { kind: Name(Identifier), char_start: 1017, char_end: 1020, byte_start: 1017, byte_end: 1020 }: lhs
Token { kind: Punctuator(Comma), char_start: 1020, char_end: 1021, byte_start: 1020, byte_end: 1021 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 1022, char_end: 1025, byte_start: 1022, byte_end: 1025 }: 'c'
Token { kind: Punctuator(Rparen), char_start: 1025, char_end: 1026, byte_start: 1025, byte_end: 1026 }: )
Token { kind: Op(Eq), char_start: 1027, char_end: 1029, byte_start: 1027, byte_end: 1029 }: ==
Token { kind: Name(Identifier), char_start: 1030, char_end: 1033, byte_start: 1030, byte_end: 1033 }: rhs
Token { kind: Name(Keyword(Then)), char_start: 1034, char_end: 1038, byte_start: 1034, byte_end: 1038 }: then
Token { kind: Comment(LineComment), char_start: 1045, char_end: 1111, byte_start: 1045, byte_end: 1111 }: -- TODO: find out if bang from old version was actually necessary

Token { kind: Comment(LineComment), char_start: 1117, char_end: 1154, byte_start: 1117, byte_end: 1154 }: -- vim.cmd('silent! cunmap ' .. lhs)

Token { kind: Name(Identifier), char_start: 1160, char_end: 1163, byte_start: 1160, byte_end: 1163 }: vim
Token { kind: Punctuator(Dot), char_start: 1163, char_end: 1164, byte_start: 1163, byte_end: 1164 }: .
Token { kind: Name(Identifier), char_start: 1164, char_end: 1167, byte_start: 1164, byte_end: 1167 }: api
Token { kind: Punctuator(Dot), char_start: 1167, char_end: 1168, byte_start: 1167, byte_end: 1168 }: .
Token { kind: Name(Identifier), char_start: 1168, char_end: 1183, byte_start: 1168, byte_end: 1183 }: nvim_del_keymap
Token { kind: Punctuator(Lparen), char_start: 1183, char_end: 1184, byte_start: 1183, byte_end: 1184 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 1184, char_end: 1187, byte_start: 1184, byte_end: 1187 }: 'c'
Token { kind: Punctuator(Comma), char_start: 1187, char_end: 1188, byte_start: 1187, byte_end: 1188 }: ,
Token { kind: Name(Identifier), char_start: 1189, char_end: 1192, byte_start: 1189, byte_end: 1192 }: lhs
Token { kind: Punctuator(Rparen), char_start: 1192, char_end: 1193, byte_start: 1192, byte_end: 1193 }: )
Token { kind: Name(Keyword(End)), char_start: 1198, char_end: 1201, byte_start: 1198, byte_end: 1201 }: end
Token { kind: Name(Keyword(End)), char_start: 1204, char_end: 1207, byte_start: 1204, byte_end: 1207 }: end
Token { kind: Comment(LineComment), char_start: 1210, char_end: 1246, byte_start: 1210, byte_end: 1246 }: -- TODO unsub to VimResized autocmd

Token { kind: Name(Keyword(End)), char_start: 1246, char_end: 1249, byte_start: 1246, byte_end: 1249 }: end
Token { kind: Comment(LineComment), char_start: 1251, char_end: 1328, byte_start: 1251, byte_end: 1328 }: -- TODO make most of these private (really only want them public for testing

Token { kind: Comment(LineComment), char_start: 1328, char_end: 1351, byte_start: 1328, byte_end: 1351 }: -- during development)

Token { kind: Name(Identifier), char_start: 1351, char_end: 1357, byte_start: 1351, byte_end: 1357 }: corpus
Token { kind: Op(Assign), char_start: 1358, char_end: 1359, byte_start: 1358, byte_end: 1359 }: =
Token { kind: Punctuator(Lcurly), char_start: 1360, char_end: 1361, byte_start: 1360, byte_end: 1361 }: {
Token { kind: Name(Identifier), char_start: 1364, char_end: 1370, byte_start: 1364, byte_end: 1370 }: choose
Token { kind: Op(Assign), char_start: 1371, char_end: 1372, byte_start: 1371, byte_end: 1372 }: =
Token { kind: Name(Keyword(Function)), char_start: 1373, char_end: 1381, byte_start: 1373, byte_end: 1381 }: function
Token { kind: Punctuator(Lparen), char_start: 1381, char_end: 1382, byte_start: 1381, byte_end: 1382 }: (
Token { kind: Name(Identifier), char_start: 1382, char_end: 1391, byte_start: 1382, byte_end: 1391 }: selection
Token { kind: Punctuator(Comma), char_start: 1391, char_end: 1392, byte_start: 1391, byte_end: 1392 }: ,
Token { kind: Name(Identifier), char_start: 1393, char_end: 1397, byte_start: 1393, byte_end: 1397 }: bang
Token { kind: Punctuator(Rparen), char_start: 1397, char_end: 1398, byte_start: 1397, byte_end: 1398 }: )
Token { kind: Name(Identifier), char_start: 1403, char_end: 1412, byte_start: 1403, byte_end: 1412 }: selection
Token { kind: Op(Assign), char_start: 1413, char_end: 1414, byte_start: 1413, byte_end: 1414 }: =
Token { kind: Name(Identifier), char_start: 1415, char_end: 1418, byte_start: 1415, byte_end: 1418 }: vim
Token { kind: Punctuator(Dot), char_start: 1418, char_end: 1419, byte_start: 1418, byte_end: 1419 }: .
Token { kind: Name(Identifier), char_start: 1419, char_end: 1423, byte_start: 1419, byte_end: 1423 }: trim
Token { kind: Punctuator(Lparen), char_start: 1423, char_end: 1424, byte_start: 1423, byte_end: 1424 }: (
Token { kind: Name(Identifier), char_start: 1424, char_end: 1433, byte_start: 1424, byte_end: 1433 }: selection
Token { kind: Punctuator(Rparen), char_start: 1433, char_end: 1434, byte_start: 1433, byte_end: 1434 }: )
Token { kind: Name(Keyword(Local)), char_start: 1439, char_end: 1444, byte_start: 1439, byte_end: 1444 }: local
Token { kind: Name(Identifier), char_start: 1445, char_end: 1451, byte_start: 1445, byte_end: 1451 }: create
Token { kind: Op(Assign), char_start: 1452, char_end: 1453, byte_start: 1452, byte_end: 1453 }: =
Token { kind: Name(Identifier), char_start: 1454, char_end: 1458, byte_start: 1454, byte_end: 1458 }: bang
Token { kind: Op(Eq), char_start: 1459, char_end: 1461, byte_start: 1459, byte_end: 1461 }: ==
Token { kind: Literal(Str(SingleQuoted)), char_start: 1462, char_end: 1465, byte_start: 1462, byte_end: 1465 }: '!'
Token { kind: Name(Keyword(Local)), char_start: 1470, char_end: 1475, byte_start: 1470, byte_end: 1475 }: local
Token { kind: Name(Identifier), char_start: 1476, char_end: 1480, byte_start: 1476, byte_end: 1480 }: file
Token { kind: Op(Assign), char_start: 1481, char_end: 1482, byte_start: 1481, byte_end: 1482 }: =
Token { kind: Name(Keyword(Nil)), char_start: 1483, char_end: 1486, byte_start: 1483, byte_end: 1486 }: nil
Token { kind: Name(Keyword(If)), char_start: 1491, char_end: 1493, byte_start: 1491, byte_end: 1493 }: if
Token { kind: Name(Identifier), char_start: 1494, char_end: 1497, byte_start: 1494, byte_end: 1497 }: vim
Token { kind: Punctuator(Dot), char_start: 1497, char_end: 1498, byte_start: 1497, byte_end: 1498 }: .
Token { kind: Name(Identifier), char_start: 1498, char_end: 1506, byte_start: 1498, byte_end: 1506 }: endswith
Token { kind: Punctuator(Lparen), char_start: 1506, char_end: 1507, byte_start: 1506, byte_end: 1507 }: (
Token { kind: Name(Identifier), char_start: 1507, char_end: 1516, byte_start: 1507, byte_end: 1516 }: selection
Token { kind: Punctuator(Comma), char_start: 1516, char_end: 1517, byte_start: 1516, byte_end: 1517 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 1518, char_end: 1521, byte_start: 1518, byte_end: 1521 }: '!'
Token { kind: Punctuator(Rparen), char_start: 1521, char_end: 1522, byte_start: 1521, byte_end: 1522 }: )
Token { kind: Name(Keyword(And)), char_start: 1523, char_end: 1526, byte_start: 1523, byte_end: 1526 }: and
Token { kind: Name(Identifier), char_start: 1527, char_end: 1530, byte_start: 1527, byte_end: 1530 }: vim
Token { kind: Punctuator(Dot), char_start: 1530, char_end: 1531, byte_start: 1530, byte_end: 1531 }: .
Token { kind: Name(Identifier), char_start: 1531, char_end: 1532, byte_start: 1531, byte_end: 1532 }: g
Token { kind: Punctuator(Dot), char_start: 1532, char_end: 1533, byte_start: 1532, byte_end: 1533 }: .
Token { kind: Name(Identifier), char_start: 1533, char_end: 1551, byte_start: 1533, byte_end: 1551 }: CorpusBangCreation
Token { kind: Op(Eq), char_start: 1552, char_end: 1554, byte_start: 1552, byte_end: 1554 }: ==
Token { kind: Literal(Number), char_start: 1555, char_end: 1556, byte_start: 1555, byte_end: 1556 }: 1
Token { kind: Name(Keyword(Then)), char_start: 1557, char_end: 1561, byte_start: 1557, byte_end: 1561 }: then
Token { kind: Name(Identifier), char_start: 1568, char_end: 1574, byte_start: 1568, byte_end: 1574 }: create
Token { kind: Op(Assign), char_start: 1575, char_end: 1576, byte_start: 1575, byte_end: 1576 }: =
Token { kind: Name(Keyword(True)), char_start: 1577, char_end: 1581, byte_start: 1577, byte_end: 1581 }: true
Token { kind: Name(Identifier), char_start: 1588, char_end: 1597, byte_start: 1588, byte_end: 1597 }: selection
Token { kind: Op(Assign), char_start: 1598, char_end: 1599, byte_start: 1598, byte_end: 1599 }: =
Token { kind: Name(Identifier), char_start: 1600, char_end: 1609, byte_start: 1600, byte_end: 1609 }: selection
Token { kind: Punctuator(Colon), char_start: 1609, char_end: 1610, byte_start: 1609, byte_end: 1610 }: :
Token { kind: Name(Identifier), char_start: 1610, char_end: 1613, byte_start: 1610, byte_end: 1613 }: sub
Token { kind: Punctuator(Lparen), char_start: 1613, char_end: 1614, byte_start: 1613, byte_end: 1614 }: (
Token { kind: Literal(Number), char_start: 1614, char_end: 1615, byte_start: 1614, byte_end: 1615 }: 0
Token { kind: Punctuator(Comma), char_start: 1615, char_end: 1616, byte_start: 1615, byte_end: 1616 }: ,
Token { kind: Op(Minus), char_start: 1617, char_end: 1618, byte_start: 1617, byte_end: 1618 }: -
Token { kind: Literal(Number), char_start: 1618, char_end: 1619, byte_start: 1618, byte_end: 1619 }: 2
Token { kind: Punctuator(Rparen), char_start: 1619, char_end: 1620, byte_start: 1619, byte_end: 1620 }: )
Token { kind: Name(Keyword(End)), char_start: 1625, char_end: 1628, byte_start: 1625, byte_end: 1628 }: end
Token { kind: Name(Keyword(If)), char_start: 1633, char_end: 1635, byte_start: 1633, byte_end: 1635 }: if
Token { kind: Name(Keyword(Not)), char_start: 1636, char_end: 1639, byte_start: 1636, byte_end: 1639 }: not
Token { kind: Name(Identifier), char_start: 1640, char_end: 1646, byte_start: 1640, byte_end: 1646 }: create
Token { kind: Name(Keyword(Then)), char_start: 1647, char_end: 1651, byte_start: 1647, byte_end: 1651 }: then
Token { kind: Name(Identifier), char_start: 1658, char_end: 1662, byte_start: 1658, byte_end: 1662 }: file
Token { kind: Op(Assign), char_start: 1663, char_end: 1664, byte_start: 1663, byte_end: 1664 }: =
Token { kind: Name(Identifier), char_start: 1665, char_end: 1671, byte_start: 1665, byte_end: 1671 }: corpus
Token { kind: Punctuator(Dot), char_start: 1671, char_end: 1672, byte_start: 1671, byte_end: 1672 }: .
Token { kind: Name(Identifier), char_start: 1672, char_end: 1689, byte_start: 1672, byte_end: 1689 }: get_selected_file
Token { kind: Punctuator(Lparen), char_start: 1689, char_end: 1690, byte_start: 1689, byte_end: 1690 }: (
Token { kind: Punctuator(Rparen), char_start: 1690, char_end: 1691, byte_start: 1690, byte_end: 1691 }: )
Token { kind: Name(Keyword(End)), char_start: 1696, char_end: 1699, byte_start: 1696, byte_end: 1699 }: end
Token { kind: Name(Keyword(If)), char_start: 1704, char_end: 1706, byte_start: 1704, byte_end: 1706 }: if
Token { kind: Name(Identifier), char_start: 1707, char_end: 1711, byte_start: 1707, byte_end: 1711 }: file
Token { kind: Op(Ne), char_start: 1712, char_end: 1714, byte_start: 1712, byte_end: 1714 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 1715, char_end: 1718, byte_start: 1715, byte_end: 1718 }: nil
Token { kind: Name(Keyword(Then)), char_start: 1719, char_end: 1723, byte_start: 1719, byte_end: 1723 }: then
Token { kind: Comment(LineComment), char_start: 1730, char_end: 1779, byte_start: 1730, byte_end: 1779 }: -- In a Corpus directory, trying to open a file.

Token { kind: Name(Identifier), char_start: 1785, char_end: 1788, byte_start: 1785, byte_end: 1788 }: vim
Token { kind: Punctuator(Dot), char_start: 1788, char_end: 1789, byte_start: 1788, byte_end: 1789 }: .
Token { kind: Name(Identifier), char_start: 1789, char_end: 1792, byte_start: 1789, byte_end: 1792 }: cmd
Token { kind: Punctuator(Lparen), char_start: 1792, char_end: 1793, byte_start: 1792, byte_end: 1793 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 1793, char_end: 1800, byte_start: 1793, byte_end: 1800 }: 'edit '
Token { kind: Op(Concat), char_start: 1801, char_end: 1803, byte_start: 1801, byte_end: 1803 }: ..
Token { kind: Name(Identifier), char_start: 1804, char_end: 1807, byte_start: 1804, byte_end: 1807 }: vim
Token { kind: Punctuator(Dot), char_start: 1807, char_end: 1808, byte_start: 1807, byte_end: 1808 }: .
Token { kind: Name(Identifier), char_start: 1808, char_end: 1810, byte_start: 1808, byte_end: 1810 }: fn
Token { kind: Punctuator(Dot), char_start: 1810, char_end: 1811, byte_start: 1810, byte_end: 1811 }: .
Token { kind: Name(Identifier), char_start: 1811, char_end: 1822, byte_start: 1811, byte_end: 1822 }: fnameescape
Token { kind: Punctuator(Lparen), char_start: 1822, char_end: 1823, byte_start: 1822, byte_end: 1823 }: (
Token { kind: Name(Identifier), char_start: 1823, char_end: 1827, byte_start: 1823, byte_end: 1827 }: file
Token { kind: Punctuator(Rparen), char_start: 1827, char_end: 1828, byte_start: 1827, byte_end: 1828 }: )
Token { kind: Punctuator(Rparen), char_start: 1828, char_end: 1829, byte_start: 1828, byte_end: 1829 }: )
Token { kind: Name(Keyword(Else)), char_start: 1834, char_end: 1838, byte_start: 1834, byte_end: 1838 }: else
Token { kind: Comment(LineComment), char_start: 1845, char_end: 1894, byte_start: 1845, byte_end: 1894 }: -- In create mode, or not in a Corpus directory.

Token { kind: Name(Keyword(Local)), char_start: 1900, char_end: 1905, byte_start: 1900, byte_end: 1905 }: local
Token { kind: Name(Identifier), char_start: 1906, char_end: 1915, byte_start: 1906, byte_end: 1915 }: directory
Token { kind: Op(Assign), char_start: 1916, char_end: 1917, byte_start: 1916, byte_end: 1917 }: =
Token { kind: Name(Identifier), char_start: 1918, char_end: 1924, byte_start: 1918, byte_end: 1924 }: corpus
Token { kind: Punctuator(Dot), char_start: 1924, char_end: 1925, byte_start: 1924, byte_end: 1925 }: .
Token { kind: Name(Identifier), char_start: 1925, char_end: 1934, byte_start: 1925, byte_end: 1934 }: directory
Token { kind: Punctuator(Lparen), char_start: 1934, char_end: 1935, byte_start: 1934, byte_end: 1935 }: (
Token { kind: Punctuator(Rparen), char_start: 1935, char_end: 1936, byte_start: 1935, byte_end: 1936 }: )
Token { kind: Name(Keyword(If)), char_start: 1943, char_end: 1945, byte_start: 1943, byte_end: 1945 }: if
Token { kind: Name(Identifier), char_start: 1946, char_end: 1955, byte_start: 1946, byte_end: 1955 }: selection
Token { kind: Punctuator(Colon), char_start: 1955, char_end: 1956, byte_start: 1955, byte_end: 1956 }: :
Token { kind: Name(Identifier), char_start: 1956, char_end: 1960, byte_start: 1956, byte_end: 1960 }: find
Token { kind: Punctuator(Lparen), char_start: 1960, char_end: 1961, byte_start: 1960, byte_end: 1961 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 1961, char_end: 1964, byte_start: 1961, byte_end: 1964 }: '/'
Token { kind: Punctuator(Rparen), char_start: 1964, char_end: 1965, byte_start: 1964, byte_end: 1965 }: )
Token { kind: Name(Keyword(Then)), char_start: 1966, char_end: 1970, byte_start: 1966, byte_end: 1970 }: then
Token { kind: Name(Identifier), char_start: 1979, char_end: 1988, byte_start: 1979, byte_end: 1988 }: selection
Token { kind: Op(Assign), char_start: 1989, char_end: 1990, byte_start: 1989, byte_end: 1990 }: =
Token { kind: Name(Identifier), char_start: 1991, char_end: 1997, byte_start: 1991, byte_end: 1997 }: corpus
Token { kind: Punctuator(Dot), char_start: 1997, char_end: 1998, byte_start: 1997, byte_end: 1998 }: .
Token { kind: Name(Identifier), char_start: 1998, char_end: 2007, byte_start: 1998, byte_end: 2007 }: normalize
Token { kind: Punctuator(Lparen), char_start: 2007, char_end: 2008, byte_start: 2007, byte_end: 2008 }: (
Token { kind: Name(Identifier), char_start: 2008, char_end: 2017, byte_start: 2008, byte_end: 2017 }: selection
Token { kind: Punctuator(Rparen), char_start: 2017, char_end: 2018, byte_start: 2017, byte_end: 2018 }: )
Token { kind: Name(Keyword(If)), char_start: 2027, char_end: 2029, byte_start: 2027, byte_end: 2029 }: if
Token { kind: Name(Identifier), char_start: 2030, char_end: 2033, byte_start: 2030, byte_end: 2033 }: vim
Token { kind: Punctuator(Dot), char_start: 2033, char_end: 2034, byte_start: 2033, byte_end: 2034 }: .
Token { kind: Name(Identifier), char_start: 2034, char_end: 2046, byte_start: 2034, byte_end: 2046 }: tbl_contains
Token { kind: Punctuator(Lparen), char_start: 2046, char_end: 2047, byte_start: 2046, byte_end: 2047 }: (
Token { kind: Name(Identifier), char_start: 2047, char_end: 2053, byte_start: 2047, byte_end: 2053 }: corpus
Token { kind: Punctuator(Dot), char_start: 2053, char_end: 2054, byte_start: 2053, byte_end: 2054 }: .
Token { kind: Name(Identifier), char_start: 2054, char_end: 2065, byte_start: 2054, byte_end: 2065 }: directories
Token { kind: Punctuator(Lparen), char_start: 2065, char_end: 2066, byte_start: 2065, byte_end: 2066 }: (
Token { kind: Punctuator(Rparen), char_start: 2066, char_end: 2067, byte_start: 2066, byte_end: 2067 }: )
Token { kind: Punctuator(Comma), char_start: 2067, char_end: 2068, byte_start: 2067, byte_end: 2068 }: ,
Token { kind: Name(Identifier), char_start: 2069, char_end: 2078, byte_start: 2069, byte_end: 2078 }: selection
Token { kind: Punctuator(Rparen), char_start: 2078, char_end: 2079, byte_start: 2078, byte_end: 2079 }: )
Token { kind: Name(Keyword(Then)), char_start: 2080, char_end: 2084, byte_start: 2080, byte_end: 2084 }: then
Token { kind: Name(Identifier), char_start: 2095, char_end: 2104, byte_start: 2095, byte_end: 2104 }: directory
Token { kind: Op(Assign), char_start: 2105, char_end: 2106, byte_start: 2105, byte_end: 2106 }: =
Token { kind: Name(Identifier), char_start: 2107, char_end: 2116, byte_start: 2107, byte_end: 2116 }: selection
Token { kind: Name(Identifier), char_start: 2127, char_end: 2131, byte_start: 2127, byte_end: 2131 }: file
Token { kind: Op(Assign), char_start: 2132, char_end: 2133, byte_start: 2132, byte_end: 2133 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 2134, char_end: 2136, byte_start: 2134, byte_end: 2136 }: ''
Token { kind: Name(Keyword(Else)), char_start: 2145, char_end: 2149, byte_start: 2145, byte_end: 2149 }: else
Token { kind: Name(Identifier), char_start: 2160, char_end: 2165, byte_start: 2160, byte_end: 2165 }: error
Token { kind: Punctuator(Lparen), char_start: 2165, char_end: 2166, byte_start: 2165, byte_end: 2166 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 2179, char_end: 2237, byte_start: 2179, byte_end: 2237 }: 'Invalid path: expected a new note name with no slashes, '
Token { kind: Op(Concat), char_start: 2238, char_end: 2240, byte_start: 2238, byte_end: 2240 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 2253, char_end: 2318, byte_start: 2253, byte_end: 2318 }: 'or a directory defined in the `CorpusDirectories` configuration'
Token { kind: Punctuator(Rparen), char_start: 2329, char_end: 2330, byte_start: 2329, byte_end: 2330 }: )
Token { kind: Name(Keyword(End)), char_start: 2339, char_end: 2342, byte_start: 2339, byte_end: 2342 }: end
Token { kind: Name(Keyword(Elseif)), char_start: 2349, char_end: 2355, byte_start: 2349, byte_end: 2355 }: elseif
Token { kind: Name(Identifier), char_start: 2356, char_end: 2365, byte_start: 2356, byte_end: 2365 }: directory
Token { kind: Op(Eq), char_start: 2366, char_end: 2368, byte_start: 2366, byte_end: 2368 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 2369, char_end: 2372, byte_start: 2369, byte_end: 2372 }: nil
Token { kind: Name(Keyword(Then)), char_start: 2373, char_end: 2377, byte_start: 2373, byte_end: 2377 }: then
Token { kind: Name(Identifier), char_start: 2386, char_end: 2391, byte_start: 2386, byte_end: 2391 }: error
Token { kind: Punctuator(Lparen), char_start: 2391, char_end: 2392, byte_start: 2391, byte_end: 2392 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 2392, char_end: 2430, byte_start: 2392, byte_end: 2430 }: 'Please configure `CorpusDirectories`'
Token { kind: Punctuator(Rparen), char_start: 2430, char_end: 2431, byte_start: 2430, byte_end: 2431 }: )
Token { kind: Name(Keyword(Else)), char_start: 2438, char_end: 2442, byte_start: 2438, byte_end: 2442 }: else
Token { kind: Name(Identifier), char_start: 2451, char_end: 2455, byte_start: 2451, byte_end: 2455 }: file
Token { kind: Op(Assign), char_start: 2456, char_end: 2457, byte_start: 2456, byte_end: 2457 }: =
Token { kind: Name(Identifier), char_start: 2458, char_end: 2467, byte_start: 2458, byte_end: 2467 }: selection
Token { kind: Name(Keyword(End)), char_start: 2474, char_end: 2477, byte_start: 2474, byte_end: 2477 }: end
Token { kind: Name(Identifier), char_start: 2484, char_end: 2487, byte_start: 2484, byte_end: 2487 }: vim
Token { kind: Punctuator(Dot), char_start: 2487, char_end: 2488, byte_start: 2487, byte_end: 2488 }: .
Token { kind: Name(Identifier), char_start: 2488, char_end: 2491, byte_start: 2488, byte_end: 2491 }: cmd
Token { kind: Punctuator(Lparen), char_start: 2491, char_end: 2492, byte_start: 2491, byte_end: 2492 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 2492, char_end: 2497, byte_start: 2492, byte_end: 2497 }: 'cd '
Token { kind: Op(Concat), char_start: 2498, char_end: 2500, byte_start: 2498, byte_end: 2500 }: ..
Token { kind: Name(Identifier), char_start: 2501, char_end: 2504, byte_start: 2501, byte_end: 2504 }: vim
Token { kind: Punctuator(Dot), char_start: 2504, char_end: 2505, byte_start: 2504, byte_end: 2505 }: .
Token { kind: Name(Identifier), char_start: 2505, char_end: 2507, byte_start: 2505, byte_end: 2507 }: fn
Token { kind: Punctuator(Dot), char_start: 2507, char_end: 2508, byte_start: 2507, byte_end: 2508 }: .
Token { kind: Name(Identifier), char_start: 2508, char_end: 2519, byte_start: 2508, byte_end: 2519 }: fnameescape
Token { kind: Punctuator(Lparen), char_start: 2519, char_end: 2520, byte_start: 2519, byte_end: 2520 }: (
Token { kind: Name(Identifier), char_start: 2520, char_end: 2529, byte_start: 2520, byte_end: 2529 }: directory
Token { kind: Punctuator(Rparen), char_start: 2529, char_end: 2530, byte_start: 2529, byte_end: 2530 }: )
Token { kind: Punctuator(Rparen), char_start: 2530, char_end: 2531, byte_start: 2530, byte_end: 2531 }: )
Token { kind: Name(Keyword(If)), char_start: 2538, char_end: 2540, byte_start: 2538, byte_end: 2540 }: if
Token { kind: Name(Identifier), char_start: 2541, char_end: 2545, byte_start: 2541, byte_end: 2545 }: file
Token { kind: Op(Ne), char_start: 2546, char_end: 2548, byte_start: 2546, byte_end: 2548 }: ~=
Token { kind: Literal(Str(SingleQuoted)), char_start: 2549, char_end: 2551, byte_start: 2549, byte_end: 2551 }: ''
Token { kind: Name(Keyword(And)), char_start: 2552, char_end: 2555, byte_start: 2552, byte_end: 2555 }: and
Token { kind: Name(Identifier), char_start: 2556, char_end: 2560, byte_start: 2556, byte_end: 2560 }: file
Token { kind: Op(Ne), char_start: 2561, char_end: 2563, byte_start: 2561, byte_end: 2563 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 2564, char_end: 2567, byte_start: 2564, byte_end: 2567 }: nil
Token { kind: Name(Keyword(Then)), char_start: 2568, char_end: 2572, byte_start: 2568, byte_end: 2572 }: then
Token { kind: Name(Keyword(If)), char_start: 2581, char_end: 2583, byte_start: 2581, byte_end: 2583 }: if
Token { kind: Name(Keyword(Not)), char_start: 2584, char_end: 2587, byte_start: 2584, byte_end: 2587 }: not
Token { kind: Name(Identifier), char_start: 2588, char_end: 2591, byte_start: 2588, byte_end: 2591 }: vim
Token { kind: Punctuator(Dot), char_start: 2591, char_end: 2592, byte_start: 2591, byte_end: 2592 }: .
Token { kind: Name(Identifier), char_start: 2592, char_end: 2600, byte_start: 2592, byte_end: 2600 }: endswith
Token { kind: Punctuator(Lparen), char_start: 2600, char_end: 2601, byte_start: 2600, byte_end: 2601 }: (
Token { kind: Name(Identifier), char_start: 2601, char_end: 2605, byte_start: 2601, byte_end: 2605 }: file
Token { kind: Punctuator(Comma), char_start: 2605, char_end: 2606, byte_start: 2605, byte_end: 2606 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 2607, char_end: 2612, byte_start: 2607, byte_end: 2612 }: '.md'
Token { kind: Punctuator(Rparen), char_start: 2612, char_end: 2613, byte_start: 2612, byte_end: 2613 }: )
Token { kind: Name(Keyword(Then)), char_start: 2614, char_end: 2618, byte_start: 2614, byte_end: 2618 }: then
Token { kind: Name(Identifier), char_start: 2629, char_end: 2633, byte_start: 2629, byte_end: 2633 }: file
Token { kind: Op(Assign), char_start: 2634, char_end: 2635, byte_start: 2634, byte_end: 2635 }: =
Token { kind: Name(Identifier), char_start: 2636, char_end: 2640, byte_start: 2636, byte_end: 2640 }: file
Token { kind: Op(Concat), char_start: 2641, char_end: 2643, byte_start: 2641, byte_end: 2643 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 2644, char_end: 2649, byte_start: 2644, byte_end: 2649 }: '.md'
Token { kind: Name(Keyword(End)), char_start: 2658, char_end: 2661, byte_start: 2658, byte_end: 2661 }: end
Token { kind: Name(Identifier), char_start: 2670, char_end: 2673, byte_start: 2670, byte_end: 2673 }: vim
Token { kind: Punctuator(Dot), char_start: 2673, char_end: 2674, byte_start: 2673, byte_end: 2674 }: .
Token { kind: Name(Identifier), char_start: 2674, char_end: 2677, byte_start: 2674, byte_end: 2677 }: cmd
Token { kind: Punctuator(Lparen), char_start: 2677, char_end: 2678, byte_start: 2677, byte_end: 2678 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 2678, char_end: 2685, byte_start: 2678, byte_end: 2685 }: 'edit '
Token { kind: Op(Concat), char_start: 2686, char_end: 2688, byte_start: 2686, byte_end: 2688 }: ..
Token { kind: Name(Identifier), char_start: 2689, char_end: 2692, byte_start: 2689, byte_end: 2692 }: vim
Token { kind: Punctuator(Dot), char_start: 2692, char_end: 2693, byte_start: 2692, byte_end: 2693 }: .
Token { kind: Name(Identifier), char_start: 2693, char_end: 2695, byte_start: 2693, byte_end: 2695 }: fn
Token { kind: Punctuator(Dot), char_start: 2695, char_end: 2696, byte_start: 2695, byte_end: 2696 }: .
Token { kind: Name(Identifier), char_start: 2696, char_end: 2707, byte_start: 2696, byte_end: 2707 }: fnameescape
Token { kind: Punctuator(Lparen), char_start: 2707, char_end: 2708, byte_start: 2707, byte_end: 2708 }: (
Token { kind: Name(Identifier), char_start: 2708, char_end: 2712, byte_start: 2708, byte_end: 2712 }: file
Token { kind: Punctuator(Rparen), char_start: 2712, char_end: 2713, byte_start: 2712, byte_end: 2713 }: )
Token { kind: Punctuator(Rparen), char_start: 2713, char_end: 2714, byte_start: 2713, byte_end: 2714 }: )
Token { kind: Name(Keyword(End)), char_start: 2721, char_end: 2724, byte_start: 2721, byte_end: 2724 }: end
Token { kind: Name(Keyword(End)), char_start: 2729, char_end: 2732, byte_start: 2729, byte_end: 2732 }: end
Token { kind: Name(Keyword(End)), char_start: 2735, char_end: 2738, byte_start: 2735, byte_end: 2738 }: end
Token { kind: Punctuator(Comma), char_start: 2738, char_end: 2739, byte_start: 2738, byte_end: 2739 }: ,
Token { kind: Name(Identifier), char_start: 2743, char_end: 2758, byte_start: 2743, byte_end: 2758 }: cmdline_changed
Token { kind: Op(Assign), char_start: 2759, char_end: 2760, byte_start: 2759, byte_end: 2760 }: =
Token { kind: Name(Keyword(Function)), char_start: 2761, char_end: 2769, byte_start: 2761, byte_end: 2769 }: function
Token { kind: Punctuator(Lparen), char_start: 2769, char_end: 2770, byte_start: 2769, byte_end: 2770 }: (
Token { kind: Name(Identifier), char_start: 2770, char_end: 2774, byte_start: 2770, byte_end: 2774 }: char
Token { kind: Punctuator(Rparen), char_start: 2774, char_end: 2775, byte_start: 2774, byte_end: 2775 }: )
Token { kind: Name(Keyword(If)), char_start: 2780, char_end: 2782, byte_start: 2780, byte_end: 2782 }: if
Token { kind: Name(Identifier), char_start: 2783, char_end: 2787, byte_start: 2783, byte_end: 2787 }: char
Token { kind: Op(Eq), char_start: 2788, char_end: 2790, byte_start: 2788, byte_end: 2790 }: ==
Token { kind: Literal(Str(SingleQuoted)), char_start: 2791, char_end: 2794, byte_start: 2791, byte_end: 2794 }: ':'
Token { kind: Name(Keyword(Then)), char_start: 2795, char_end: 2799, byte_start: 2795, byte_end: 2799 }: then
Token { kind: Name(Keyword(Local)), char_start: 2806, char_end: 2811, byte_start: 2806, byte_end: 2811 }: local
Token { kind: Name(Identifier), char_start: 2812, char_end: 2816, byte_start: 2812, byte_end: 2816 }: line
Token { kind: Op(Assign), char_start: 2817, char_end: 2818, byte_start: 2817, byte_end: 2818 }: =
Token { kind: Name(Identifier), char_start: 2819, char_end: 2822, byte_start: 2819, byte_end: 2822 }: vim
Token { kind: Punctuator(Dot), char_start: 2822, char_end: 2823, byte_start: 2822, byte_end: 2823 }: .
Token { kind: Name(Identifier), char_start: 2823, char_end: 2825, byte_start: 2823, byte_end: 2825 }: fn
Token { kind: Punctuator(Dot), char_start: 2825, char_end: 2826, byte_start: 2825, byte_end: 2826 }: .
Token { kind: Name(Identifier), char_start: 2826, char_end: 2836, byte_start: 2826, byte_end: 2836 }: getcmdline
Token { kind: Punctuator(Lparen), char_start: 2836, char_end: 2837, byte_start: 2836, byte_end: 2837 }: (
Token { kind: Punctuator(Rparen), char_start: 2837, char_end: 2838, byte_start: 2837, byte_end: 2838 }: )
Token { kind: Name(Keyword(Local)), char_start: 2845, char_end: 2850, byte_start: 2845, byte_end: 2850 }: local
Token { kind: Name(Identifier), char_start: 2851, char_end: 2852, byte_start: 2851, byte_end: 2852 }: _
Token { kind: Punctuator(Comma), char_start: 2852, char_end: 2853, byte_start: 2852, byte_end: 2853 }: ,
Token { kind: Name(Identifier), char_start: 2854, char_end: 2855, byte_start: 2854, byte_end: 2855 }: _
Token { kind: Punctuator(Comma), char_start: 2855, char_end: 2856, byte_start: 2855, byte_end: 2856 }: ,
Token { kind: Name(Identifier), char_start: 2857, char_end: 2861, byte_start: 2857, byte_end: 2861 }: term
Token { kind: Op(Assign), char_start: 2862, char_end: 2863, byte_start: 2862, byte_end: 2863 }: =
Token { kind: Name(Identifier), char_start: 2864, char_end: 2870, byte_start: 2864, byte_end: 2870 }: string
Token { kind: Punctuator(Dot), char_start: 2870, char_end: 2871, byte_start: 2870, byte_end: 2871 }: .
Token { kind: Name(Identifier), char_start: 2871, char_end: 2875, byte_start: 2871, byte_end: 2875 }: find
Token { kind: Punctuator(Lparen), char_start: 2875, char_end: 2876, byte_start: 2875, byte_end: 2876 }: (
Token { kind: Name(Identifier), char_start: 2876, char_end: 2880, byte_start: 2876, byte_end: 2880 }: line
Token { kind: Punctuator(Comma), char_start: 2880, char_end: 2881, byte_start: 2880, byte_end: 2881 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 2882, char_end: 2911, byte_start: 2882, byte_end: 2911 }: '^%s*Corpus%f[%A]%s*(.-)%s*$'
Token { kind: Punctuator(Rparen), char_start: 2911, char_end: 2912, byte_start: 2911, byte_end: 2912 }: )
Token { kind: Name(Keyword(If)), char_start: 2919, char_end: 2921, byte_start: 2919, byte_end: 2921 }: if
Token { kind: Name(Identifier), char_start: 2922, char_end: 2926, byte_start: 2922, byte_end: 2926 }: term
Token { kind: Op(Ne), char_start: 2927, char_end: 2929, byte_start: 2927, byte_end: 2929 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 2930, char_end: 2933, byte_start: 2930, byte_end: 2933 }: nil
Token { kind: Name(Keyword(Then)), char_start: 2934, char_end: 2938, byte_start: 2934, byte_end: 2938 }: then
Token { kind: Name(Keyword(If)), char_start: 2947, char_end: 2949, byte_start: 2947, byte_end: 2949 }: if
Token { kind: Name(Identifier), char_start: 2950, char_end: 2956, byte_start: 2950, byte_end: 2956 }: corpus
Token { kind: Punctuator(Dot), char_start: 2956, char_end: 2957, byte_start: 2956, byte_end: 2957 }: .
Token { kind: Name(Identifier), char_start: 2957, char_end: 2969, byte_start: 2957, byte_end: 2969 }: in_directory
Token { kind: Punctuator(Lparen), char_start: 2969, char_end: 2970, byte_start: 2969, byte_end: 2970 }: (
Token { kind: Punctuator(Rparen), char_start: 2970, char_end: 2971, byte_start: 2970, byte_end: 2971 }: )
Token { kind: Name(Keyword(Then)), char_start: 2972, char_end: 2976, byte_start: 2972, byte_end: 2976 }: then
Token { kind: Name(Identifier), char_start: 2987, char_end: 3002, byte_start: 2987, byte_end: 3002 }: set_up_mappings
Token { kind: Punctuator(Lparen), char_start: 3002, char_end: 3003, byte_start: 3002, byte_end: 3003 }: (
Token { kind: Punctuator(Rparen), char_start: 3003, char_end: 3004, byte_start: 3003, byte_end: 3004 }: )
Token { kind: Name(Keyword(Local)), char_start: 3015, char_end: 3020, byte_start: 3015, byte_end: 3020 }: local
Token { kind: Name(Identifier), char_start: 3021, char_end: 3026, byte_start: 3021, byte_end: 3026 }: width
Token { kind: Op(Assign), char_start: 3027, char_end: 3028, byte_start: 3027, byte_end: 3028 }: =
Token { kind: Name(Identifier), char_start: 3029, char_end: 3033, byte_start: 3029, byte_end: 3033 }: math
Token { kind: Punctuator(Dot), char_start: 3033, char_end: 3034, byte_start: 3033, byte_end: 3034 }: .
Token { kind: Name(Identifier), char_start: 3034, char_end: 3039, byte_start: 3034, byte_end: 3039 }: floor
Token { kind: Punctuator(Lparen), char_start: 3039, char_end: 3040, byte_start: 3039, byte_end: 3040 }: (
Token { kind: Name(Identifier), char_start: 3040, char_end: 3043, byte_start: 3040, byte_end: 3043 }: vim
Token { kind: Punctuator(Dot), char_start: 3043, char_end: 3044, byte_start: 3043, byte_end: 3044 }: .
Token { kind: Name(Identifier), char_start: 3044, char_end: 3045, byte_start: 3044, byte_end: 3045 }: o
Token { kind: Punctuator(Dot), char_start: 3045, char_end: 3046, byte_start: 3045, byte_end: 3046 }: .
Token { kind: Name(Identifier), char_start: 3046, char_end: 3053, byte_start: 3046, byte_end: 3053 }: columns
Token { kind: Op(Slash), char_start: 3054, char_end: 3055, byte_start: 3054, byte_end: 3055 }: /
Token { kind: Literal(Number), char_start: 3056, char_end: 3057, byte_start: 3056, byte_end: 3057 }: 2
Token { kind: Punctuator(Rparen), char_start: 3057, char_end: 3058, byte_start: 3057, byte_end: 3058 }: )
Token { kind: Name(Keyword(If)), char_start: 3069, char_end: 3071, byte_start: 3069, byte_end: 3071 }: if
Token { kind: Name(Identifier), char_start: 3072, char_end: 3086, byte_start: 3072, byte_end: 3086 }: chooser_window
Token { kind: Op(Eq), char_start: 3087, char_end: 3089, byte_start: 3087, byte_end: 3089 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 3090, char_end: 3093, byte_start: 3090, byte_end: 3093 }: nil
Token { kind: Name(Keyword(Then)), char_start: 3094, char_end: 3098, byte_start: 3094, byte_end: 3098 }: then
Token { kind: Name(Identifier), char_start: 3111, char_end: 3125, byte_start: 3111, byte_end: 3125 }: chooser_buffer
Token { kind: Op(Assign), char_start: 3126, char_end: 3127, byte_start: 3126, byte_end: 3127 }: =
Token { kind: Name(Identifier), char_start: 3128, char_end: 3131, byte_start: 3128, byte_end: 3131 }: vim
Token { kind: Punctuator(Dot), char_start: 3131, char_end: 3132, byte_start: 3131, byte_end: 3132 }: .
Token { kind: Name(Identifier), char_start: 3132, char_end: 3135, byte_start: 3132, byte_end: 3135 }: api
Token { kind: Punctuator(Dot), char_start: 3135, char_end: 3136, byte_start: 3135, byte_end: 3136 }: .
Token { kind: Name(Identifier), char_start: 3136, char_end: 3151, byte_start: 3136, byte_end: 3151 }: nvim_create_buf
Token { kind: Punctuator(Lparen), char_start: 3151, char_end: 3152, byte_start: 3151, byte_end: 3152 }: (
Token { kind: Name(Keyword(False)), char_start: 3167, char_end: 3172, byte_start: 3167, byte_end: 3172 }: false
Token { kind: Punctuator(Comma), char_start: 3172, char_end: 3173, byte_start: 3172, byte_end: 3173 }: ,
Token { kind: Comment(LineComment), char_start: 3174, char_end: 3185, byte_start: 3174, byte_end: 3185 }: -- listed?

Token { kind: Name(Keyword(True)), char_start: 3199, char_end: 3203, byte_start: 3199, byte_end: 3203 }: true
Token { kind: Comment(LineComment), char_start: 3204, char_end: 3216, byte_start: 3204, byte_end: 3216 }: -- scratch?

Token { kind: Punctuator(Rparen), char_start: 3228, char_end: 3229, byte_start: 3228, byte_end: 3229 }: )
Token { kind: Name(Identifier), char_start: 3242, char_end: 3256, byte_start: 3242, byte_end: 3256 }: chooser_window
Token { kind: Op(Assign), char_start: 3257, char_end: 3258, byte_start: 3257, byte_end: 3258 }: =
Token { kind: Name(Identifier), char_start: 3259, char_end: 3262, byte_start: 3259, byte_end: 3262 }: vim
Token { kind: Punctuator(Dot), char_start: 3262, char_end: 3263, byte_start: 3262, byte_end: 3263 }: .
Token { kind: Name(Identifier), char_start: 3263, char_end: 3266, byte_start: 3263, byte_end: 3266 }: api
Token { kind: Punctuator(Dot), char_start: 3266, char_end: 3267, byte_start: 3266, byte_end: 3267 }: .
Token { kind: Name(Identifier), char_start: 3267, char_end: 3280, byte_start: 3267, byte_end: 3280 }: nvim_open_win
Token { kind: Punctuator(Lparen), char_start: 3280, char_end: 3281, byte_start: 3280, byte_end: 3281 }: (
Token { kind: Name(Identifier), char_start: 3296, char_end: 3310, byte_start: 3296, byte_end: 3310 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 3310, char_end: 3311, byte_start: 3310, byte_end: 3311 }: ,
Token { kind: Name(Keyword(False)), char_start: 3326, char_end: 3331, byte_start: 3326, byte_end: 3331 }: false
Token { kind: Comment(BlockComment), char_start: 3332, char_end: 3348, byte_start: 3332, byte_end: 3348 }: --[[ enter? --]]
Token { kind: Punctuator(Comma), char_start: 3348, char_end: 3349, byte_start: 3348, byte_end: 3349 }: ,
Token { kind: Punctuator(Lcurly), char_start: 3350, char_end: 3351, byte_start: 3350, byte_end: 3351 }: {
Token { kind: Name(Identifier), char_start: 3368, char_end: 3371, byte_start: 3368, byte_end: 3371 }: col
Token { kind: Op(Assign), char_start: 3372, char_end: 3373, byte_start: 3372, byte_end: 3373 }: =
Token { kind: Literal(Number), char_start: 3374, char_end: 3375, byte_start: 3374, byte_end: 3375 }: 0
Token { kind: Punctuator(Comma), char_start: 3375, char_end: 3376, byte_start: 3375, byte_end: 3376 }: ,
Token { kind: Name(Identifier), char_start: 3393, char_end: 3396, byte_start: 3393, byte_end: 3396 }: row
Token { kind: Op(Assign), char_start: 3397, char_end: 3398, byte_start: 3397, byte_end: 3398 }: =
Token { kind: Literal(Number), char_start: 3399, char_end: 3400, byte_start: 3399, byte_end: 3400 }: 0
Token { kind: Punctuator(Comma), char_start: 3400, char_end: 3401, byte_start: 3400, byte_end: 3401 }: ,
Token { kind: Name(Identifier), char_start: 3418, char_end: 3427, byte_start: 3418, byte_end: 3427 }: focusable
Token { kind: Op(Assign), char_start: 3428, char_end: 3429, byte_start: 3428, byte_end: 3429 }: =
Token { kind: Name(Keyword(False)), char_start: 3430, char_end: 3435, byte_start: 3430, byte_end: 3435 }: false
Token { kind: Punctuator(Comma), char_start: 3435, char_end: 3436, byte_start: 3435, byte_end: 3436 }: ,
Token { kind: Name(Identifier), char_start: 3453, char_end: 3461, byte_start: 3453, byte_end: 3461 }: relative
Token { kind: Op(Assign), char_start: 3462, char_end: 3463, byte_start: 3462, byte_end: 3463 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 3464, char_end: 3472, byte_start: 3464, byte_end: 3472 }: 'editor'
Token { kind: Punctuator(Comma), char_start: 3472, char_end: 3473, byte_start: 3472, byte_end: 3473 }: ,
Token { kind: Name(Identifier), char_start: 3490, char_end: 3495, byte_start: 3490, byte_end: 3495 }: style
Token { kind: Op(Assign), char_start: 3496, char_end: 3497, byte_start: 3496, byte_end: 3497 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 3498, char_end: 3507, byte_start: 3498, byte_end: 3507 }: 'minimal'
Token { kind: Punctuator(Comma), char_start: 3507, char_end: 3508, byte_start: 3507, byte_end: 3508 }: ,
Token { kind: Name(Identifier), char_start: 3525, char_end: 3530, byte_start: 3525, byte_end: 3530 }: width
Token { kind: Op(Assign), char_start: 3531, char_end: 3532, byte_start: 3531, byte_end: 3532 }: =
Token { kind: Name(Identifier), char_start: 3533, char_end: 3538, byte_start: 3533, byte_end: 3538 }: width
Token { kind: Punctuator(Comma), char_start: 3538, char_end: 3539, byte_start: 3538, byte_end: 3539 }: ,
Token { kind: Name(Identifier), char_start: 3556, char_end: 3562, byte_start: 3556, byte_end: 3562 }: height
Token { kind: Op(Assign), char_start: 3563, char_end: 3564, byte_start: 3563, byte_end: 3564 }: =
Token { kind: Name(Identifier), char_start: 3565, char_end: 3568, byte_start: 3565, byte_end: 3568 }: vim
Token { kind: Punctuator(Dot), char_start: 3568, char_end: 3569, byte_start: 3568, byte_end: 3569 }: .
Token { kind: Name(Identifier), char_start: 3569, char_end: 3570, byte_start: 3569, byte_end: 3570 }: o
Token { kind: Punctuator(Dot), char_start: 3570, char_end: 3571, byte_start: 3570, byte_end: 3571 }: .
Token { kind: Name(Identifier), char_start: 3571, char_end: 3576, byte_start: 3571, byte_end: 3576 }: lines
Token { kind: Op(Minus), char_start: 3577, char_end: 3578, byte_start: 3577, byte_end: 3578 }: -
Token { kind: Literal(Number), char_start: 3579, char_end: 3580, byte_start: 3579, byte_end: 3580 }: 2
Token { kind: Punctuator(Comma), char_start: 3580, char_end: 3581, byte_start: 3580, byte_end: 3581 }: ,
Token { kind: Punctuator(Rcurly), char_start: 3596, char_end: 3597, byte_start: 3596, byte_end: 3597 }: }
Token { kind: Punctuator(Rparen), char_start: 3610, char_end: 3611, byte_start: 3610, byte_end: 3611 }: )
Token { kind: Name(Identifier), char_start: 3624, char_end: 3627, byte_start: 3624, byte_end: 3627 }: vim
Token { kind: Punctuator(Dot), char_start: 3627, char_end: 3628, byte_start: 3627, byte_end: 3628 }: .
Token { kind: Name(Identifier), char_start: 3628, char_end: 3631, byte_start: 3628, byte_end: 3631 }: api
Token { kind: Punctuator(Dot), char_start: 3631, char_end: 3632, byte_start: 3631, byte_end: 3632 }: .
Token { kind: Name(Identifier), char_start: 3632, char_end: 3651, byte_start: 3632, byte_end: 3651 }: nvim_win_set_option
Token { kind: Punctuator(Lparen), char_start: 3651, char_end: 3652, byte_start: 3651, byte_end: 3652 }: (
Token { kind: Name(Identifier), char_start: 3652, char_end: 3666, byte_start: 3652, byte_end: 3666 }: chooser_window
Token { kind: Punctuator(Comma), char_start: 3666, char_end: 3667, byte_start: 3666, byte_end: 3667 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 3668, char_end: 3674, byte_start: 3668, byte_end: 3674 }: 'wrap'
Token { kind: Punctuator(Comma), char_start: 3674, char_end: 3675, byte_start: 3674, byte_end: 3675 }: ,
Token { kind: Name(Keyword(False)), char_start: 3676, char_end: 3681, byte_start: 3676, byte_end: 3681 }: false
Token { kind: Punctuator(Rparen), char_start: 3681, char_end: 3682, byte_start: 3681, byte_end: 3682 }: )
Token { kind: Name(Identifier), char_start: 3695, char_end: 3698, byte_start: 3695, byte_end: 3698 }: vim
Token { kind: Punctuator(Dot), char_start: 3698, char_end: 3699, byte_start: 3698, byte_end: 3699 }: .
Token { kind: Name(Identifier), char_start: 3699, char_end: 3702, byte_start: 3699, byte_end: 3702 }: api
Token { kind: Punctuator(Dot), char_start: 3702, char_end: 3703, byte_start: 3702, byte_end: 3703 }: .
Token { kind: Name(Identifier), char_start: 3703, char_end: 3722, byte_start: 3703, byte_end: 3722 }: nvim_win_set_option
Token { kind: Punctuator(Lparen), char_start: 3722, char_end: 3723, byte_start: 3722, byte_end: 3723 }: (
Token { kind: Name(Identifier), char_start: 3723, char_end: 3737, byte_start: 3723, byte_end: 3737 }: chooser_window
Token { kind: Punctuator(Comma), char_start: 3737, char_end: 3738, byte_start: 3737, byte_end: 3738 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 3739, char_end: 3746, byte_start: 3739, byte_end: 3746 }: 'winhl'
Token { kind: Punctuator(Comma), char_start: 3746, char_end: 3747, byte_start: 3746, byte_end: 3747 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 3748, char_end: 3765, byte_start: 3748, byte_end: 3765 }: 'Normal:Question'
Token { kind: Punctuator(Rparen), char_start: 3765, char_end: 3766, byte_start: 3765, byte_end: 3766 }: )
Token { kind: Name(Keyword(End)), char_start: 3777, char_end: 3780, byte_start: 3777, byte_end: 3780 }: end
Token { kind: Name(Keyword(Local)), char_start: 3792, char_end: 3797, byte_start: 3792, byte_end: 3797 }: local
Token { kind: Name(Identifier), char_start: 3798, char_end: 3804, byte_start: 3798, byte_end: 3804 }: update
Token { kind: Op(Assign), char_start: 3805, char_end: 3806, byte_start: 3805, byte_end: 3806 }: =
Token { kind: Name(Keyword(Function)), char_start: 3807, char_end: 3815, byte_start: 3807, byte_end: 3815 }: function
Token { kind: Punctuator(Lparen), char_start: 3815, char_end: 3816, byte_start: 3815, byte_end: 3816 }: (
Token { kind: Name(Identifier), char_start: 3816, char_end: 3823, byte_start: 3816, byte_end: 3823 }: results
Token { kind: Punctuator(Rparen), char_start: 3823, char_end: 3824, byte_start: 3823, byte_end: 3824 }: )
Token { kind: Name(Keyword(Local)), char_start: 3837, char_end: 3842, byte_start: 3837, byte_end: 3842 }: local
Token { kind: Name(Identifier), char_start: 3843, char_end: 3848, byte_start: 3843, byte_end: 3848 }: lines
Token { kind: Op(Assign), char_start: 3849, char_end: 3850, byte_start: 3849, byte_end: 3850 }: =
Token { kind: Name(Keyword(Nil)), char_start: 3851, char_end: 3854, byte_start: 3851, byte_end: 3854 }: nil
Token { kind: Name(Keyword(If)), char_start: 3868, char_end: 3870, byte_start: 3868, byte_end: 3870 }: if
Token { kind: Op(Hash), char_start: 3871, char_end: 3872, byte_start: 3871, byte_end: 3872 }: #
Token { kind: Name(Identifier), char_start: 3872, char_end: 3879, byte_start: 3872, byte_end: 3879 }: results
Token { kind: Op(Gt), char_start: 3880, char_end: 3881, byte_start: 3880, byte_end: 3881 }: >
Token { kind: Literal(Number), char_start: 3882, char_end: 3883, byte_start: 3882, byte_end: 3883 }: 0
Token { kind: Name(Keyword(Then)), char_start: 3884, char_end: 3888, byte_start: 3884, byte_end: 3888 }: then
Token { kind: Comment(LineComment), char_start: 3903, char_end: 3969, byte_start: 3903, byte_end: 3969 }: -- 1 because Neovim cursor indexing is 1-based, as are Lua lists.

Token { kind: Name(Identifier), char_start: 3983, char_end: 4005, byte_start: 3983, byte_end: 4005 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 4006, char_end: 4007, byte_start: 4006, byte_end: 4007 }: =
Token { kind: Literal(Number), char_start: 4008, char_end: 4009, byte_start: 4008, byte_end: 4009 }: 1
Token { kind: Name(Identifier), char_start: 4025, char_end: 4030, byte_start: 4025, byte_end: 4030 }: lines
Token { kind: Op(Assign), char_start: 4031, char_end: 4032, byte_start: 4031, byte_end: 4032 }: =
Token { kind: Name(Identifier), char_start: 4033, char_end: 4037, byte_start: 4033, byte_end: 4037 }: util
Token { kind: Punctuator(Dot), char_start: 4037, char_end: 4038, byte_start: 4037, byte_end: 4038 }: .
Token { kind: Name(Identifier), char_start: 4038, char_end: 4042, byte_start: 4038, byte_end: 4042 }: list
Token { kind: Punctuator(Dot), char_start: 4042, char_end: 4043, byte_start: 4042, byte_end: 4043 }: .
Token { kind: Name(Identifier), char_start: 4043, char_end: 4046, byte_start: 4043, byte_end: 4046 }: map
Token { kind: Punctuator(Lparen), char_start: 4046, char_end: 4047, byte_start: 4046, byte_end: 4047 }: (
Token { kind: Name(Identifier), char_start: 4047, char_end: 4054, byte_start: 4047, byte_end: 4054 }: results
Token { kind: Punctuator(Comma), char_start: 4054, char_end: 4055, byte_start: 4054, byte_end: 4055 }: ,
Token { kind: Name(Keyword(Function)), char_start: 4056, char_end: 4064, byte_start: 4056, byte_end: 4064 }: function
Token { kind: Punctuator(Lparen), char_start: 4065, char_end: 4066, byte_start: 4065, byte_end: 4066 }: (
Token { kind: Name(Identifier), char_start: 4066, char_end: 4072, byte_start: 4066, byte_end: 4072 }: result
Token { kind: Punctuator(Comma), char_start: 4072, char_end: 4073, byte_start: 4072, byte_end: 4073 }: ,
Token { kind: Name(Identifier), char_start: 4074, char_end: 4075, byte_start: 4074, byte_end: 4075 }: i
Token { kind: Punctuator(Rparen), char_start: 4075, char_end: 4076, byte_start: 4075, byte_end: 4076 }: )
Token { kind: Name(Keyword(Local)), char_start: 4093, char_end: 4098, byte_start: 4093, byte_end: 4098 }: local
Token { kind: Name(Identifier), char_start: 4099, char_end: 4103, byte_start: 4099, byte_end: 4103 }: name
Token { kind: Op(Assign), char_start: 4104, char_end: 4105, byte_start: 4104, byte_end: 4105 }: =
Token { kind: Name(Identifier), char_start: 4106, char_end: 4109, byte_start: 4106, byte_end: 4109 }: vim
Token { kind: Punctuator(Dot), char_start: 4109, char_end: 4110, byte_start: 4109, byte_end: 4110 }: .
Token { kind: Name(Identifier), char_start: 4110, char_end: 4112, byte_start: 4110, byte_end: 4112 }: fn
Token { kind: Punctuator(Dot), char_start: 4112, char_end: 4113, byte_start: 4112, byte_end: 4113 }: .
Token { kind: Name(Identifier), char_start: 4113, char_end: 4124, byte_start: 4113, byte_end: 4124 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 4124, char_end: 4125, byte_start: 4124, byte_end: 4125 }: (
Token { kind: Name(Identifier), char_start: 4125, char_end: 4131, byte_start: 4125, byte_end: 4131 }: result
Token { kind: Punctuator(Comma), char_start: 4131, char_end: 4132, byte_start: 4131, byte_end: 4132 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 4133, char_end: 4137, byte_start: 4133, byte_end: 4137 }: ':r'
Token { kind: Punctuator(Rparen), char_start: 4137, char_end: 4138, byte_start: 4137, byte_end: 4138 }: )
Token { kind: Name(Keyword(Local)), char_start: 4155, char_end: 4160, byte_start: 4155, byte_end: 4160 }: local
Token { kind: Name(Identifier), char_start: 4161, char_end: 4167, byte_start: 4161, byte_end: 4167 }: prefix
Token { kind: Op(Assign), char_start: 4168, char_end: 4169, byte_start: 4168, byte_end: 4169 }: =
Token { kind: Name(Keyword(Nil)), char_start: 4170, char_end: 4173, byte_start: 4170, byte_end: 4173 }: nil
Token { kind: Name(Keyword(If)), char_start: 4190, char_end: 4192, byte_start: 4190, byte_end: 4192 }: if
Token { kind: Name(Identifier), char_start: 4193, char_end: 4194, byte_start: 4193, byte_end: 4194 }: i
Token { kind: Op(Eq), char_start: 4195, char_end: 4197, byte_start: 4195, byte_end: 4197 }: ==
Token { kind: Name(Identifier), char_start: 4198, char_end: 4220, byte_start: 4198, byte_end: 4220 }: chooser_selected_index
Token { kind: Name(Keyword(Then)), char_start: 4221, char_end: 4225, byte_start: 4221, byte_end: 4225 }: then
Token { kind: Name(Identifier), char_start: 4244, char_end: 4250, byte_start: 4244, byte_end: 4250 }: prefix
Token { kind: Op(Assign), char_start: 4251, char_end: 4252, byte_start: 4251, byte_end: 4252 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 4253, char_end: 4257, byte_start: 4253, byte_end: 4257 }: '> '
Token { kind: Name(Keyword(Else)), char_start: 4274, char_end: 4278, byte_start: 4274, byte_end: 4278 }: else
Token { kind: Name(Identifier), char_start: 4297, char_end: 4303, byte_start: 4297, byte_end: 4303 }: prefix
Token { kind: Op(Assign), char_start: 4304, char_end: 4305, byte_start: 4304, byte_end: 4305 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 4306, char_end: 4310, byte_start: 4306, byte_end: 4310 }: '  '
Token { kind: Name(Keyword(End)), char_start: 4327, char_end: 4330, byte_start: 4327, byte_end: 4330 }: end
Token { kind: Comment(LineComment), char_start: 4347, char_end: 4410, byte_start: 4347, byte_end: 4410 }: -- Right pad so that selection highlight extends fully across.

Token { kind: Name(Keyword(If)), char_start: 4426, char_end: 4428, byte_start: 4426, byte_end: 4428 }: if
Token { kind: Name(Identifier), char_start: 4429, char_end: 4434, byte_start: 4429, byte_end: 4434 }: width
Token { kind: Op(Lt), char_start: 4435, char_end: 4436, byte_start: 4435, byte_end: 4436 }: <
Token { kind: Literal(Number), char_start: 4437, char_end: 4440, byte_start: 4437, byte_end: 4440 }: 102
Token { kind: Name(Keyword(Then)), char_start: 4441, char_end: 4445, byte_start: 4441, byte_end: 4445 }: then
Token { kind: Name(Keyword(Return)), char_start: 4464, char_end: 4470, byte_start: 4464, byte_end: 4470 }: return
Token { kind: Name(Identifier), char_start: 4471, char_end: 4477, byte_start: 4471, byte_end: 4477 }: prefix
Token { kind: Op(Concat), char_start: 4478, char_end: 4480, byte_start: 4478, byte_end: 4480 }: ..
Token { kind: Name(Identifier), char_start: 4481, char_end: 4487, byte_start: 4481, byte_end: 4487 }: string
Token { kind: Punctuator(Dot), char_start: 4487, char_end: 4488, byte_start: 4487, byte_end: 4488 }: .
Token { kind: Name(Identifier), char_start: 4488, char_end: 4494, byte_start: 4488, byte_end: 4494 }: format
Token { kind: Punctuator(Lparen), char_start: 4494, char_end: 4495, byte_start: 4494, byte_end: 4495 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 4495, char_end: 4499, byte_start: 4495, byte_end: 4499 }: '%-'
Token { kind: Op(Concat), char_start: 4500, char_end: 4502, byte_start: 4500, byte_end: 4502 }: ..
Token { kind: Punctuator(Lparen), char_start: 4503, char_end: 4504, byte_start: 4503, byte_end: 4504 }: (
Token { kind: Name(Identifier), char_start: 4504, char_end: 4509, byte_start: 4504, byte_end: 4509 }: width
Token { kind: Op(Minus), char_start: 4510, char_end: 4511, byte_start: 4510, byte_end: 4511 }: -
Token { kind: Literal(Number), char_start: 4512, char_end: 4513, byte_start: 4512, byte_end: 4513 }: 2
Token { kind: Punctuator(Rparen), char_start: 4513, char_end: 4514, byte_start: 4513, byte_end: 4514 }: )
Token { kind: Op(Concat), char_start: 4515, char_end: 4517, byte_start: 4515, byte_end: 4517 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 4518, char_end: 4521, byte_start: 4518, byte_end: 4521 }: 's'
Token { kind: Punctuator(Comma), char_start: 4521, char_end: 4522, byte_start: 4521, byte_end: 4522 }: ,
Token { kind: Name(Identifier), char_start: 4523, char_end: 4527, byte_start: 4523, byte_end: 4527 }: name
Token { kind: Punctuator(Rparen), char_start: 4527, char_end: 4528, byte_start: 4527, byte_end: 4528 }: )
Token { kind: Name(Keyword(Else)), char_start: 4545, char_end: 4549, byte_start: 4545, byte_end: 4549 }: else
Token { kind: Comment(LineComment), char_start: 4568, char_end: 4625, byte_start: 4568, byte_end: 4625 }: -- Avoid: "invalid format (width or precision too long)"

Token { kind: Name(Keyword(Local)), char_start: 4643, char_end: 4648, byte_start: 4643, byte_end: 4648 }: local
Token { kind: Name(Identifier), char_start: 4649, char_end: 4655, byte_start: 4649, byte_end: 4655 }: padded
Token { kind: Op(Assign), char_start: 4656, char_end: 4657, byte_start: 4656, byte_end: 4657 }: =
Token { kind: Name(Identifier), char_start: 4658, char_end: 4664, byte_start: 4658, byte_end: 4664 }: prefix
Token { kind: Op(Concat), char_start: 4665, char_end: 4667, byte_start: 4665, byte_end: 4667 }: ..
Token { kind: Name(Identifier), char_start: 4668, char_end: 4674, byte_start: 4668, byte_end: 4674 }: string
Token { kind: Punctuator(Dot), char_start: 4674, char_end: 4675, byte_start: 4674, byte_end: 4675 }: .
Token { kind: Name(Identifier), char_start: 4675, char_end: 4681, byte_start: 4675, byte_end: 4681 }: format
Token { kind: Punctuator(Lparen), char_start: 4681, char_end: 4682, byte_start: 4681, byte_end: 4682 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 4682, char_end: 4689, byte_start: 4682, byte_end: 4689 }: '%-99s'
Token { kind: Punctuator(Comma), char_start: 4689, char_end: 4690, byte_start: 4689, byte_end: 4690 }: ,
Token { kind: Name(Identifier), char_start: 4691, char_end: 4695, byte_start: 4691, byte_end: 4695 }: name
Token { kind: Punctuator(Rparen), char_start: 4695, char_end: 4696, byte_start: 4695, byte_end: 4696 }: )
Token { kind: Name(Keyword(Local)), char_start: 4715, char_end: 4720, byte_start: 4715, byte_end: 4720 }: local
Token { kind: Name(Identifier), char_start: 4721, char_end: 4725, byte_start: 4721, byte_end: 4725 }: diff
Token { kind: Op(Assign), char_start: 4726, char_end: 4727, byte_start: 4726, byte_end: 4727 }: =
Token { kind: Name(Identifier), char_start: 4728, char_end: 4733, byte_start: 4728, byte_end: 4733 }: width
Token { kind: Op(Minus), char_start: 4734, char_end: 4735, byte_start: 4734, byte_end: 4735 }: -
Token { kind: Name(Identifier), char_start: 4736, char_end: 4742, byte_start: 4736, byte_end: 4742 }: padded
Token { kind: Punctuator(Colon), char_start: 4742, char_end: 4743, byte_start: 4742, byte_end: 4743 }: :
Token { kind: Name(Identifier), char_start: 4743, char_end: 4746, byte_start: 4743, byte_end: 4746 }: len
Token { kind: Punctuator(Lparen), char_start: 4746, char_end: 4747, byte_start: 4746, byte_end: 4747 }: (
Token { kind: Punctuator(Rparen), char_start: 4747, char_end: 4748, byte_start: 4747, byte_end: 4748 }: )
Token { kind: Name(Keyword(If)), char_start: 4767, char_end: 4769, byte_start: 4767, byte_end: 4769 }: if
Token { kind: Name(Identifier), char_start: 4770, char_end: 4774, byte_start: 4770, byte_end: 4774 }: diff
Token { kind: Op(Gt), char_start: 4775, char_end: 4776, byte_start: 4775, byte_end: 4776 }: >
Token { kind: Literal(Number), char_start: 4777, char_end: 4778, byte_start: 4777, byte_end: 4778 }: 0
Token { kind: Name(Keyword(Then)), char_start: 4779, char_end: 4783, byte_start: 4779, byte_end: 4783 }: then
Token { kind: Name(Identifier), char_start: 4804, char_end: 4810, byte_start: 4804, byte_end: 4810 }: padded
Token { kind: Op(Assign), char_start: 4811, char_end: 4812, byte_start: 4811, byte_end: 4812 }: =
Token { kind: Name(Identifier), char_start: 4813, char_end: 4819, byte_start: 4813, byte_end: 4819 }: padded
Token { kind: Op(Concat), char_start: 4820, char_end: 4822, byte_start: 4820, byte_end: 4822 }: ..
Token { kind: Name(Identifier), char_start: 4823, char_end: 4829, byte_start: 4823, byte_end: 4829 }: string
Token { kind: Punctuator(Dot), char_start: 4829, char_end: 4830, byte_start: 4829, byte_end: 4830 }: .
Token { kind: Name(Identifier), char_start: 4830, char_end: 4833, byte_start: 4830, byte_end: 4833 }: rep
Token { kind: Punctuator(Lparen), char_start: 4833, char_end: 4834, byte_start: 4833, byte_end: 4834 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 4834, char_end: 4837, byte_start: 4834, byte_end: 4837 }: ' '
Token { kind: Punctuator(Comma), char_start: 4837, char_end: 4838, byte_start: 4837, byte_end: 4838 }: ,
Token { kind: Name(Identifier), char_start: 4839, char_end: 4843, byte_start: 4839, byte_end: 4843 }: diff
Token { kind: Punctuator(Rparen), char_start: 4843, char_end: 4844, byte_start: 4843, byte_end: 4844 }: )
Token { kind: Name(Keyword(End)), char_start: 4863, char_end: 4866, byte_start: 4863, byte_end: 4866 }: end
Token { kind: Name(Keyword(Return)), char_start: 4885, char_end: 4891, byte_start: 4885, byte_end: 4891 }: return
Token { kind: Name(Identifier), char_start: 4892, char_end: 4898, byte_start: 4892, byte_end: 4898 }: padded
Token { kind: Name(Keyword(End)), char_start: 4915, char_end: 4918, byte_start: 4915, byte_end: 4918 }: end
Token { kind: Name(Keyword(End)), char_start: 4933, char_end: 4936, byte_start: 4933, byte_end: 4936 }: end
Token { kind: Punctuator(Rparen), char_start: 4936, char_end: 4937, byte_start: 4936, byte_end: 4937 }: )
Token { kind: Name(Keyword(Else)), char_start: 4950, char_end: 4954, byte_start: 4950, byte_end: 4954 }: else
Token { kind: Name(Identifier), char_start: 4969, char_end: 4974, byte_start: 4969, byte_end: 4974 }: lines
Token { kind: Op(Assign), char_start: 4975, char_end: 4976, byte_start: 4975, byte_end: 4976 }: =
Token { kind: Punctuator(Lcurly), char_start: 4977, char_end: 4978, byte_start: 4977, byte_end: 4978 }: {
Token { kind: Punctuator(Rcurly), char_start: 4978, char_end: 4979, byte_start: 4978, byte_end: 4979 }: }
Token { kind: Name(Identifier), char_start: 4994, char_end: 5016, byte_start: 4994, byte_end: 5016 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 5017, char_end: 5018, byte_start: 5017, byte_end: 5018 }: =
Token { kind: Name(Keyword(Nil)), char_start: 5019, char_end: 5022, byte_start: 5019, byte_end: 5022 }: nil
Token { kind: Name(Keyword(End)), char_start: 5035, char_end: 5038, byte_start: 5035, byte_end: 5038 }: end
Token { kind: Name(Identifier), char_start: 5052, char_end: 5055, byte_start: 5052, byte_end: 5055 }: vim
Token { kind: Punctuator(Dot), char_start: 5055, char_end: 5056, byte_start: 5055, byte_end: 5056 }: .
Token { kind: Name(Identifier), char_start: 5056, char_end: 5059, byte_start: 5056, byte_end: 5059 }: api
Token { kind: Punctuator(Dot), char_start: 5059, char_end: 5060, byte_start: 5059, byte_end: 5060 }: .
Token { kind: Name(Identifier), char_start: 5060, char_end: 5078, byte_start: 5060, byte_end: 5078 }: nvim_buf_set_lines
Token { kind: Punctuator(Lparen), char_start: 5078, char_end: 5079, byte_start: 5078, byte_end: 5079 }: (
Token { kind: Name(Identifier), char_start: 5094, char_end: 5108, byte_start: 5094, byte_end: 5108 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 5108, char_end: 5109, byte_start: 5108, byte_end: 5109 }: ,
Token { kind: Literal(Number), char_start: 5124, char_end: 5125, byte_start: 5124, byte_end: 5125 }: 0
Token { kind: Punctuator(Comma), char_start: 5125, char_end: 5126, byte_start: 5125, byte_end: 5126 }: ,
Token { kind: Comment(LineComment), char_start: 5127, char_end: 5136, byte_start: 5127, byte_end: 5136 }: -- start

Token { kind: Op(Minus), char_start: 5150, char_end: 5151, byte_start: 5150, byte_end: 5151 }: -
Token { kind: Literal(Number), char_start: 5151, char_end: 5152, byte_start: 5151, byte_end: 5152 }: 1
Token { kind: Punctuator(Comma), char_start: 5152, char_end: 5153, byte_start: 5152, byte_end: 5153 }: ,
Token { kind: Comment(LineComment), char_start: 5154, char_end: 5161, byte_start: 5154, byte_end: 5161 }: -- end

Token { kind: Name(Keyword(False)), char_start: 5175, char_end: 5180, byte_start: 5175, byte_end: 5180 }: false
Token { kind: Punctuator(Comma), char_start: 5180, char_end: 5181, byte_start: 5180, byte_end: 5181 }: ,
Token { kind: Comment(LineComment), char_start: 5182, char_end: 5202, byte_start: 5182, byte_end: 5202 }: -- strict indexing?

Token { kind: Name(Identifier), char_start: 5216, char_end: 5221, byte_start: 5216, byte_end: 5221 }: lines
Token { kind: Punctuator(Rparen), char_start: 5234, char_end: 5235, byte_start: 5234, byte_end: 5235 }: )
Token { kind: Comment(LineComment), char_start: 5249, char_end: 5303, byte_start: 5249, byte_end: 5303 }: -- Reserve two lines for statusline and command line.

Token { kind: Name(Identifier), char_start: 5315, char_end: 5318, byte_start: 5315, byte_end: 5318 }: vim
Token { kind: Punctuator(Dot), char_start: 5318, char_end: 5319, byte_start: 5318, byte_end: 5319 }: .
Token { kind: Name(Identifier), char_start: 5319, char_end: 5322, byte_start: 5319, byte_end: 5322 }: api
Token { kind: Punctuator(Dot), char_start: 5322, char_end: 5323, byte_start: 5322, byte_end: 5323 }: .
Token { kind: Name(Identifier), char_start: 5323, char_end: 5342, byte_start: 5323, byte_end: 5342 }: nvim_win_set_height
Token { kind: Punctuator(Lparen), char_start: 5342, char_end: 5343, byte_start: 5342, byte_end: 5343 }: (
Token { kind: Name(Identifier), char_start: 5358, char_end: 5372, byte_start: 5358, byte_end: 5372 }: chooser_window
Token { kind: Punctuator(Comma), char_start: 5372, char_end: 5373, byte_start: 5372, byte_end: 5373 }: ,
Token { kind: Name(Identifier), char_start: 5388, char_end: 5391, byte_start: 5388, byte_end: 5391 }: vim
Token { kind: Punctuator(Dot), char_start: 5391, char_end: 5392, byte_start: 5391, byte_end: 5392 }: .
Token { kind: Name(Identifier), char_start: 5392, char_end: 5393, byte_start: 5392, byte_end: 5393 }: o
Token { kind: Punctuator(Dot), char_start: 5393, char_end: 5394, byte_start: 5393, byte_end: 5394 }: .
Token { kind: Name(Identifier), char_start: 5394, char_end: 5399, byte_start: 5394, byte_end: 5399 }: lines
Token { kind: Op(Minus), char_start: 5400, char_end: 5401, byte_start: 5400, byte_end: 5401 }: -
Token { kind: Literal(Number), char_start: 5402, char_end: 5403, byte_start: 5402, byte_end: 5403 }: 2
Token { kind: Punctuator(Rparen), char_start: 5416, char_end: 5417, byte_start: 5416, byte_end: 5417 }: )
Token { kind: Comment(LineComment), char_start: 5431, char_end: 5501, byte_start: 5431, byte_end: 5501 }: -- TODO: only do this if lines actually changed, or selection changed

Token { kind: Name(Identifier), char_start: 5513, char_end: 5519, byte_start: 5513, byte_end: 5519 }: corpus
Token { kind: Punctuator(Dot), char_start: 5519, char_end: 5520, byte_start: 5519, byte_end: 5520 }: .
Token { kind: Name(Identifier), char_start: 5520, char_end: 5539, byte_start: 5520, byte_end: 5539 }: highlight_selection
Token { kind: Punctuator(Lparen), char_start: 5539, char_end: 5540, byte_start: 5539, byte_end: 5540 }: (
Token { kind: Punctuator(Rparen), char_start: 5540, char_end: 5541, byte_start: 5540, byte_end: 5541 }: )
Token { kind: Name(Keyword(End)), char_start: 5552, char_end: 5555, byte_start: 5552, byte_end: 5555 }: end
Token { kind: Name(Keyword(If)), char_start: 5567, char_end: 5569, byte_start: 5567, byte_end: 5569 }: if
Token { kind: Name(Identifier), char_start: 5570, char_end: 5574, byte_start: 5570, byte_end: 5574 }: term
Token { kind: Punctuator(Colon), char_start: 5574, char_end: 5575, byte_start: 5574, byte_end: 5575 }: :
Token { kind: Name(Identifier), char_start: 5575, char_end: 5578, byte_start: 5575, byte_end: 5578 }: len
Token { kind: Punctuator(Lparen), char_start: 5578, char_end: 5579, byte_start: 5578, byte_end: 5579 }: (
Token { kind: Punctuator(Rparen), char_start: 5579, char_end: 5580, byte_start: 5579, byte_end: 5580 }: )
Token { kind: Op(Gt), char_start: 5581, char_end: 5582, byte_start: 5581, byte_end: 5582 }: >
Token { kind: Literal(Number), char_start: 5583, char_end: 5584, byte_start: 5583, byte_end: 5584 }: 0
Token { kind: Name(Keyword(Then)), char_start: 5585, char_end: 5589, byte_start: 5585, byte_end: 5589 }: then
Token { kind: Name(Identifier), char_start: 5602, char_end: 5608, byte_start: 5602, byte_end: 5608 }: corpus
Token { kind: Punctuator(Dot), char_start: 5608, char_end: 5609, byte_start: 5608, byte_end: 5609 }: .
Token { kind: Name(Identifier), char_start: 5609, char_end: 5615, byte_start: 5609, byte_end: 5615 }: search
Token { kind: Punctuator(Lparen), char_start: 5615, char_end: 5616, byte_start: 5615, byte_end: 5616 }: (
Token { kind: Name(Identifier), char_start: 5616, char_end: 5620, byte_start: 5616, byte_end: 5620 }: term
Token { kind: Punctuator(Comma), char_start: 5620, char_end: 5621, byte_start: 5620, byte_end: 5621 }: ,
Token { kind: Name(Identifier), char_start: 5622, char_end: 5628, byte_start: 5622, byte_end: 5628 }: update
Token { kind: Punctuator(Rparen), char_start: 5628, char_end: 5629, byte_start: 5628, byte_end: 5629 }: )
Token { kind: Name(Keyword(Else)), char_start: 5640, char_end: 5644, byte_start: 5640, byte_end: 5644 }: else
Token { kind: Name(Identifier), char_start: 5657, char_end: 5663, byte_start: 5657, byte_end: 5663 }: corpus
Token { kind: Punctuator(Dot), char_start: 5663, char_end: 5664, byte_start: 5663, byte_end: 5664 }: .
Token { kind: Name(Identifier), char_start: 5664, char_end: 5668, byte_start: 5664, byte_end: 5668 }: list
Token { kind: Punctuator(Lparen), char_start: 5668, char_end: 5669, byte_start: 5668, byte_end: 5669 }: (
Token { kind: Name(Identifier), char_start: 5669, char_end: 5675, byte_start: 5669, byte_end: 5675 }: update
Token { kind: Punctuator(Rparen), char_start: 5675, char_end: 5676, byte_start: 5675, byte_end: 5676 }: )
Token { kind: Name(Keyword(End)), char_start: 5687, char_end: 5690, byte_start: 5687, byte_end: 5690 }: end
Token { kind: Name(Keyword(Return)), char_start: 5702, char_end: 5708, byte_start: 5702, byte_end: 5708 }: return
Token { kind: Name(Keyword(End)), char_start: 5717, char_end: 5720, byte_start: 5717, byte_end: 5720 }: end
Token { kind: Name(Keyword(End)), char_start: 5727, char_end: 5730, byte_start: 5727, byte_end: 5730 }: end
Token { kind: Name(Keyword(End)), char_start: 5735, char_end: 5738, byte_start: 5735, byte_end: 5738 }: end
Token { kind: Name(Identifier), char_start: 5743, char_end: 5761, byte_start: 5743, byte_end: 5761 }: tear_down_mappings
Token { kind: Punctuator(Lparen), char_start: 5761, char_end: 5762, byte_start: 5761, byte_end: 5762 }: (
Token { kind: Punctuator(Rparen), char_start: 5762, char_end: 5763, byte_start: 5762, byte_end: 5763 }: )
Token { kind: Name(Keyword(End)), char_start: 5766, char_end: 5769, byte_start: 5766, byte_end: 5769 }: end
Token { kind: Punctuator(Comma), char_start: 5769, char_end: 5770, byte_start: 5769, byte_end: 5770 }: ,
Token { kind: Name(Identifier), char_start: 5774, char_end: 5787, byte_start: 5774, byte_end: 5787 }: cmdline_enter
Token { kind: Op(Assign), char_start: 5788, char_end: 5789, byte_start: 5788, byte_end: 5789 }: =
Token { kind: Name(Keyword(Function)), char_start: 5790, char_end: 5798, byte_start: 5790, byte_end: 5798 }: function
Token { kind: Punctuator(Lparen), char_start: 5798, char_end: 5799, byte_start: 5798, byte_end: 5799 }: (
Token { kind: Punctuator(Rparen), char_start: 5799, char_end: 5800, byte_start: 5799, byte_end: 5800 }: )
Token { kind: Name(Identifier), char_start: 5805, char_end: 5827, byte_start: 5805, byte_end: 5827 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 5828, char_end: 5829, byte_start: 5828, byte_end: 5829 }: =
Token { kind: Name(Keyword(Nil)), char_start: 5830, char_end: 5833, byte_start: 5830, byte_end: 5833 }: nil
Token { kind: Name(Keyword(End)), char_start: 5836, char_end: 5839, byte_start: 5836, byte_end: 5839 }: end
Token { kind: Punctuator(Comma), char_start: 5839, char_end: 5840, byte_start: 5839, byte_end: 5840 }: ,
Token { kind: Name(Identifier), char_start: 5844, char_end: 5857, byte_start: 5844, byte_end: 5857 }: cmdline_leave
Token { kind: Op(Assign), char_start: 5858, char_end: 5859, byte_start: 5858, byte_end: 5859 }: =
Token { kind: Name(Keyword(Function)), char_start: 5860, char_end: 5868, byte_start: 5860, byte_end: 5868 }: function
Token { kind: Punctuator(Lparen), char_start: 5868, char_end: 5869, byte_start: 5868, byte_end: 5869 }: (
Token { kind: Punctuator(Rparen), char_start: 5869, char_end: 5870, byte_start: 5869, byte_end: 5870 }: )
Token { kind: Name(Keyword(If)), char_start: 5875, char_end: 5877, byte_start: 5875, byte_end: 5877 }: if
Token { kind: Name(Identifier), char_start: 5878, char_end: 5892, byte_start: 5878, byte_end: 5892 }: chooser_window
Token { kind: Op(Ne), char_start: 5893, char_end: 5895, byte_start: 5893, byte_end: 5895 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 5896, char_end: 5899, byte_start: 5896, byte_end: 5899 }: nil
Token { kind: Name(Keyword(Then)), char_start: 5900, char_end: 5904, byte_start: 5900, byte_end: 5904 }: then
Token { kind: Name(Identifier), char_start: 5911, char_end: 5914, byte_start: 5911, byte_end: 5914 }: vim
Token { kind: Punctuator(Dot), char_start: 5914, char_end: 5915, byte_start: 5914, byte_end: 5915 }: .
Token { kind: Name(Identifier), char_start: 5915, char_end: 5918, byte_start: 5915, byte_end: 5918 }: api
Token { kind: Punctuator(Dot), char_start: 5918, char_end: 5919, byte_start: 5918, byte_end: 5919 }: .
Token { kind: Name(Identifier), char_start: 5919, char_end: 5933, byte_start: 5919, byte_end: 5933 }: nvim_win_close
Token { kind: Punctuator(Lparen), char_start: 5933, char_end: 5934, byte_start: 5933, byte_end: 5934 }: (
Token { kind: Name(Identifier), char_start: 5934, char_end: 5948, byte_start: 5934, byte_end: 5948 }: chooser_window
Token { kind: Punctuator(Comma), char_start: 5948, char_end: 5949, byte_start: 5948, byte_end: 5949 }: ,
Token { kind: Name(Keyword(True)), char_start: 5950, char_end: 5954, byte_start: 5950, byte_end: 5954 }: true
Token { kind: Comment(BlockComment), char_start: 5955, char_end: 5971, byte_start: 5955, byte_end: 5971 }: --[[ force? --]]
Token { kind: Punctuator(Rparen), char_start: 5971, char_end: 5972, byte_start: 5971, byte_end: 5972 }: )
Token { kind: Name(Identifier), char_start: 5979, char_end: 5993, byte_start: 5979, byte_end: 5993 }: chooser_window
Token { kind: Op(Assign), char_start: 5994, char_end: 5995, byte_start: 5994, byte_end: 5995 }: =
Token { kind: Name(Keyword(Nil)), char_start: 5996, char_end: 5999, byte_start: 5996, byte_end: 5999 }: nil
Token { kind: Name(Keyword(End)), char_start: 6004, char_end: 6007, byte_start: 6004, byte_end: 6007 }: end
Token { kind: Name(Keyword(If)), char_start: 6012, char_end: 6014, byte_start: 6012, byte_end: 6014 }: if
Token { kind: Name(Identifier), char_start: 6015, char_end: 6029, byte_start: 6015, byte_end: 6029 }: preview_window
Token { kind: Op(Ne), char_start: 6030, char_end: 6032, byte_start: 6030, byte_end: 6032 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 6033, char_end: 6036, byte_start: 6033, byte_end: 6036 }: nil
Token { kind: Name(Keyword(Then)), char_start: 6037, char_end: 6041, byte_start: 6037, byte_end: 6041 }: then
Token { kind: Name(Identifier), char_start: 6048, char_end: 6051, byte_start: 6048, byte_end: 6051 }: vim
Token { kind: Punctuator(Dot), char_start: 6051, char_end: 6052, byte_start: 6051, byte_end: 6052 }: .
Token { kind: Name(Identifier), char_start: 6052, char_end: 6055, byte_start: 6052, byte_end: 6055 }: api
Token { kind: Punctuator(Dot), char_start: 6055, char_end: 6056, byte_start: 6055, byte_end: 6056 }: .
Token { kind: Name(Identifier), char_start: 6056, char_end: 6070, byte_start: 6056, byte_end: 6070 }: nvim_win_close
Token { kind: Punctuator(Lparen), char_start: 6070, char_end: 6071, byte_start: 6070, byte_end: 6071 }: (
Token { kind: Name(Identifier), char_start: 6071, char_end: 6085, byte_start: 6071, byte_end: 6085 }: preview_window
Token { kind: Punctuator(Comma), char_start: 6085, char_end: 6086, byte_start: 6085, byte_end: 6086 }: ,
Token { kind: Name(Keyword(True)), char_start: 6087, char_end: 6091, byte_start: 6087, byte_end: 6091 }: true
Token { kind: Comment(BlockComment), char_start: 6092, char_end: 6108, byte_start: 6092, byte_end: 6108 }: --[[ force? --]]
Token { kind: Punctuator(Rparen), char_start: 6108, char_end: 6109, byte_start: 6108, byte_end: 6109 }: )
Token { kind: Name(Identifier), char_start: 6116, char_end: 6130, byte_start: 6116, byte_end: 6130 }: preview_window
Token { kind: Op(Assign), char_start: 6131, char_end: 6132, byte_start: 6131, byte_end: 6132 }: =
Token { kind: Name(Keyword(Nil)), char_start: 6133, char_end: 6136, byte_start: 6133, byte_end: 6136 }: nil
Token { kind: Name(Keyword(End)), char_start: 6141, char_end: 6144, byte_start: 6141, byte_end: 6144 }: end
Token { kind: Name(Identifier), char_start: 6149, char_end: 6167, byte_start: 6149, byte_end: 6167 }: tear_down_mappings
Token { kind: Punctuator(Lparen), char_start: 6167, char_end: 6168, byte_start: 6167, byte_end: 6168 }: (
Token { kind: Punctuator(Rparen), char_start: 6168, char_end: 6169, byte_start: 6168, byte_end: 6169 }: )
Token { kind: Name(Keyword(End)), char_start: 6172, char_end: 6175, byte_start: 6172, byte_end: 6175 }: end
Token { kind: Punctuator(Comma), char_start: 6175, char_end: 6176, byte_start: 6175, byte_end: 6176 }: ,
Token { kind: Name(Identifier), char_start: 6180, char_end: 6186, byte_start: 6180, byte_end: 6186 }: commit
Token { kind: Op(Assign), char_start: 6187, char_end: 6188, byte_start: 6187, byte_end: 6188 }: =
Token { kind: Name(Keyword(Function)), char_start: 6189, char_end: 6197, byte_start: 6189, byte_end: 6197 }: function
Token { kind: Punctuator(Lparen), char_start: 6197, char_end: 6198, byte_start: 6197, byte_end: 6198 }: (
Token { kind: Name(Identifier), char_start: 6198, char_end: 6202, byte_start: 6198, byte_end: 6202 }: file
Token { kind: Punctuator(Comma), char_start: 6202, char_end: 6203, byte_start: 6202, byte_end: 6203 }: ,
Token { kind: Name(Identifier), char_start: 6204, char_end: 6213, byte_start: 6204, byte_end: 6213 }: operation
Token { kind: Punctuator(Rparen), char_start: 6213, char_end: 6214, byte_start: 6213, byte_end: 6214 }: )
Token { kind: Name(Keyword(Local)), char_start: 6219, char_end: 6224, byte_start: 6219, byte_end: 6224 }: local
Token { kind: Name(Identifier), char_start: 6225, char_end: 6231, byte_start: 6225, byte_end: 6231 }: config
Token { kind: Op(Assign), char_start: 6232, char_end: 6233, byte_start: 6232, byte_end: 6233 }: =
Token { kind: Name(Identifier), char_start: 6234, char_end: 6240, byte_start: 6234, byte_end: 6240 }: corpus
Token { kind: Punctuator(Dot), char_start: 6240, char_end: 6241, byte_start: 6240, byte_end: 6241 }: .
Token { kind: Name(Identifier), char_start: 6241, char_end: 6256, byte_start: 6241, byte_end: 6256 }: config_for_file
Token { kind: Punctuator(Lparen), char_start: 6256, char_end: 6257, byte_start: 6256, byte_end: 6257 }: (
Token { kind: Name(Identifier), char_start: 6257, char_end: 6261, byte_start: 6257, byte_end: 6261 }: file
Token { kind: Punctuator(Rparen), char_start: 6261, char_end: 6262, byte_start: 6261, byte_end: 6262 }: )
Token { kind: Name(Keyword(If)), char_start: 6267, char_end: 6269, byte_start: 6267, byte_end: 6269 }: if
Token { kind: Name(Identifier), char_start: 6270, char_end: 6276, byte_start: 6270, byte_end: 6276 }: config
Token { kind: Punctuator(Dot), char_start: 6276, char_end: 6277, byte_start: 6276, byte_end: 6277 }: .
Token { kind: Name(Identifier), char_start: 6277, char_end: 6287, byte_start: 6277, byte_end: 6287 }: autocommit
Token { kind: Name(Keyword(Then)), char_start: 6288, char_end: 6292, byte_start: 6288, byte_end: 6292 }: then
Token { kind: Name(Identifier), char_start: 6299, char_end: 6303, byte_start: 6299, byte_end: 6303 }: file
Token { kind: Op(Assign), char_start: 6304, char_end: 6305, byte_start: 6304, byte_end: 6305 }: =
Token { kind: Name(Identifier), char_start: 6306, char_end: 6309, byte_start: 6306, byte_end: 6309 }: vim
Token { kind: Punctuator(Dot), char_start: 6309, char_end: 6310, byte_start: 6309, byte_end: 6310 }: .
Token { kind: Name(Identifier), char_start: 6310, char_end: 6312, byte_start: 6310, byte_end: 6312 }: fn
Token { kind: Punctuator(Dot), char_start: 6312, char_end: 6313, byte_start: 6312, byte_end: 6313 }: .
Token { kind: Name(Identifier), char_start: 6313, char_end: 6324, byte_start: 6313, byte_end: 6324 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 6324, char_end: 6325, byte_start: 6324, byte_end: 6325 }: (
Token { kind: Name(Identifier), char_start: 6325, char_end: 6329, byte_start: 6325, byte_end: 6329 }: file
Token { kind: Punctuator(Comma), char_start: 6329, char_end: 6330, byte_start: 6329, byte_end: 6330 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6331, char_end: 6335, byte_start: 6331, byte_end: 6335 }: ':t'
Token { kind: Punctuator(Rparen), char_start: 6335, char_end: 6336, byte_start: 6335, byte_end: 6336 }: )
Token { kind: Name(Keyword(Local)), char_start: 6343, char_end: 6348, byte_start: 6343, byte_end: 6348 }: local
Token { kind: Name(Identifier), char_start: 6349, char_end: 6357, byte_start: 6349, byte_end: 6357 }: location
Token { kind: Op(Assign), char_start: 6358, char_end: 6359, byte_start: 6358, byte_end: 6359 }: =
Token { kind: Name(Identifier), char_start: 6360, char_end: 6363, byte_start: 6360, byte_end: 6363 }: vim
Token { kind: Punctuator(Dot), char_start: 6363, char_end: 6364, byte_start: 6363, byte_end: 6364 }: .
Token { kind: Name(Identifier), char_start: 6364, char_end: 6366, byte_start: 6364, byte_end: 6366 }: fn
Token { kind: Punctuator(Dot), char_start: 6366, char_end: 6367, byte_start: 6366, byte_end: 6367 }: .
Token { kind: Name(Identifier), char_start: 6367, char_end: 6373, byte_start: 6367, byte_end: 6373 }: expand
Token { kind: Punctuator(Lparen), char_start: 6373, char_end: 6374, byte_start: 6373, byte_end: 6374 }: (
Token { kind: Name(Identifier), char_start: 6374, char_end: 6380, byte_start: 6374, byte_end: 6380 }: config
Token { kind: Punctuator(Dot), char_start: 6380, char_end: 6381, byte_start: 6380, byte_end: 6381 }: .
Token { kind: Name(Identifier), char_start: 6381, char_end: 6389, byte_start: 6381, byte_end: 6389 }: location
Token { kind: Punctuator(Rparen), char_start: 6389, char_end: 6390, byte_start: 6389, byte_end: 6390 }: )
Token { kind: Name(Keyword(Local)), char_start: 6397, char_end: 6402, byte_start: 6397, byte_end: 6402 }: local
Token { kind: Name(Identifier), char_start: 6403, char_end: 6410, byte_start: 6403, byte_end: 6410 }: subject
Token { kind: Op(Assign), char_start: 6411, char_end: 6412, byte_start: 6411, byte_end: 6412 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 6413, char_end: 6421, byte_start: 6413, byte_end: 6421 }: 'docs: '
Token { kind: Op(Concat), char_start: 6422, char_end: 6424, byte_start: 6422, byte_end: 6424 }: ..
Token { kind: Name(Identifier), char_start: 6425, char_end: 6434, byte_start: 6425, byte_end: 6434 }: operation
Token { kind: Op(Concat), char_start: 6435, char_end: 6437, byte_start: 6435, byte_end: 6437 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 6438, char_end: 6441, byte_start: 6438, byte_end: 6441 }: ' '
Token { kind: Op(Concat), char_start: 6442, char_end: 6444, byte_start: 6442, byte_end: 6444 }: ..
Token { kind: Name(Identifier), char_start: 6445, char_end: 6448, byte_start: 6445, byte_end: 6448 }: vim
Token { kind: Punctuator(Dot), char_start: 6448, char_end: 6449, byte_start: 6448, byte_end: 6449 }: .
Token { kind: Name(Identifier), char_start: 6449, char_end: 6451, byte_start: 6449, byte_end: 6451 }: fn
Token { kind: Punctuator(Dot), char_start: 6451, char_end: 6452, byte_start: 6451, byte_end: 6452 }: .
Token { kind: Name(Identifier), char_start: 6452, char_end: 6463, byte_start: 6452, byte_end: 6463 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 6463, char_end: 6464, byte_start: 6463, byte_end: 6464 }: (
Token { kind: Name(Identifier), char_start: 6464, char_end: 6468, byte_start: 6464, byte_end: 6468 }: file
Token { kind: Punctuator(Comma), char_start: 6468, char_end: 6469, byte_start: 6468, byte_end: 6469 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6470, char_end: 6474, byte_start: 6470, byte_end: 6474 }: ':r'
Token { kind: Punctuator(Rparen), char_start: 6474, char_end: 6475, byte_start: 6474, byte_end: 6475 }: )
Token { kind: Op(Concat), char_start: 6476, char_end: 6478, byte_start: 6476, byte_end: 6478 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 6479, char_end: 6501, byte_start: 6479, byte_end: 6501 }: ' (Corpus autocommit)'
Token { kind: Comment(LineComment), char_start: 6509, char_end: 6580, byte_start: 6509, byte_end: 6580 }: -- Just in case this is a new file (otherwise `git commit` will fail).

Token { kind: Name(Identifier), char_start: 6586, char_end: 6592, byte_start: 6586, byte_end: 6592 }: corpus
Token { kind: Punctuator(Dot), char_start: 6592, char_end: 6593, byte_start: 6592, byte_end: 6593 }: .
Token { kind: Name(Identifier), char_start: 6593, char_end: 6596, byte_start: 6593, byte_end: 6596 }: git
Token { kind: Punctuator(Lparen), char_start: 6596, char_end: 6597, byte_start: 6596, byte_end: 6597 }: (
Token { kind: Name(Identifier), char_start: 6597, char_end: 6605, byte_start: 6597, byte_end: 6605 }: location
Token { kind: Punctuator(Comma), char_start: 6605, char_end: 6606, byte_start: 6605, byte_end: 6606 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6607, char_end: 6612, byte_start: 6607, byte_end: 6612 }: 'add'
Token { kind: Punctuator(Comma), char_start: 6612, char_end: 6613, byte_start: 6612, byte_end: 6613 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6614, char_end: 6618, byte_start: 6614, byte_end: 6618 }: '--'
Token { kind: Punctuator(Comma), char_start: 6618, char_end: 6619, byte_start: 6618, byte_end: 6619 }: ,
Token { kind: Name(Identifier), char_start: 6620, char_end: 6624, byte_start: 6620, byte_end: 6624 }: file
Token { kind: Punctuator(Rparen), char_start: 6624, char_end: 6625, byte_start: 6624, byte_end: 6625 }: )
Token { kind: Comment(LineComment), char_start: 6632, char_end: 6678, byte_start: 6632, byte_end: 6678 }: -- TODO: check v:shell_error for this one ^^^

Token { kind: Comment(LineComment), char_start: 6684, char_end: 6724, byte_start: 6684, byte_end: 6724 }: -- vim.api.nvim_get_vvar('shell_error')

Token { kind: Comment(LineComment), char_start: 6731, char_end: 6799, byte_start: 6731, byte_end: 6799 }: -- Note that this will fail silently if there are no changes to the

Token { kind: Comment(LineComment), char_start: 6805, char_end: 6872, byte_start: 6805, byte_end: 6872 }: -- file (because we aren't passing `--allow-empty`) and that's ok.

Token { kind: Name(Identifier), char_start: 6878, char_end: 6884, byte_start: 6878, byte_end: 6884 }: corpus
Token { kind: Punctuator(Dot), char_start: 6884, char_end: 6885, byte_start: 6884, byte_end: 6885 }: .
Token { kind: Name(Identifier), char_start: 6885, char_end: 6888, byte_start: 6885, byte_end: 6888 }: git
Token { kind: Punctuator(Lparen), char_start: 6888, char_end: 6889, byte_start: 6888, byte_end: 6889 }: (
Token { kind: Name(Identifier), char_start: 6889, char_end: 6897, byte_start: 6889, byte_end: 6897 }: location
Token { kind: Punctuator(Comma), char_start: 6897, char_end: 6898, byte_start: 6897, byte_end: 6898 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6899, char_end: 6907, byte_start: 6899, byte_end: 6907 }: 'commit'
Token { kind: Punctuator(Comma), char_start: 6907, char_end: 6908, byte_start: 6907, byte_end: 6908 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6909, char_end: 6913, byte_start: 6909, byte_end: 6913 }: '-m'
Token { kind: Punctuator(Comma), char_start: 6913, char_end: 6914, byte_start: 6913, byte_end: 6914 }: ,
Token { kind: Name(Identifier), char_start: 6915, char_end: 6922, byte_start: 6915, byte_end: 6922 }: subject
Token { kind: Punctuator(Comma), char_start: 6922, char_end: 6923, byte_start: 6922, byte_end: 6923 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 6924, char_end: 6928, byte_start: 6924, byte_end: 6928 }: '--'
Token { kind: Punctuator(Comma), char_start: 6928, char_end: 6929, byte_start: 6928, byte_end: 6929 }: ,
Token { kind: Name(Identifier), char_start: 6930, char_end: 6934, byte_start: 6930, byte_end: 6934 }: file
Token { kind: Punctuator(Rparen), char_start: 6934, char_end: 6935, byte_start: 6934, byte_end: 6935 }: )
Token { kind: Name(Keyword(End)), char_start: 6940, char_end: 6943, byte_start: 6940, byte_end: 6943 }: end
Token { kind: Name(Keyword(End)), char_start: 6946, char_end: 6949, byte_start: 6946, byte_end: 6949 }: end
Token { kind: Punctuator(Comma), char_start: 6949, char_end: 6950, byte_start: 6949, byte_end: 6950 }: ,
Token { kind: Name(Identifier), char_start: 6954, char_end: 6962, byte_start: 6954, byte_end: 6962 }: complete
Token { kind: Op(Assign), char_start: 6963, char_end: 6964, byte_start: 6963, byte_end: 6964 }: =
Token { kind: Name(Keyword(Function)), char_start: 6965, char_end: 6973, byte_start: 6965, byte_end: 6973 }: function
Token { kind: Punctuator(Lparen), char_start: 6973, char_end: 6974, byte_start: 6973, byte_end: 6974 }: (
Token { kind: Name(Identifier), char_start: 6974, char_end: 6981, byte_start: 6974, byte_end: 6981 }: arglead
Token { kind: Punctuator(Comma), char_start: 6981, char_end: 6982, byte_start: 6981, byte_end: 6982 }: ,
Token { kind: Name(Identifier), char_start: 6983, char_end: 6990, byte_start: 6983, byte_end: 6990 }: cmdline
Token { kind: Punctuator(Comma), char_start: 6990, char_end: 6991, byte_start: 6990, byte_end: 6991 }: ,
Token { kind: Name(Identifier), char_start: 6992, char_end: 7002, byte_start: 6992, byte_end: 7002 }: cursor_pos
Token { kind: Punctuator(Rparen), char_start: 7002, char_end: 7003, byte_start: 7002, byte_end: 7003 }: )
Token { kind: Name(Keyword(If)), char_start: 7008, char_end: 7010, byte_start: 7008, byte_end: 7010 }: if
Token { kind: Name(Identifier), char_start: 7011, char_end: 7017, byte_start: 7011, byte_end: 7017 }: corpus
Token { kind: Punctuator(Dot), char_start: 7017, char_end: 7018, byte_start: 7017, byte_end: 7018 }: .
Token { kind: Name(Identifier), char_start: 7018, char_end: 7030, byte_start: 7018, byte_end: 7030 }: in_directory
Token { kind: Punctuator(Lparen), char_start: 7030, char_end: 7031, byte_start: 7030, byte_end: 7031 }: (
Token { kind: Punctuator(Rparen), char_start: 7031, char_end: 7032, byte_start: 7031, byte_end: 7032 }: )
Token { kind: Name(Keyword(Then)), char_start: 7033, char_end: 7037, byte_start: 7033, byte_end: 7037 }: then
Token { kind: Name(Keyword(Local)), char_start: 7044, char_end: 7049, byte_start: 7044, byte_end: 7049 }: local
Token { kind: Name(Identifier), char_start: 7050, char_end: 7054, byte_start: 7050, byte_end: 7054 }: file
Token { kind: Op(Assign), char_start: 7055, char_end: 7056, byte_start: 7055, byte_end: 7056 }: =
Token { kind: Name(Identifier), char_start: 7057, char_end: 7063, byte_start: 7057, byte_end: 7063 }: corpus
Token { kind: Punctuator(Dot), char_start: 7063, char_end: 7064, byte_start: 7063, byte_end: 7064 }: .
Token { kind: Name(Identifier), char_start: 7064, char_end: 7081, byte_start: 7064, byte_end: 7081 }: get_selected_file
Token { kind: Punctuator(Lparen), char_start: 7081, char_end: 7082, byte_start: 7081, byte_end: 7082 }: (
Token { kind: Punctuator(Rparen), char_start: 7082, char_end: 7083, byte_start: 7082, byte_end: 7083 }: )
Token { kind: Name(Keyword(If)), char_start: 7090, char_end: 7092, byte_start: 7090, byte_end: 7092 }: if
Token { kind: Name(Identifier), char_start: 7093, char_end: 7097, byte_start: 7093, byte_end: 7097 }: file
Token { kind: Op(Ne), char_start: 7098, char_end: 7100, byte_start: 7098, byte_end: 7100 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 7101, char_end: 7104, byte_start: 7101, byte_end: 7104 }: nil
Token { kind: Name(Keyword(Then)), char_start: 7105, char_end: 7109, byte_start: 7105, byte_end: 7109 }: then
Token { kind: Name(Keyword(Local)), char_start: 7118, char_end: 7123, byte_start: 7118, byte_end: 7123 }: local
Token { kind: Name(Identifier), char_start: 7124, char_end: 7129, byte_start: 7124, byte_end: 7129 }: title
Token { kind: Op(Assign), char_start: 7130, char_end: 7131, byte_start: 7130, byte_end: 7131 }: =
Token { kind: Name(Identifier), char_start: 7132, char_end: 7138, byte_start: 7132, byte_end: 7138 }: corpus
Token { kind: Punctuator(Dot), char_start: 7138, char_end: 7139, byte_start: 7138, byte_end: 7139 }: .
Token { kind: Name(Identifier), char_start: 7139, char_end: 7156, byte_start: 7139, byte_end: 7156 }: get_selected_file
Token { kind: Punctuator(Lparen), char_start: 7156, char_end: 7157, byte_start: 7156, byte_end: 7157 }: (
Token { kind: Punctuator(Rparen), char_start: 7157, char_end: 7158, byte_start: 7157, byte_end: 7158 }: )
Token { kind: Punctuator(Colon), char_start: 7158, char_end: 7159, byte_start: 7158, byte_end: 7159 }: :
Token { kind: Name(Identifier), char_start: 7159, char_end: 7162, byte_start: 7159, byte_end: 7162 }: sub
Token { kind: Punctuator(Lparen), char_start: 7162, char_end: 7163, byte_start: 7162, byte_end: 7163 }: (
Token { kind: Literal(Number), char_start: 7163, char_end: 7164, byte_start: 7163, byte_end: 7164 }: 1
Token { kind: Punctuator(Comma), char_start: 7164, char_end: 7165, byte_start: 7164, byte_end: 7165 }: ,
Token { kind: Op(Minus), char_start: 7166, char_end: 7167, byte_start: 7166, byte_end: 7167 }: -
Token { kind: Literal(Number), char_start: 7167, char_end: 7168, byte_start: 7167, byte_end: 7168 }: 4
Token { kind: Punctuator(Rparen), char_start: 7168, char_end: 7169, byte_start: 7168, byte_end: 7169 }: )
Token { kind: Comment(LineComment), char_start: 7170, char_end: 7185, byte_start: 7170, byte_end: 7185 }: -- strip ".md"

Token { kind: Name(Keyword(Local)), char_start: 7193, char_end: 7198, byte_start: 7193, byte_end: 7198 }: local
Token { kind: Name(Identifier), char_start: 7199, char_end: 7205, byte_start: 7199, byte_end: 7205 }: prefix
Token { kind: Punctuator(Comma), char_start: 7205, char_end: 7206, byte_start: 7205, byte_end: 7206 }: ,
Token { kind: Name(Identifier), char_start: 7207, char_end: 7208, byte_start: 7207, byte_end: 7208 }: _
Token { kind: Op(Assign), char_start: 7209, char_end: 7210, byte_start: 7209, byte_end: 7210 }: =
Token { kind: Name(Identifier), char_start: 7211, char_end: 7218, byte_start: 7211, byte_end: 7218 }: cmdline
Token { kind: Punctuator(Colon), char_start: 7218, char_end: 7219, byte_start: 7218, byte_end: 7219 }: :
Token { kind: Name(Identifier), char_start: 7219, char_end: 7223, byte_start: 7219, byte_end: 7223 }: gsub
Token { kind: Punctuator(Lparen), char_start: 7223, char_end: 7224, byte_start: 7223, byte_end: 7224 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 7224, char_end: 7241, byte_start: 7224, byte_end: 7241 }: '^%s*Corpus!?%s+'
Token { kind: Punctuator(Comma), char_start: 7241, char_end: 7242, byte_start: 7241, byte_end: 7242 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 7243, char_end: 7245, byte_start: 7243, byte_end: 7245 }: ''
Token { kind: Punctuator(Rparen), char_start: 7245, char_end: 7246, byte_start: 7245, byte_end: 7246 }: )
Token { kind: Comment(LineComment), char_start: 7247, char_end: 7266, byte_start: 7247, byte_end: 7266 }: -- strip "Corpus "

Token { kind: Name(Keyword(If)), char_start: 7274, char_end: 7276, byte_start: 7274, byte_end: 7276 }: if
Token { kind: Name(Identifier), char_start: 7277, char_end: 7280, byte_start: 7277, byte_end: 7280 }: vim
Token { kind: Punctuator(Dot), char_start: 7280, char_end: 7281, byte_start: 7280, byte_end: 7281 }: .
Token { kind: Name(Identifier), char_start: 7281, char_end: 7291, byte_start: 7281, byte_end: 7291 }: startswith
Token { kind: Punctuator(Lparen), char_start: 7291, char_end: 7292, byte_start: 7291, byte_end: 7292 }: (
Token { kind: Name(Identifier), char_start: 7292, char_end: 7297, byte_start: 7292, byte_end: 7297 }: title
Token { kind: Punctuator(Comma), char_start: 7297, char_end: 7298, byte_start: 7297, byte_end: 7298 }: ,
Token { kind: Name(Identifier), char_start: 7299, char_end: 7305, byte_start: 7299, byte_end: 7305 }: prefix
Token { kind: Punctuator(Rparen), char_start: 7305, char_end: 7306, byte_start: 7305, byte_end: 7306 }: )
Token { kind: Name(Keyword(Then)), char_start: 7307, char_end: 7311, byte_start: 7307, byte_end: 7311 }: then
Token { kind: Comment(LineComment), char_start: 7322, char_end: 7348, byte_start: 7322, byte_end: 7348 }: -- If on "foo bar bazzzz"

Token { kind: Comment(LineComment), char_start: 7358, char_end: 7381, byte_start: 7358, byte_end: 7381 }: --                   ^

Token { kind: Comment(LineComment), char_start: 7391, char_end: 7427, byte_start: 7391, byte_end: 7427 }: -- Must return "bazzzz", not "zzz".

Token { kind: Name(Keyword(Local)), char_start: 7437, char_end: 7442, byte_start: 7437, byte_end: 7442 }: local
Token { kind: Name(Identifier), char_start: 7443, char_end: 7449, byte_start: 7443, byte_end: 7449 }: suffix
Token { kind: Op(Assign), char_start: 7450, char_end: 7451, byte_start: 7450, byte_end: 7451 }: =
Token { kind: Name(Identifier), char_start: 7452, char_end: 7457, byte_start: 7452, byte_end: 7457 }: title
Token { kind: Punctuator(Colon), char_start: 7457, char_end: 7458, byte_start: 7457, byte_end: 7458 }: :
Token { kind: Name(Identifier), char_start: 7458, char_end: 7461, byte_start: 7458, byte_end: 7461 }: sub
Token { kind: Punctuator(Lparen), char_start: 7461, char_end: 7462, byte_start: 7461, byte_end: 7462 }: (
Token { kind: Name(Identifier), char_start: 7462, char_end: 7468, byte_start: 7462, byte_end: 7468 }: prefix
Token { kind: Punctuator(Colon), char_start: 7468, char_end: 7469, byte_start: 7468, byte_end: 7469 }: :
Token { kind: Name(Identifier), char_start: 7469, char_end: 7472, byte_start: 7469, byte_end: 7472 }: len
Token { kind: Punctuator(Lparen), char_start: 7472, char_end: 7473, byte_start: 7472, byte_end: 7473 }: (
Token { kind: Punctuator(Rparen), char_start: 7473, char_end: 7474, byte_start: 7473, byte_end: 7474 }: )
Token { kind: Op(Minus), char_start: 7475, char_end: 7476, byte_start: 7475, byte_end: 7476 }: -
Token { kind: Name(Identifier), char_start: 7477, char_end: 7484, byte_start: 7477, byte_end: 7484 }: arglead
Token { kind: Punctuator(Colon), char_start: 7484, char_end: 7485, byte_start: 7484, byte_end: 7485 }: :
Token { kind: Name(Identifier), char_start: 7485, char_end: 7488, byte_start: 7485, byte_end: 7488 }: len
Token { kind: Punctuator(Lparen), char_start: 7488, char_end: 7489, byte_start: 7488, byte_end: 7489 }: (
Token { kind: Punctuator(Rparen), char_start: 7489, char_end: 7490, byte_start: 7489, byte_end: 7490 }: )
Token { kind: Op(Plus), char_start: 7491, char_end: 7492, byte_start: 7491, byte_end: 7492 }: +
Token { kind: Literal(Number), char_start: 7493, char_end: 7494, byte_start: 7493, byte_end: 7494 }: 1
Token { kind: Punctuator(Comma), char_start: 7494, char_end: 7495, byte_start: 7494, byte_end: 7495 }: ,
Token { kind: Op(Minus), char_start: 7496, char_end: 7497, byte_start: 7496, byte_end: 7497 }: -
Token { kind: Literal(Number), char_start: 7497, char_end: 7498, byte_start: 7497, byte_end: 7498 }: 1
Token { kind: Punctuator(Rparen), char_start: 7498, char_end: 7499, byte_start: 7498, byte_end: 7499 }: )
Token { kind: Name(Keyword(Return)), char_start: 7510, char_end: 7516, byte_start: 7510, byte_end: 7516 }: return
Token { kind: Punctuator(Lcurly), char_start: 7517, char_end: 7518, byte_start: 7517, byte_end: 7518 }: {
Token { kind: Name(Identifier), char_start: 7518, char_end: 7524, byte_start: 7518, byte_end: 7524 }: suffix
Token { kind: Punctuator(Rcurly), char_start: 7524, char_end: 7525, byte_start: 7524, byte_end: 7525 }: }
Token { kind: Name(Keyword(End)), char_start: 7534, char_end: 7537, byte_start: 7534, byte_end: 7537 }: end
Token { kind: Name(Keyword(End)), char_start: 7544, char_end: 7547, byte_start: 7544, byte_end: 7547 }: end
Token { kind: Name(Keyword(Else)), char_start: 7552, char_end: 7556, byte_start: 7552, byte_end: 7556 }: else
Token { kind: Name(Keyword(Local)), char_start: 7563, char_end: 7568, byte_start: 7563, byte_end: 7568 }: local
Token { kind: Name(Identifier), char_start: 7569, char_end: 7580, byte_start: 7569, byte_end: 7580 }: directories
Token { kind: Op(Assign), char_start: 7581, char_end: 7582, byte_start: 7581, byte_end: 7582 }: =
Token { kind: Name(Identifier), char_start: 7583, char_end: 7589, byte_start: 7583, byte_end: 7589 }: corpus
Token { kind: Punctuator(Dot), char_start: 7589, char_end: 7590, byte_start: 7589, byte_end: 7590 }: .
Token { kind: Name(Identifier), char_start: 7590, char_end: 7601, byte_start: 7590, byte_end: 7601 }: directories
Token { kind: Punctuator(Lparen), char_start: 7601, char_end: 7602, byte_start: 7601, byte_end: 7602 }: (
Token { kind: Punctuator(Rparen), char_start: 7602, char_end: 7603, byte_start: 7602, byte_end: 7603 }: )
Token { kind: Name(Keyword(Return)), char_start: 7610, char_end: 7616, byte_start: 7610, byte_end: 7616 }: return
Token { kind: Name(Identifier), char_start: 7617, char_end: 7621, byte_start: 7617, byte_end: 7621 }: util
Token { kind: Punctuator(Dot), char_start: 7621, char_end: 7622, byte_start: 7621, byte_end: 7622 }: .
Token { kind: Name(Identifier), char_start: 7622, char_end: 7626, byte_start: 7622, byte_end: 7626 }: list
Token { kind: Punctuator(Dot), char_start: 7626, char_end: 7627, byte_start: 7626, byte_end: 7627 }: .
Token { kind: Name(Identifier), char_start: 7627, char_end: 7633, byte_start: 7627, byte_end: 7633 }: filter
Token { kind: Punctuator(Lparen), char_start: 7633, char_end: 7634, byte_start: 7633, byte_end: 7634 }: (
Token { kind: Name(Identifier), char_start: 7634, char_end: 7645, byte_start: 7634, byte_end: 7645 }: directories
Token { kind: Punctuator(Comma), char_start: 7645, char_end: 7646, byte_start: 7645, byte_end: 7646 }: ,
Token { kind: Name(Keyword(Function)), char_start: 7647, char_end: 7655, byte_start: 7647, byte_end: 7655 }: function
Token { kind: Punctuator(Lparen), char_start: 7655, char_end: 7656, byte_start: 7655, byte_end: 7656 }: (
Token { kind: Name(Identifier), char_start: 7656, char_end: 7665, byte_start: 7656, byte_end: 7665 }: directory
Token { kind: Punctuator(Comma), char_start: 7665, char_end: 7666, byte_start: 7665, byte_end: 7666 }: ,
Token { kind: Name(Identifier), char_start: 7667, char_end: 7668, byte_start: 7667, byte_end: 7668 }: i
Token { kind: Punctuator(Rparen), char_start: 7668, char_end: 7669, byte_start: 7668, byte_end: 7669 }: )
Token { kind: Name(Keyword(Return)), char_start: 7678, char_end: 7684, byte_start: 7678, byte_end: 7684 }: return
Token { kind: Name(Identifier), char_start: 7685, char_end: 7688, byte_start: 7685, byte_end: 7688 }: vim
Token { kind: Punctuator(Dot), char_start: 7688, char_end: 7689, byte_start: 7688, byte_end: 7689 }: .
Token { kind: Name(Identifier), char_start: 7689, char_end: 7699, byte_start: 7689, byte_end: 7699 }: startswith
Token { kind: Punctuator(Lparen), char_start: 7699, char_end: 7700, byte_start: 7699, byte_end: 7700 }: (
Token { kind: Name(Identifier), char_start: 7700, char_end: 7709, byte_start: 7700, byte_end: 7709 }: directory
Token { kind: Punctuator(Comma), char_start: 7709, char_end: 7710, byte_start: 7709, byte_end: 7710 }: ,
Token { kind: Name(Identifier), char_start: 7711, char_end: 7718, byte_start: 7711, byte_end: 7718 }: arglead
Token { kind: Punctuator(Rparen), char_start: 7718, char_end: 7719, byte_start: 7718, byte_end: 7719 }: )
Token { kind: Name(Keyword(End)), char_start: 7726, char_end: 7729, byte_start: 7726, byte_end: 7729 }: end
Token { kind: Punctuator(Rparen), char_start: 7729, char_end: 7730, byte_start: 7729, byte_end: 7730 }: )
Token { kind: Name(Keyword(End)), char_start: 7735, char_end: 7738, byte_start: 7735, byte_end: 7738 }: end
Token { kind: Name(Keyword(End)), char_start: 7741, char_end: 7744, byte_start: 7741, byte_end: 7744 }: end
Token { kind: Punctuator(Comma), char_start: 7744, char_end: 7745, byte_start: 7744, byte_end: 7745 }: ,
Token { kind: Comment(LineComment), char_start: 7749, char_end: 7813, byte_start: 7749, byte_end: 7813 }: -- Returns config from the `CorpusDirectories` (Lua global) for

Token { kind: Comment(LineComment), char_start: 7815, char_end: 7875, byte_start: 7815, byte_end: 7875 }: -- `file`, or an empty table if `file` is not in one of the

Token { kind: Comment(LineComment), char_start: 7877, char_end: 7924, byte_start: 7877, byte_end: 7924 }: -- directories defined in `CorpusDirectories`.

Token { kind: Name(Identifier), char_start: 7926, char_end: 7941, byte_start: 7926, byte_end: 7941 }: config_for_file
Token { kind: Op(Assign), char_start: 7942, char_end: 7943, byte_start: 7942, byte_end: 7943 }: =
Token { kind: Name(Keyword(Function)), char_start: 7944, char_end: 7952, byte_start: 7944, byte_end: 7952 }: function
Token { kind: Punctuator(Lparen), char_start: 7952, char_end: 7953, byte_start: 7952, byte_end: 7953 }: (
Token { kind: Name(Identifier), char_start: 7953, char_end: 7957, byte_start: 7953, byte_end: 7957 }: file
Token { kind: Punctuator(Rparen), char_start: 7957, char_end: 7958, byte_start: 7957, byte_end: 7958 }: )
Token { kind: Name(Keyword(Local)), char_start: 7963, char_end: 7968, byte_start: 7963, byte_end: 7968 }: local
Token { kind: Name(Identifier), char_start: 7969, char_end: 7973, byte_start: 7969, byte_end: 7973 }: base
Token { kind: Op(Assign), char_start: 7974, char_end: 7975, byte_start: 7974, byte_end: 7975 }: =
Token { kind: Name(Identifier), char_start: 7976, char_end: 7979, byte_start: 7976, byte_end: 7979 }: vim
Token { kind: Punctuator(Dot), char_start: 7979, char_end: 7980, byte_start: 7979, byte_end: 7980 }: .
Token { kind: Name(Identifier), char_start: 7980, char_end: 7982, byte_start: 7980, byte_end: 7982 }: fn
Token { kind: Punctuator(Dot), char_start: 7982, char_end: 7983, byte_start: 7982, byte_end: 7983 }: .
Token { kind: Name(Identifier), char_start: 7983, char_end: 7994, byte_start: 7983, byte_end: 7994 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 7994, char_end: 7995, byte_start: 7994, byte_end: 7995 }: (
Token { kind: Name(Identifier), char_start: 7995, char_end: 7999, byte_start: 7995, byte_end: 7999 }: file
Token { kind: Punctuator(Comma), char_start: 7999, char_end: 8000, byte_start: 7999, byte_end: 8000 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 8001, char_end: 8005, byte_start: 8001, byte_end: 8005 }: ':h'
Token { kind: Punctuator(Rparen), char_start: 8005, char_end: 8006, byte_start: 8005, byte_end: 8006 }: )
Token { kind: Name(Keyword(Local)), char_start: 8011, char_end: 8016, byte_start: 8011, byte_end: 8016 }: local
Token { kind: Name(Identifier), char_start: 8017, char_end: 8023, byte_start: 8017, byte_end: 8023 }: config
Token { kind: Op(Assign), char_start: 8024, char_end: 8025, byte_start: 8024, byte_end: 8025 }: =
Token { kind: Name(Identifier), char_start: 8026, char_end: 8032, byte_start: 8026, byte_end: 8032 }: corpus
Token { kind: Punctuator(Dot), char_start: 8032, char_end: 8033, byte_start: 8032, byte_end: 8033 }: .
Token { kind: Name(Identifier), char_start: 8033, char_end: 8051, byte_start: 8033, byte_end: 8051 }: corpus_directories
Token { kind: Punctuator(Lparen), char_start: 8051, char_end: 8052, byte_start: 8051, byte_end: 8052 }: (
Token { kind: Punctuator(Rparen), char_start: 8052, char_end: 8053, byte_start: 8052, byte_end: 8053 }: )
Token { kind: Name(Keyword(For)), char_start: 8058, char_end: 8061, byte_start: 8058, byte_end: 8061 }: for
Token { kind: Name(Identifier), char_start: 8062, char_end: 8071, byte_start: 8062, byte_end: 8071 }: directory
Token { kind: Punctuator(Comma), char_start: 8071, char_end: 8072, byte_start: 8071, byte_end: 8072 }: ,
Token { kind: Name(Identifier), char_start: 8073, char_end: 8081, byte_start: 8073, byte_end: 8081 }: settings
Token { kind: Name(Keyword(In)), char_start: 8082, char_end: 8084, byte_start: 8082, byte_end: 8084 }: in
Token { kind: Name(Identifier), char_start: 8085, char_end: 8090, byte_start: 8085, byte_end: 8090 }: pairs
Token { kind: Punctuator(Lparen), char_start: 8090, char_end: 8091, byte_start: 8090, byte_end: 8091 }: (
Token { kind: Name(Identifier), char_start: 8091, char_end: 8097, byte_start: 8091, byte_end: 8097 }: config
Token { kind: Punctuator(Rparen), char_start: 8097, char_end: 8098, byte_start: 8097, byte_end: 8098 }: )
Token { kind: Name(Keyword(Do)), char_start: 8099, char_end: 8101, byte_start: 8099, byte_end: 8101 }: do
Token { kind: Name(Keyword(Local)), char_start: 8108, char_end: 8113, byte_start: 8108, byte_end: 8113 }: local
Token { kind: Name(Identifier), char_start: 8114, char_end: 8123, byte_start: 8114, byte_end: 8123 }: candidate
Token { kind: Op(Assign), char_start: 8124, char_end: 8125, byte_start: 8124, byte_end: 8125 }: =
Token { kind: Name(Identifier), char_start: 8126, char_end: 8132, byte_start: 8126, byte_end: 8132 }: corpus
Token { kind: Punctuator(Dot), char_start: 8132, char_end: 8133, byte_start: 8132, byte_end: 8133 }: .
Token { kind: Name(Identifier), char_start: 8133, char_end: 8142, byte_start: 8133, byte_end: 8142 }: normalize
Token { kind: Punctuator(Lparen), char_start: 8142, char_end: 8143, byte_start: 8142, byte_end: 8143 }: (
Token { kind: Name(Identifier), char_start: 8143, char_end: 8152, byte_start: 8143, byte_end: 8152 }: directory
Token { kind: Punctuator(Rparen), char_start: 8152, char_end: 8153, byte_start: 8152, byte_end: 8153 }: )
Token { kind: Name(Keyword(If)), char_start: 8160, char_end: 8162, byte_start: 8160, byte_end: 8162 }: if
Token { kind: Name(Identifier), char_start: 8163, char_end: 8172, byte_start: 8163, byte_end: 8172 }: candidate
Token { kind: Op(Eq), char_start: 8173, char_end: 8175, byte_start: 8173, byte_end: 8175 }: ==
Token { kind: Name(Identifier), char_start: 8176, char_end: 8180, byte_start: 8176, byte_end: 8180 }: base
Token { kind: Name(Keyword(Then)), char_start: 8181, char_end: 8185, byte_start: 8181, byte_end: 8185 }: then
Token { kind: Name(Keyword(Return)), char_start: 8194, char_end: 8200, byte_start: 8194, byte_end: 8200 }: return
Token { kind: Name(Identifier), char_start: 8201, char_end: 8204, byte_start: 8201, byte_end: 8204 }: vim
Token { kind: Punctuator(Dot), char_start: 8204, char_end: 8205, byte_start: 8204, byte_end: 8205 }: .
Token { kind: Name(Identifier), char_start: 8205, char_end: 8215, byte_start: 8205, byte_end: 8215 }: tbl_extend
Token { kind: Punctuator(Lparen), char_start: 8215, char_end: 8216, byte_start: 8215, byte_end: 8216 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 8216, char_end: 8223, byte_start: 8216, byte_end: 8223 }: 'force'
Token { kind: Punctuator(Comma), char_start: 8223, char_end: 8224, byte_start: 8223, byte_end: 8224 }: ,
Token { kind: Punctuator(Lcurly), char_start: 8225, char_end: 8226, byte_start: 8225, byte_end: 8226 }: {
Token { kind: Name(Identifier), char_start: 8226, char_end: 8234, byte_start: 8226, byte_end: 8234 }: location
Token { kind: Op(Assign), char_start: 8235, char_end: 8236, byte_start: 8235, byte_end: 8236 }: =
Token { kind: Name(Identifier), char_start: 8237, char_end: 8246, byte_start: 8237, byte_end: 8246 }: candidate
Token { kind: Punctuator(Rcurly), char_start: 8246, char_end: 8247, byte_start: 8246, byte_end: 8247 }: }
Token { kind: Punctuator(Comma), char_start: 8247, char_end: 8248, byte_start: 8247, byte_end: 8248 }: ,
Token { kind: Name(Identifier), char_start: 8249, char_end: 8257, byte_start: 8249, byte_end: 8257 }: settings
Token { kind: Punctuator(Rparen), char_start: 8257, char_end: 8258, byte_start: 8257, byte_end: 8258 }: )
Token { kind: Name(Keyword(End)), char_start: 8265, char_end: 8268, byte_start: 8265, byte_end: 8268 }: end
Token { kind: Name(Keyword(End)), char_start: 8273, char_end: 8276, byte_start: 8273, byte_end: 8276 }: end
Token { kind: Name(Keyword(Return)), char_start: 8281, char_end: 8287, byte_start: 8281, byte_end: 8287 }: return
Token { kind: Name(Identifier), char_start: 8288, char_end: 8291, byte_start: 8288, byte_end: 8291 }: vim
Token { kind: Punctuator(Dot), char_start: 8291, char_end: 8292, byte_start: 8291, byte_end: 8292 }: .
Token { kind: Name(Identifier), char_start: 8292, char_end: 8302, byte_start: 8292, byte_end: 8302 }: empty_dict
Token { kind: Punctuator(Lparen), char_start: 8302, char_end: 8303, byte_start: 8302, byte_end: 8303 }: (
Token { kind: Punctuator(Rparen), char_start: 8303, char_end: 8304, byte_start: 8303, byte_end: 8304 }: )
Token { kind: Name(Keyword(End)), char_start: 8307, char_end: 8310, byte_start: 8307, byte_end: 8310 }: end
Token { kind: Punctuator(Comma), char_start: 8310, char_end: 8311, byte_start: 8310, byte_end: 8311 }: ,
Token { kind: Name(Identifier), char_start: 8315, char_end: 8333, byte_start: 8315, byte_end: 8333 }: corpus_directories
Token { kind: Op(Assign), char_start: 8334, char_end: 8335, byte_start: 8334, byte_end: 8335 }: =
Token { kind: Name(Keyword(Function)), char_start: 8336, char_end: 8344, byte_start: 8336, byte_end: 8344 }: function
Token { kind: Punctuator(Lparen), char_start: 8344, char_end: 8345, byte_start: 8344, byte_end: 8345 }: (
Token { kind: Punctuator(Rparen), char_start: 8345, char_end: 8346, byte_start: 8345, byte_end: 8346 }: )
Token { kind: Name(Keyword(Return)), char_start: 8351, char_end: 8357, byte_start: 8351, byte_end: 8357 }: return
Token { kind: Name(Identifier), char_start: 8358, char_end: 8360, byte_start: 8358, byte_end: 8360 }: _G
Token { kind: Punctuator(Dot), char_start: 8360, char_end: 8361, byte_start: 8360, byte_end: 8361 }: .
Token { kind: Name(Identifier), char_start: 8361, char_end: 8378, byte_start: 8361, byte_end: 8378 }: CorpusDirectories
Token { kind: Name(Keyword(Or)), char_start: 8379, char_end: 8381, byte_start: 8379, byte_end: 8381 }: or
Token { kind: Name(Identifier), char_start: 8382, char_end: 8385, byte_start: 8382, byte_end: 8385 }: vim
Token { kind: Punctuator(Dot), char_start: 8385, char_end: 8386, byte_start: 8385, byte_end: 8386 }: .
Token { kind: Name(Identifier), char_start: 8386, char_end: 8387, byte_start: 8386, byte_end: 8387 }: g
Token { kind: Punctuator(Dot), char_start: 8387, char_end: 8388, byte_start: 8387, byte_end: 8388 }: .
Token { kind: Name(Identifier), char_start: 8388, char_end: 8405, byte_start: 8388, byte_end: 8405 }: CorpusDirectories
Token { kind: Name(Keyword(Or)), char_start: 8406, char_end: 8408, byte_start: 8406, byte_end: 8408 }: or
Token { kind: Name(Identifier), char_start: 8409, char_end: 8412, byte_start: 8409, byte_end: 8412 }: vim
Token { kind: Punctuator(Dot), char_start: 8412, char_end: 8413, byte_start: 8412, byte_end: 8413 }: .
Token { kind: Name(Identifier), char_start: 8413, char_end: 8423, byte_start: 8413, byte_end: 8423 }: empty_dict
Token { kind: Punctuator(Lparen), char_start: 8423, char_end: 8424, byte_start: 8423, byte_end: 8424 }: (
Token { kind: Punctuator(Rparen), char_start: 8424, char_end: 8425, byte_start: 8424, byte_end: 8425 }: )
Token { kind: Name(Keyword(End)), char_start: 8428, char_end: 8431, byte_start: 8428, byte_end: 8431 }: end
Token { kind: Punctuator(Comma), char_start: 8431, char_end: 8432, byte_start: 8431, byte_end: 8432 }: ,
Token { kind: Comment(LineComment), char_start: 8436, char_end: 8514, byte_start: 8436, byte_end: 8514 }: -- If current working directory is a configured Corpus directory, returns it.

Token { kind: Comment(LineComment), char_start: 8516, char_end: 8563, byte_start: 8516, byte_end: 8563 }: -- Otherwise, returns the first found default.

Token { kind: Name(Identifier), char_start: 8565, char_end: 8574, byte_start: 8565, byte_end: 8574 }: directory
Token { kind: Op(Assign), char_start: 8575, char_end: 8576, byte_start: 8575, byte_end: 8576 }: =
Token { kind: Name(Keyword(Function)), char_start: 8577, char_end: 8585, byte_start: 8577, byte_end: 8585 }: function
Token { kind: Punctuator(Lparen), char_start: 8585, char_end: 8586, byte_start: 8585, byte_end: 8586 }: (
Token { kind: Punctuator(Rparen), char_start: 8586, char_end: 8587, byte_start: 8586, byte_end: 8587 }: )
Token { kind: Name(Keyword(If)), char_start: 8592, char_end: 8594, byte_start: 8592, byte_end: 8594 }: if
Token { kind: Name(Identifier), char_start: 8595, char_end: 8601, byte_start: 8595, byte_end: 8601 }: corpus
Token { kind: Punctuator(Dot), char_start: 8601, char_end: 8602, byte_start: 8601, byte_end: 8602 }: .
Token { kind: Name(Identifier), char_start: 8602, char_end: 8614, byte_start: 8602, byte_end: 8614 }: in_directory
Token { kind: Punctuator(Lparen), char_start: 8614, char_end: 8615, byte_start: 8614, byte_end: 8615 }: (
Token { kind: Punctuator(Rparen), char_start: 8615, char_end: 8616, byte_start: 8615, byte_end: 8616 }: )
Token { kind: Name(Keyword(Then)), char_start: 8617, char_end: 8621, byte_start: 8617, byte_end: 8621 }: then
Token { kind: Name(Keyword(Return)), char_start: 8628, char_end: 8634, byte_start: 8628, byte_end: 8634 }: return
Token { kind: Name(Identifier), char_start: 8635, char_end: 8638, byte_start: 8635, byte_end: 8638 }: vim
Token { kind: Punctuator(Dot), char_start: 8638, char_end: 8639, byte_start: 8638, byte_end: 8639 }: .
Token { kind: Name(Identifier), char_start: 8639, char_end: 8641, byte_start: 8639, byte_end: 8641 }: fn
Token { kind: Punctuator(Dot), char_start: 8641, char_end: 8642, byte_start: 8641, byte_end: 8642 }: .
Token { kind: Name(Identifier), char_start: 8642, char_end: 8648, byte_start: 8642, byte_end: 8648 }: getcwd
Token { kind: Punctuator(Lparen), char_start: 8648, char_end: 8649, byte_start: 8648, byte_end: 8649 }: (
Token { kind: Punctuator(Rparen), char_start: 8649, char_end: 8650, byte_start: 8649, byte_end: 8650 }: )
Token { kind: Name(Keyword(Else)), char_start: 8655, char_end: 8659, byte_start: 8655, byte_end: 8659 }: else
Token { kind: Name(Keyword(Local)), char_start: 8666, char_end: 8671, byte_start: 8666, byte_end: 8671 }: local
Token { kind: Name(Identifier), char_start: 8672, char_end: 8683, byte_start: 8672, byte_end: 8683 }: directories
Token { kind: Op(Assign), char_start: 8684, char_end: 8685, byte_start: 8684, byte_end: 8685 }: =
Token { kind: Name(Identifier), char_start: 8686, char_end: 8692, byte_start: 8686, byte_end: 8692 }: corpus
Token { kind: Punctuator(Dot), char_start: 8692, char_end: 8693, byte_start: 8692, byte_end: 8693 }: .
Token { kind: Name(Identifier), char_start: 8693, char_end: 8704, byte_start: 8693, byte_end: 8704 }: directories
Token { kind: Punctuator(Lparen), char_start: 8704, char_end: 8705, byte_start: 8704, byte_end: 8705 }: (
Token { kind: Punctuator(Rparen), char_start: 8705, char_end: 8706, byte_start: 8705, byte_end: 8706 }: )
Token { kind: Name(Keyword(Return)), char_start: 8713, char_end: 8719, byte_start: 8713, byte_end: 8719 }: return
Token { kind: Name(Identifier), char_start: 8720, char_end: 8731, byte_start: 8720, byte_end: 8731 }: directories
Token { kind: Punctuator(Lbracket), char_start: 8731, char_end: 8732, byte_start: 8731, byte_end: 8732 }: [
Token { kind: Literal(Number), char_start: 8732, char_end: 8733, byte_start: 8732, byte_end: 8733 }: 1
Token { kind: Punctuator(Rbracket), char_start: 8733, char_end: 8734, byte_start: 8733, byte_end: 8734 }: ]
Token { kind: Name(Keyword(End)), char_start: 8739, char_end: 8742, byte_start: 8739, byte_end: 8742 }: end
Token { kind: Name(Keyword(End)), char_start: 8745, char_end: 8748, byte_start: 8745, byte_end: 8748 }: end
Token { kind: Punctuator(Comma), char_start: 8748, char_end: 8749, byte_start: 8748, byte_end: 8749 }: ,
Token { kind: Name(Identifier), char_start: 8753, char_end: 8764, byte_start: 8753, byte_end: 8764 }: directories
Token { kind: Op(Assign), char_start: 8765, char_end: 8766, byte_start: 8765, byte_end: 8766 }: =
Token { kind: Name(Keyword(Function)), char_start: 8767, char_end: 8775, byte_start: 8767, byte_end: 8775 }: function
Token { kind: Punctuator(Lparen), char_start: 8775, char_end: 8776, byte_start: 8775, byte_end: 8776 }: (
Token { kind: Punctuator(Rparen), char_start: 8776, char_end: 8777, byte_start: 8776, byte_end: 8777 }: )
Token { kind: Name(Keyword(Local)), char_start: 8782, char_end: 8787, byte_start: 8782, byte_end: 8787 }: local
Token { kind: Name(Identifier), char_start: 8788, char_end: 8794, byte_start: 8788, byte_end: 8794 }: config
Token { kind: Op(Assign), char_start: 8795, char_end: 8796, byte_start: 8795, byte_end: 8796 }: =
Token { kind: Name(Identifier), char_start: 8797, char_end: 8803, byte_start: 8797, byte_end: 8803 }: corpus
Token { kind: Punctuator(Dot), char_start: 8803, char_end: 8804, byte_start: 8803, byte_end: 8804 }: .
Token { kind: Name(Identifier), char_start: 8804, char_end: 8822, byte_start: 8804, byte_end: 8822 }: corpus_directories
Token { kind: Punctuator(Lparen), char_start: 8822, char_end: 8823, byte_start: 8822, byte_end: 8823 }: (
Token { kind: Punctuator(Rparen), char_start: 8823, char_end: 8824, byte_start: 8823, byte_end: 8824 }: )
Token { kind: Name(Keyword(Local)), char_start: 8829, char_end: 8834, byte_start: 8829, byte_end: 8834 }: local
Token { kind: Name(Identifier), char_start: 8835, char_end: 8846, byte_start: 8835, byte_end: 8846 }: directories
Token { kind: Op(Assign), char_start: 8847, char_end: 8848, byte_start: 8847, byte_end: 8848 }: =
Token { kind: Name(Identifier), char_start: 8849, char_end: 8852, byte_start: 8849, byte_end: 8852 }: vim
Token { kind: Punctuator(Dot), char_start: 8852, char_end: 8853, byte_start: 8852, byte_end: 8853 }: .
Token { kind: Name(Identifier), char_start: 8853, char_end: 8861, byte_start: 8853, byte_end: 8861 }: tbl_keys
Token { kind: Punctuator(Lparen), char_start: 8861, char_end: 8862, byte_start: 8861, byte_end: 8862 }: (
Token { kind: Name(Identifier), char_start: 8862, char_end: 8868, byte_start: 8862, byte_end: 8868 }: config
Token { kind: Punctuator(Rparen), char_start: 8868, char_end: 8869, byte_start: 8868, byte_end: 8869 }: )
Token { kind: Name(Keyword(If)), char_start: 8874, char_end: 8876, byte_start: 8874, byte_end: 8876 }: if
Token { kind: Name(Identifier), char_start: 8877, char_end: 8882, byte_start: 8877, byte_end: 8882 }: table
Token { kind: Punctuator(Dot), char_start: 8882, char_end: 8883, byte_start: 8882, byte_end: 8883 }: .
Token { kind: Name(Identifier), char_start: 8883, char_end: 8887, byte_start: 8883, byte_end: 8887 }: getn
Token { kind: Punctuator(Lparen), char_start: 8887, char_end: 8888, byte_start: 8887, byte_end: 8888 }: (
Token { kind: Name(Identifier), char_start: 8888, char_end: 8899, byte_start: 8888, byte_end: 8899 }: directories
Token { kind: Punctuator(Rparen), char_start: 8899, char_end: 8900, byte_start: 8899, byte_end: 8900 }: )
Token { kind: Op(Eq), char_start: 8901, char_end: 8903, byte_start: 8901, byte_end: 8903 }: ==
Token { kind: Literal(Number), char_start: 8904, char_end: 8905, byte_start: 8904, byte_end: 8905 }: 0
Token { kind: Name(Keyword(Then)), char_start: 8906, char_end: 8910, byte_start: 8906, byte_end: 8910 }: then
Token { kind: Name(Identifier), char_start: 8917, char_end: 8920, byte_start: 8917, byte_end: 8920 }: vim
Token { kind: Punctuator(Dot), char_start: 8920, char_end: 8921, byte_start: 8920, byte_end: 8921 }: .
Token { kind: Name(Identifier), char_start: 8921, char_end: 8924, byte_start: 8921, byte_end: 8924 }: api
Token { kind: Punctuator(Dot), char_start: 8924, char_end: 8925, byte_start: 8924, byte_end: 8925 }: .
Token { kind: Name(Identifier), char_start: 8925, char_end: 8941, byte_start: 8925, byte_end: 8941 }: nvim_err_writeln
Token { kind: Punctuator(Lparen), char_start: 8941, char_end: 8942, byte_start: 8941, byte_end: 8942 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 8951, char_end: 9015, byte_start: 8951, byte_end: 9015 }: 'No Corpus directories configured: please set CorpusDirectories'
Token { kind: Punctuator(Rparen), char_start: 9022, char_end: 9023, byte_start: 9022, byte_end: 9023 }: )
Token { kind: Name(Keyword(End)), char_start: 9028, char_end: 9031, byte_start: 9028, byte_end: 9031 }: end
Token { kind: Name(Keyword(Return)), char_start: 9036, char_end: 9042, byte_start: 9036, byte_end: 9042 }: return
Token { kind: Name(Identifier), char_start: 9043, char_end: 9047, byte_start: 9043, byte_end: 9047 }: util
Token { kind: Punctuator(Dot), char_start: 9047, char_end: 9048, byte_start: 9047, byte_end: 9048 }: .
Token { kind: Name(Identifier), char_start: 9048, char_end: 9052, byte_start: 9048, byte_end: 9052 }: list
Token { kind: Punctuator(Dot), char_start: 9052, char_end: 9053, byte_start: 9052, byte_end: 9053 }: .
Token { kind: Name(Identifier), char_start: 9053, char_end: 9056, byte_start: 9053, byte_end: 9056 }: map
Token { kind: Punctuator(Lparen), char_start: 9056, char_end: 9057, byte_start: 9056, byte_end: 9057 }: (
Token { kind: Name(Identifier), char_start: 9057, char_end: 9068, byte_start: 9057, byte_end: 9068 }: directories
Token { kind: Punctuator(Comma), char_start: 9068, char_end: 9069, byte_start: 9068, byte_end: 9069 }: ,
Token { kind: Name(Keyword(Function)), char_start: 9070, char_end: 9078, byte_start: 9070, byte_end: 9078 }: function
Token { kind: Punctuator(Lparen), char_start: 9078, char_end: 9079, byte_start: 9078, byte_end: 9079 }: (
Token { kind: Name(Identifier), char_start: 9079, char_end: 9088, byte_start: 9079, byte_end: 9088 }: directory
Token { kind: Punctuator(Rparen), char_start: 9088, char_end: 9089, byte_start: 9088, byte_end: 9089 }: )
Token { kind: Name(Keyword(Return)), char_start: 9096, char_end: 9102, byte_start: 9096, byte_end: 9102 }: return
Token { kind: Name(Identifier), char_start: 9103, char_end: 9109, byte_start: 9103, byte_end: 9109 }: corpus
Token { kind: Punctuator(Dot), char_start: 9109, char_end: 9110, byte_start: 9109, byte_end: 9110 }: .
Token { kind: Name(Identifier), char_start: 9110, char_end: 9119, byte_start: 9110, byte_end: 9119 }: normalize
Token { kind: Punctuator(Lparen), char_start: 9119, char_end: 9120, byte_start: 9119, byte_end: 9120 }: (
Token { kind: Name(Identifier), char_start: 9120, char_end: 9129, byte_start: 9120, byte_end: 9129 }: directory
Token { kind: Punctuator(Rparen), char_start: 9129, char_end: 9130, byte_start: 9129, byte_end: 9130 }: )
Token { kind: Name(Keyword(End)), char_start: 9135, char_end: 9138, byte_start: 9135, byte_end: 9138 }: end
Token { kind: Punctuator(Rparen), char_start: 9138, char_end: 9139, byte_start: 9138, byte_end: 9139 }: )
Token { kind: Name(Keyword(End)), char_start: 9142, char_end: 9145, byte_start: 9142, byte_end: 9145 }: end
Token { kind: Punctuator(Comma), char_start: 9145, char_end: 9146, byte_start: 9145, byte_end: 9146 }: ,
Token { kind: Comment(LineComment), char_start: 9150, char_end: 9226, byte_start: 9150, byte_end: 9226 }: -- Adds 'corpus' to the 'filetype' if the current file is under a directory

Token { kind: Comment(LineComment), char_start: 9228, char_end: 9267, byte_start: 9228, byte_end: 9267 }: -- configured via `CorpusDirectories`.

Token { kind: Name(Identifier), char_start: 9269, char_end: 9277, byte_start: 9269, byte_end: 9277 }: ftdetect
Token { kind: Op(Assign), char_start: 9278, char_end: 9279, byte_start: 9278, byte_end: 9279 }: =
Token { kind: Name(Keyword(Function)), char_start: 9280, char_end: 9288, byte_start: 9280, byte_end: 9288 }: function
Token { kind: Punctuator(Lparen), char_start: 9288, char_end: 9289, byte_start: 9288, byte_end: 9289 }: (
Token { kind: Punctuator(Rparen), char_start: 9289, char_end: 9290, byte_start: 9289, byte_end: 9290 }: )
Token { kind: Name(Keyword(Local)), char_start: 9295, char_end: 9300, byte_start: 9295, byte_end: 9300 }: local
Token { kind: Name(Identifier), char_start: 9301, char_end: 9305, byte_start: 9301, byte_end: 9305 }: file
Token { kind: Op(Assign), char_start: 9306, char_end: 9307, byte_start: 9306, byte_end: 9307 }: =
Token { kind: Name(Identifier), char_start: 9308, char_end: 9314, byte_start: 9308, byte_end: 9314 }: corpus
Token { kind: Punctuator(Dot), char_start: 9314, char_end: 9315, byte_start: 9314, byte_end: 9315 }: .
Token { kind: Name(Identifier), char_start: 9315, char_end: 9324, byte_start: 9315, byte_end: 9324 }: normalize
Token { kind: Punctuator(Lparen), char_start: 9324, char_end: 9325, byte_start: 9324, byte_end: 9325 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 9325, char_end: 9334, byte_start: 9325, byte_end: 9334 }: '<afile>'
Token { kind: Punctuator(Rparen), char_start: 9334, char_end: 9335, byte_start: 9334, byte_end: 9335 }: )
Token { kind: Name(Keyword(Local)), char_start: 9340, char_end: 9345, byte_start: 9340, byte_end: 9345 }: local
Token { kind: Name(Identifier), char_start: 9346, char_end: 9352, byte_start: 9346, byte_end: 9352 }: config
Token { kind: Op(Assign), char_start: 9353, char_end: 9354, byte_start: 9353, byte_end: 9354 }: =
Token { kind: Name(Identifier), char_start: 9355, char_end: 9361, byte_start: 9355, byte_end: 9361 }: corpus
Token { kind: Punctuator(Dot), char_start: 9361, char_end: 9362, byte_start: 9361, byte_end: 9362 }: .
Token { kind: Name(Identifier), char_start: 9362, char_end: 9377, byte_start: 9362, byte_end: 9377 }: config_for_file
Token { kind: Punctuator(Lparen), char_start: 9377, char_end: 9378, byte_start: 9377, byte_end: 9378 }: (
Token { kind: Name(Identifier), char_start: 9378, char_end: 9382, byte_start: 9378, byte_end: 9382 }: file
Token { kind: Punctuator(Rparen), char_start: 9382, char_end: 9383, byte_start: 9382, byte_end: 9383 }: )
Token { kind: Name(Keyword(If)), char_start: 9388, char_end: 9390, byte_start: 9388, byte_end: 9390 }: if
Token { kind: Name(Identifier), char_start: 9391, char_end: 9395, byte_start: 9391, byte_end: 9395 }: next
Token { kind: Punctuator(Lparen), char_start: 9395, char_end: 9396, byte_start: 9395, byte_end: 9396 }: (
Token { kind: Name(Identifier), char_start: 9396, char_end: 9402, byte_start: 9396, byte_end: 9402 }: config
Token { kind: Punctuator(Rparen), char_start: 9402, char_end: 9403, byte_start: 9402, byte_end: 9403 }: )
Token { kind: Op(Ne), char_start: 9404, char_end: 9406, byte_start: 9404, byte_end: 9406 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 9407, char_end: 9410, byte_start: 9407, byte_end: 9410 }: nil
Token { kind: Name(Keyword(Then)), char_start: 9411, char_end: 9415, byte_start: 9411, byte_end: 9415 }: then
Token { kind: Name(Keyword(Local)), char_start: 9422, char_end: 9427, byte_start: 9422, byte_end: 9427 }: local
Token { kind: Name(Identifier), char_start: 9428, char_end: 9437, byte_start: 9428, byte_end: 9437 }: filetypes
Token { kind: Op(Assign), char_start: 9438, char_end: 9439, byte_start: 9438, byte_end: 9439 }: =
Token { kind: Name(Identifier), char_start: 9440, char_end: 9443, byte_start: 9440, byte_end: 9443 }: vim
Token { kind: Punctuator(Dot), char_start: 9443, char_end: 9444, byte_start: 9443, byte_end: 9444 }: .
Token { kind: Name(Identifier), char_start: 9444, char_end: 9449, byte_start: 9444, byte_end: 9449 }: split
Token { kind: Punctuator(Lparen), char_start: 9449, char_end: 9450, byte_start: 9449, byte_end: 9450 }: (
Token { kind: Name(Identifier), char_start: 9450, char_end: 9453, byte_start: 9450, byte_end: 9453 }: vim
Token { kind: Punctuator(Dot), char_start: 9453, char_end: 9454, byte_start: 9453, byte_end: 9454 }: .
Token { kind: Name(Identifier), char_start: 9454, char_end: 9456, byte_start: 9454, byte_end: 9456 }: bo
Token { kind: Punctuator(Dot), char_start: 9456, char_end: 9457, byte_start: 9456, byte_end: 9457 }: .
Token { kind: Name(Identifier), char_start: 9457, char_end: 9465, byte_start: 9457, byte_end: 9465 }: filetype
Token { kind: Punctuator(Comma), char_start: 9465, char_end: 9466, byte_start: 9465, byte_end: 9466 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 9467, char_end: 9470, byte_start: 9467, byte_end: 9470 }: '.'
Token { kind: Punctuator(Comma), char_start: 9470, char_end: 9471, byte_start: 9470, byte_end: 9471 }: ,
Token { kind: Name(Keyword(True)), char_start: 9472, char_end: 9476, byte_start: 9472, byte_end: 9476 }: true
Token { kind: Punctuator(Rparen), char_start: 9476, char_end: 9477, byte_start: 9476, byte_end: 9477 }: )
Token { kind: Name(Keyword(If)), char_start: 9484, char_end: 9486, byte_start: 9484, byte_end: 9486 }: if
Token { kind: Name(Keyword(Not)), char_start: 9487, char_end: 9490, byte_start: 9487, byte_end: 9490 }: not
Token { kind: Name(Identifier), char_start: 9491, char_end: 9494, byte_start: 9491, byte_end: 9494 }: vim
Token { kind: Punctuator(Dot), char_start: 9494, char_end: 9495, byte_start: 9494, byte_end: 9495 }: .
Token { kind: Name(Identifier), char_start: 9495, char_end: 9507, byte_start: 9495, byte_end: 9507 }: tbl_contains
Token { kind: Punctuator(Lparen), char_start: 9507, char_end: 9508, byte_start: 9507, byte_end: 9508 }: (
Token { kind: Name(Identifier), char_start: 9508, char_end: 9517, byte_start: 9508, byte_end: 9517 }: filetypes
Token { kind: Punctuator(Comma), char_start: 9517, char_end: 9518, byte_start: 9517, byte_end: 9518 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 9519, char_end: 9527, byte_start: 9519, byte_end: 9527 }: 'corpus'
Token { kind: Punctuator(Rparen), char_start: 9527, char_end: 9528, byte_start: 9527, byte_end: 9528 }: )
Token { kind: Name(Keyword(Then)), char_start: 9529, char_end: 9533, byte_start: 9529, byte_end: 9533 }: then
Token { kind: Name(Identifier), char_start: 9542, char_end: 9545, byte_start: 9542, byte_end: 9545 }: vim
Token { kind: Punctuator(Dot), char_start: 9545, char_end: 9546, byte_start: 9545, byte_end: 9546 }: .
Token { kind: Name(Identifier), char_start: 9546, char_end: 9548, byte_start: 9546, byte_end: 9548 }: bo
Token { kind: Punctuator(Dot), char_start: 9548, char_end: 9549, byte_start: 9548, byte_end: 9549 }: .
Token { kind: Name(Identifier), char_start: 9549, char_end: 9557, byte_start: 9549, byte_end: 9557 }: filetype
Token { kind: Op(Assign), char_start: 9558, char_end: 9559, byte_start: 9558, byte_end: 9559 }: =
Token { kind: Name(Identifier), char_start: 9560, char_end: 9563, byte_start: 9560, byte_end: 9563 }: vim
Token { kind: Punctuator(Dot), char_start: 9563, char_end: 9564, byte_start: 9563, byte_end: 9564 }: .
Token { kind: Name(Identifier), char_start: 9564, char_end: 9566, byte_start: 9564, byte_end: 9566 }: bo
Token { kind: Punctuator(Dot), char_start: 9566, char_end: 9567, byte_start: 9566, byte_end: 9567 }: .
Token { kind: Name(Identifier), char_start: 9567, char_end: 9575, byte_start: 9567, byte_end: 9575 }: filetype
Token { kind: Op(Concat), char_start: 9576, char_end: 9578, byte_start: 9576, byte_end: 9578 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 9579, char_end: 9588, byte_start: 9579, byte_end: 9588 }: '.corpus'
Token { kind: Name(Keyword(End)), char_start: 9595, char_end: 9598, byte_start: 9595, byte_end: 9598 }: end
Token { kind: Name(Keyword(End)), char_start: 9603, char_end: 9606, byte_start: 9603, byte_end: 9606 }: end
Token { kind: Name(Keyword(End)), char_start: 9609, char_end: 9612, byte_start: 9609, byte_end: 9612 }: end
Token { kind: Punctuator(Comma), char_start: 9612, char_end: 9613, byte_start: 9612, byte_end: 9613 }: ,
Token { kind: Name(Identifier), char_start: 9617, char_end: 9634, byte_start: 9617, byte_end: 9634 }: get_selected_file
Token { kind: Op(Assign), char_start: 9635, char_end: 9636, byte_start: 9635, byte_end: 9636 }: =
Token { kind: Name(Keyword(Function)), char_start: 9637, char_end: 9645, byte_start: 9637, byte_end: 9645 }: function
Token { kind: Punctuator(Lparen), char_start: 9645, char_end: 9646, byte_start: 9645, byte_end: 9646 }: (
Token { kind: Punctuator(Rparen), char_start: 9646, char_end: 9647, byte_start: 9646, byte_end: 9647 }: )
Token { kind: Name(Keyword(If)), char_start: 9652, char_end: 9654, byte_start: 9652, byte_end: 9654 }: if
Token { kind: Name(Identifier), char_start: 9655, char_end: 9677, byte_start: 9655, byte_end: 9677 }: chooser_selected_index
Token { kind: Op(Ne), char_start: 9678, char_end: 9680, byte_start: 9678, byte_end: 9680 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 9681, char_end: 9684, byte_start: 9681, byte_end: 9684 }: nil
Token { kind: Name(Keyword(Then)), char_start: 9685, char_end: 9689, byte_start: 9685, byte_end: 9689 }: then
Token { kind: Name(Keyword(Local)), char_start: 9696, char_end: 9701, byte_start: 9696, byte_end: 9701 }: local
Token { kind: Name(Identifier), char_start: 9702, char_end: 9706, byte_start: 9702, byte_end: 9706 }: line
Token { kind: Op(Assign), char_start: 9707, char_end: 9708, byte_start: 9707, byte_end: 9708 }: =
Token { kind: Name(Identifier), char_start: 9709, char_end: 9712, byte_start: 9709, byte_end: 9712 }: vim
Token { kind: Punctuator(Dot), char_start: 9712, char_end: 9713, byte_start: 9712, byte_end: 9713 }: .
Token { kind: Name(Identifier), char_start: 9713, char_end: 9716, byte_start: 9713, byte_end: 9716 }: api
Token { kind: Punctuator(Dot), char_start: 9716, char_end: 9717, byte_start: 9716, byte_end: 9717 }: .
Token { kind: Name(Identifier), char_start: 9717, char_end: 9735, byte_start: 9717, byte_end: 9735 }: nvim_buf_get_lines
Token { kind: Punctuator(Lparen), char_start: 9735, char_end: 9736, byte_start: 9735, byte_end: 9736 }: (
Token { kind: Name(Identifier), char_start: 9745, char_end: 9759, byte_start: 9745, byte_end: 9759 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 9759, char_end: 9760, byte_start: 9759, byte_end: 9760 }: ,
Token { kind: Name(Identifier), char_start: 9769, char_end: 9791, byte_start: 9769, byte_end: 9791 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 9792, char_end: 9793, byte_start: 9792, byte_end: 9793 }: -
Token { kind: Literal(Number), char_start: 9794, char_end: 9795, byte_start: 9794, byte_end: 9795 }: 1
Token { kind: Punctuator(Comma), char_start: 9795, char_end: 9796, byte_start: 9795, byte_end: 9796 }: ,
Token { kind: Name(Identifier), char_start: 9805, char_end: 9827, byte_start: 9805, byte_end: 9827 }: chooser_selected_index
Token { kind: Punctuator(Comma), char_start: 9827, char_end: 9828, byte_start: 9827, byte_end: 9828 }: ,
Token { kind: Name(Keyword(False)), char_start: 9837, char_end: 9842, byte_start: 9837, byte_end: 9842 }: false
Token { kind: Punctuator(Rparen), char_start: 9849, char_end: 9850, byte_start: 9849, byte_end: 9850 }: )
Token { kind: Punctuator(Lbracket), char_start: 9850, char_end: 9851, byte_start: 9850, byte_end: 9851 }: [
Token { kind: Literal(Number), char_start: 9851, char_end: 9852, byte_start: 9851, byte_end: 9852 }: 1
Token { kind: Punctuator(Rbracket), char_start: 9852, char_end: 9853, byte_start: 9852, byte_end: 9853 }: ]
Token { kind: Comment(LineComment), char_start: 9861, char_end: 9914, byte_start: 9861, byte_end: 9914 }: -- Strip leading "> " or "  ", and append extension.

Token { kind: Name(Keyword(Return)), char_start: 9920, char_end: 9926, byte_start: 9920, byte_end: 9926 }: return
Token { kind: Name(Identifier), char_start: 9927, char_end: 9930, byte_start: 9927, byte_end: 9930 }: vim
Token { kind: Punctuator(Dot), char_start: 9930, char_end: 9931, byte_start: 9930, byte_end: 9931 }: .
Token { kind: Name(Identifier), char_start: 9931, char_end: 9935, byte_start: 9931, byte_end: 9935 }: trim
Token { kind: Punctuator(Lparen), char_start: 9935, char_end: 9936, byte_start: 9935, byte_end: 9936 }: (
Token { kind: Name(Identifier), char_start: 9936, char_end: 9940, byte_start: 9936, byte_end: 9940 }: line
Token { kind: Punctuator(Colon), char_start: 9940, char_end: 9941, byte_start: 9940, byte_end: 9941 }: :
Token { kind: Name(Identifier), char_start: 9941, char_end: 9944, byte_start: 9941, byte_end: 9944 }: sub
Token { kind: Punctuator(Lparen), char_start: 9944, char_end: 9945, byte_start: 9944, byte_end: 9945 }: (
Token { kind: Literal(Number), char_start: 9945, char_end: 9946, byte_start: 9945, byte_end: 9946 }: 3
Token { kind: Punctuator(Comma), char_start: 9946, char_end: 9947, byte_start: 9946, byte_end: 9947 }: ,
Token { kind: Name(Identifier), char_start: 9948, char_end: 9952, byte_start: 9948, byte_end: 9952 }: line
Token { kind: Punctuator(Colon), char_start: 9952, char_end: 9953, byte_start: 9952, byte_end: 9953 }: :
Token { kind: Name(Identifier), char_start: 9953, char_end: 9956, byte_start: 9953, byte_end: 9956 }: len
Token { kind: Punctuator(Lparen), char_start: 9956, char_end: 9957, byte_start: 9956, byte_end: 9957 }: (
Token { kind: Punctuator(Rparen), char_start: 9957, char_end: 9958, byte_start: 9957, byte_end: 9958 }: )
Token { kind: Punctuator(Rparen), char_start: 9958, char_end: 9959, byte_start: 9958, byte_end: 9959 }: )
Token { kind: Punctuator(Rparen), char_start: 9959, char_end: 9960, byte_start: 9959, byte_end: 9960 }: )
Token { kind: Op(Concat), char_start: 9961, char_end: 9963, byte_start: 9961, byte_end: 9963 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 9964, char_end: 9969, byte_start: 9964, byte_end: 9969 }: '.md'
Token { kind: Name(Keyword(End)), char_start: 9974, char_end: 9977, byte_start: 9974, byte_end: 9977 }: end
Token { kind: Name(Keyword(End)), char_start: 9980, char_end: 9983, byte_start: 9980, byte_end: 9983 }: end
Token { kind: Punctuator(Comma), char_start: 9983, char_end: 9984, byte_start: 9983, byte_end: 9984 }: ,
Token { kind: Name(Identifier), char_start: 9988, char_end: 9991, byte_start: 9988, byte_end: 9991 }: git
Token { kind: Op(Assign), char_start: 9992, char_end: 9993, byte_start: 9992, byte_end: 9993 }: =
Token { kind: Name(Keyword(Function)), char_start: 9994, char_end: 10002, byte_start: 9994, byte_end: 10002 }: function
Token { kind: Punctuator(Lparen), char_start: 10002, char_end: 10003, byte_start: 10002, byte_end: 10003 }: (
Token { kind: Name(Identifier), char_start: 10003, char_end: 10012, byte_start: 10003, byte_end: 10012 }: directory
Token { kind: Punctuator(Comma), char_start: 10012, char_end: 10013, byte_start: 10012, byte_end: 10013 }: ,
Token { kind: Op(Vararg), char_start: 10014, char_end: 10017, byte_start: 10014, byte_end: 10017 }: ...
Token { kind: Punctuator(Rparen), char_start: 10017, char_end: 10018, byte_start: 10017, byte_end: 10018 }: )
Token { kind: Name(Keyword(If)), char_start: 10023, char_end: 10025, byte_start: 10023, byte_end: 10025 }: if
Token { kind: Name(Identifier), char_start: 10026, char_end: 10029, byte_start: 10026, byte_end: 10029 }: vim
Token { kind: Punctuator(Dot), char_start: 10029, char_end: 10030, byte_start: 10029, byte_end: 10030 }: .
Token { kind: Name(Identifier), char_start: 10030, char_end: 10032, byte_start: 10030, byte_end: 10032 }: fn
Token { kind: Punctuator(Dot), char_start: 10032, char_end: 10033, byte_start: 10032, byte_end: 10033 }: .
Token { kind: Name(Identifier), char_start: 10033, char_end: 10044, byte_start: 10033, byte_end: 10044 }: isdirectory
Token { kind: Punctuator(Lparen), char_start: 10044, char_end: 10045, byte_start: 10044, byte_end: 10045 }: (
Token { kind: Name(Identifier), char_start: 10045, char_end: 10054, byte_start: 10045, byte_end: 10054 }: directory
Token { kind: Punctuator(Rparen), char_start: 10054, char_end: 10055, byte_start: 10054, byte_end: 10055 }: )
Token { kind: Op(Eq), char_start: 10056, char_end: 10058, byte_start: 10056, byte_end: 10058 }: ==
Token { kind: Literal(Number), char_start: 10059, char_end: 10060, byte_start: 10059, byte_end: 10060 }: 0
Token { kind: Name(Keyword(Then)), char_start: 10061, char_end: 10065, byte_start: 10061, byte_end: 10065 }: then
Token { kind: Name(Identifier), char_start: 10072, char_end: 10077, byte_start: 10072, byte_end: 10077 }: error
Token { kind: Punctuator(Lparen), char_start: 10077, char_end: 10078, byte_start: 10077, byte_end: 10078 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 10078, char_end: 10097, byte_start: 10078, byte_end: 10097 }: 'Not a directory: '
Token { kind: Op(Concat), char_start: 10098, char_end: 10100, byte_start: 10098, byte_end: 10100 }: ..
Token { kind: Name(Identifier), char_start: 10101, char_end: 10110, byte_start: 10101, byte_end: 10110 }: directory
Token { kind: Punctuator(Rparen), char_start: 10110, char_end: 10111, byte_start: 10110, byte_end: 10111 }: )
Token { kind: Name(Keyword(End)), char_start: 10116, char_end: 10119, byte_start: 10116, byte_end: 10119 }: end
Token { kind: Name(Keyword(If)), char_start: 10124, char_end: 10126, byte_start: 10124, byte_end: 10126 }: if
Token { kind: Name(Identifier), char_start: 10127, char_end: 10130, byte_start: 10127, byte_end: 10130 }: vim
Token { kind: Punctuator(Dot), char_start: 10130, char_end: 10131, byte_start: 10130, byte_end: 10131 }: .
Token { kind: Name(Identifier), char_start: 10131, char_end: 10133, byte_start: 10131, byte_end: 10133 }: fn
Token { kind: Punctuator(Dot), char_start: 10133, char_end: 10134, byte_start: 10133, byte_end: 10134 }: .
Token { kind: Name(Identifier), char_start: 10134, char_end: 10145, byte_start: 10134, byte_end: 10145 }: isdirectory
Token { kind: Punctuator(Lparen), char_start: 10145, char_end: 10146, byte_start: 10145, byte_end: 10146 }: (
Token { kind: Name(Identifier), char_start: 10146, char_end: 10155, byte_start: 10146, byte_end: 10155 }: directory
Token { kind: Op(Concat), char_start: 10156, char_end: 10158, byte_start: 10156, byte_end: 10158 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 10159, char_end: 10166, byte_start: 10159, byte_end: 10166 }: '/.git'
Token { kind: Punctuator(Rparen), char_start: 10166, char_end: 10167, byte_start: 10166, byte_end: 10167 }: )
Token { kind: Op(Eq), char_start: 10168, char_end: 10170, byte_start: 10168, byte_end: 10170 }: ==
Token { kind: Literal(Number), char_start: 10171, char_end: 10172, byte_start: 10171, byte_end: 10172 }: 0
Token { kind: Name(Keyword(Then)), char_start: 10173, char_end: 10177, byte_start: 10173, byte_end: 10177 }: then
Token { kind: Comment(LineComment), char_start: 10184, char_end: 10256, byte_start: 10184, byte_end: 10256 }: -- TODO: decide whether it's right to do this unconditionally like this

Token { kind: Name(Identifier), char_start: 10262, char_end: 10268, byte_start: 10262, byte_end: 10268 }: corpus
Token { kind: Punctuator(Dot), char_start: 10268, char_end: 10269, byte_start: 10268, byte_end: 10269 }: .
Token { kind: Name(Identifier), char_start: 10269, char_end: 10272, byte_start: 10269, byte_end: 10272 }: run
Token { kind: Punctuator(Lparen), char_start: 10272, char_end: 10273, byte_start: 10272, byte_end: 10273 }: (
Token { kind: Punctuator(Lcurly), char_start: 10273, char_end: 10274, byte_start: 10273, byte_end: 10274 }: {
Token { kind: Literal(Str(SingleQuoted)), char_start: 10274, char_end: 10279, byte_start: 10274, byte_end: 10279 }: 'git'
Token { kind: Punctuator(Comma), char_start: 10279, char_end: 10280, byte_start: 10279, byte_end: 10280 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 10281, char_end: 10285, byte_start: 10281, byte_end: 10285 }: '-C'
Token { kind: Punctuator(Comma), char_start: 10285, char_end: 10286, byte_start: 10285, byte_end: 10286 }: ,
Token { kind: Name(Identifier), char_start: 10287, char_end: 10296, byte_start: 10287, byte_end: 10296 }: directory
Token { kind: Punctuator(Comma), char_start: 10296, char_end: 10297, byte_start: 10296, byte_end: 10297 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 10298, char_end: 10304, byte_start: 10298, byte_end: 10304 }: 'init'
Token { kind: Punctuator(Rcurly), char_start: 10304, char_end: 10305, byte_start: 10304, byte_end: 10305 }: }
Token { kind: Punctuator(Rparen), char_start: 10305, char_end: 10306, byte_start: 10305, byte_end: 10306 }: )
Token { kind: Name(Keyword(End)), char_start: 10311, char_end: 10314, byte_start: 10311, byte_end: 10314 }: end
Token { kind: Name(Keyword(Local)), char_start: 10320, char_end: 10325, byte_start: 10320, byte_end: 10325 }: local
Token { kind: Name(Identifier), char_start: 10326, char_end: 10333, byte_start: 10326, byte_end: 10333 }: command
Token { kind: Op(Assign), char_start: 10334, char_end: 10335, byte_start: 10334, byte_end: 10335 }: =
Token { kind: Name(Identifier), char_start: 10336, char_end: 10340, byte_start: 10336, byte_end: 10340 }: util
Token { kind: Punctuator(Dot), char_start: 10340, char_end: 10341, byte_start: 10340, byte_end: 10341 }: .
Token { kind: Name(Identifier), char_start: 10341, char_end: 10345, byte_start: 10341, byte_end: 10345 }: list
Token { kind: Punctuator(Dot), char_start: 10345, char_end: 10346, byte_start: 10345, byte_end: 10346 }: .
Token { kind: Name(Identifier), char_start: 10346, char_end: 10352, byte_start: 10346, byte_end: 10352 }: concat
Token { kind: Punctuator(Lparen), char_start: 10352, char_end: 10353, byte_start: 10352, byte_end: 10353 }: (
Token { kind: Punctuator(Lcurly), char_start: 10353, char_end: 10354, byte_start: 10353, byte_end: 10354 }: {
Token { kind: Literal(Str(SingleQuoted)), char_start: 10354, char_end: 10359, byte_start: 10354, byte_end: 10359 }: 'git'
Token { kind: Punctuator(Comma), char_start: 10359, char_end: 10360, byte_start: 10359, byte_end: 10360 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 10361, char_end: 10365, byte_start: 10361, byte_end: 10365 }: '-C'
Token { kind: Punctuator(Comma), char_start: 10365, char_end: 10366, byte_start: 10365, byte_end: 10366 }: ,
Token { kind: Name(Identifier), char_start: 10367, char_end: 10376, byte_start: 10367, byte_end: 10376 }: directory
Token { kind: Punctuator(Rcurly), char_start: 10376, char_end: 10377, byte_start: 10376, byte_end: 10377 }: }
Token { kind: Punctuator(Comma), char_start: 10377, char_end: 10378, byte_start: 10377, byte_end: 10378 }: ,
Token { kind: Punctuator(Lcurly), char_start: 10379, char_end: 10380, byte_start: 10379, byte_end: 10380 }: {
Token { kind: Op(Vararg), char_start: 10380, char_end: 10383, byte_start: 10380, byte_end: 10383 }: ...
Token { kind: Punctuator(Rcurly), char_start: 10383, char_end: 10384, byte_start: 10383, byte_end: 10384 }: }
Token { kind: Punctuator(Rparen), char_start: 10384, char_end: 10385, byte_start: 10384, byte_end: 10385 }: )
Token { kind: Name(Keyword(Return)), char_start: 10390, char_end: 10396, byte_start: 10390, byte_end: 10396 }: return
Token { kind: Name(Identifier), char_start: 10397, char_end: 10403, byte_start: 10397, byte_end: 10403 }: corpus
Token { kind: Punctuator(Dot), char_start: 10403, char_end: 10404, byte_start: 10403, byte_end: 10404 }: .
Token { kind: Name(Identifier), char_start: 10404, char_end: 10407, byte_start: 10404, byte_end: 10407 }: run
Token { kind: Punctuator(Lparen), char_start: 10407, char_end: 10408, byte_start: 10407, byte_end: 10408 }: (
Token { kind: Name(Identifier), char_start: 10408, char_end: 10415, byte_start: 10408, byte_end: 10415 }: command
Token { kind: Punctuator(Rparen), char_start: 10415, char_end: 10416, byte_start: 10415, byte_end: 10416 }: )
Token { kind: Name(Keyword(End)), char_start: 10419, char_end: 10422, byte_start: 10419, byte_end: 10422 }: end
Token { kind: Punctuator(Comma), char_start: 10422, char_end: 10423, byte_start: 10422, byte_end: 10423 }: ,
Token { kind: Name(Identifier), char_start: 10427, char_end: 10446, byte_start: 10427, byte_end: 10446 }: highlight_selection
Token { kind: Op(Assign), char_start: 10447, char_end: 10448, byte_start: 10447, byte_end: 10448 }: =
Token { kind: Name(Keyword(Function)), char_start: 10449, char_end: 10457, byte_start: 10449, byte_end: 10457 }: function
Token { kind: Punctuator(Lparen), char_start: 10458, char_end: 10459, byte_start: 10458, byte_end: 10459 }: (
Token { kind: Punctuator(Rparen), char_start: 10459, char_end: 10460, byte_start: 10459, byte_end: 10460 }: )
Token { kind: Name(Keyword(If)), char_start: 10465, char_end: 10467, byte_start: 10465, byte_end: 10467 }: if
Token { kind: Name(Identifier), char_start: 10468, char_end: 10490, byte_start: 10468, byte_end: 10490 }: chooser_selected_index
Token { kind: Op(Ne), char_start: 10491, char_end: 10493, byte_start: 10491, byte_end: 10493 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 10494, char_end: 10497, byte_start: 10494, byte_end: 10497 }: nil
Token { kind: Name(Keyword(Then)), char_start: 10498, char_end: 10502, byte_start: 10498, byte_end: 10502 }: then
Token { kind: Name(Identifier), char_start: 10509, char_end: 10512, byte_start: 10509, byte_end: 10512 }: vim
Token { kind: Punctuator(Dot), char_start: 10512, char_end: 10513, byte_start: 10512, byte_end: 10513 }: .
Token { kind: Name(Identifier), char_start: 10513, char_end: 10516, byte_start: 10513, byte_end: 10516 }: api
Token { kind: Punctuator(Dot), char_start: 10516, char_end: 10517, byte_start: 10516, byte_end: 10517 }: .
Token { kind: Name(Identifier), char_start: 10517, char_end: 10536, byte_start: 10517, byte_end: 10536 }: nvim_win_set_cursor
Token { kind: Punctuator(Lparen), char_start: 10536, char_end: 10537, byte_start: 10536, byte_end: 10537 }: (
Token { kind: Name(Identifier), char_start: 10537, char_end: 10551, byte_start: 10537, byte_end: 10551 }: chooser_window
Token { kind: Punctuator(Comma), char_start: 10551, char_end: 10552, byte_start: 10551, byte_end: 10552 }: ,
Token { kind: Punctuator(Lcurly), char_start: 10553, char_end: 10554, byte_start: 10553, byte_end: 10554 }: {
Token { kind: Name(Identifier), char_start: 10554, char_end: 10576, byte_start: 10554, byte_end: 10576 }: chooser_selected_index
Token { kind: Punctuator(Comma), char_start: 10576, char_end: 10577, byte_start: 10576, byte_end: 10577 }: ,
Token { kind: Literal(Number), char_start: 10578, char_end: 10579, byte_start: 10578, byte_end: 10579 }: 0
Token { kind: Punctuator(Rcurly), char_start: 10579, char_end: 10580, byte_start: 10579, byte_end: 10580 }: }
Token { kind: Punctuator(Rparen), char_start: 10580, char_end: 10581, byte_start: 10580, byte_end: 10581 }: )
Token { kind: Name(Identifier), char_start: 10588, char_end: 10591, byte_start: 10588, byte_end: 10591 }: vim
Token { kind: Punctuator(Dot), char_start: 10591, char_end: 10592, byte_start: 10591, byte_end: 10592 }: .
Token { kind: Name(Identifier), char_start: 10592, char_end: 10595, byte_start: 10592, byte_end: 10595 }: api
Token { kind: Punctuator(Dot), char_start: 10595, char_end: 10596, byte_start: 10595, byte_end: 10596 }: .
Token { kind: Name(Identifier), char_start: 10596, char_end: 10620, byte_start: 10596, byte_end: 10620 }: nvim_buf_clear_namespace
Token { kind: Punctuator(Lparen), char_start: 10620, char_end: 10621, byte_start: 10620, byte_end: 10621 }: (
Token { kind: Name(Identifier), char_start: 10630, char_end: 10644, byte_start: 10630, byte_end: 10644 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 10644, char_end: 10645, byte_start: 10644, byte_end: 10645 }: ,
Token { kind: Name(Identifier), char_start: 10654, char_end: 10671, byte_start: 10654, byte_end: 10671 }: chooser_namespace
Token { kind: Punctuator(Comma), char_start: 10671, char_end: 10672, byte_start: 10671, byte_end: 10672 }: ,
Token { kind: Literal(Number), char_start: 10681, char_end: 10682, byte_start: 10681, byte_end: 10682 }: 0
Token { kind: Punctuator(Comma), char_start: 10682, char_end: 10683, byte_start: 10682, byte_end: 10683 }: ,
Token { kind: Comment(LineComment), char_start: 10684, char_end: 10731, byte_start: 10684, byte_end: 10731 }: -- TODO only clear whole buffer when resetting

Token { kind: Op(Minus), char_start: 10739, char_end: 10740, byte_start: 10739, byte_end: 10740 }: -
Token { kind: Literal(Number), char_start: 10740, char_end: 10741, byte_start: 10740, byte_end: 10741 }: 1
Token { kind: Comment(LineComment), char_start: 10742, char_end: 10784, byte_start: 10742, byte_end: 10784 }: -- (just clearing previous would suffice)

Token { kind: Punctuator(Rparen), char_start: 10790, char_end: 10791, byte_start: 10790, byte_end: 10791 }: )
Token { kind: Name(Identifier), char_start: 10798, char_end: 10801, byte_start: 10798, byte_end: 10801 }: vim
Token { kind: Punctuator(Dot), char_start: 10801, char_end: 10802, byte_start: 10801, byte_end: 10802 }: .
Token { kind: Name(Identifier), char_start: 10802, char_end: 10805, byte_start: 10802, byte_end: 10805 }: api
Token { kind: Punctuator(Dot), char_start: 10805, char_end: 10806, byte_start: 10805, byte_end: 10806 }: .
Token { kind: Name(Identifier), char_start: 10806, char_end: 10828, byte_start: 10806, byte_end: 10828 }: nvim_buf_add_highlight
Token { kind: Punctuator(Lparen), char_start: 10828, char_end: 10829, byte_start: 10828, byte_end: 10829 }: (
Token { kind: Name(Identifier), char_start: 10838, char_end: 10852, byte_start: 10838, byte_end: 10852 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 10852, char_end: 10853, byte_start: 10852, byte_end: 10853 }: ,
Token { kind: Name(Identifier), char_start: 10862, char_end: 10879, byte_start: 10862, byte_end: 10879 }: chooser_namespace
Token { kind: Punctuator(Comma), char_start: 10879, char_end: 10880, byte_start: 10879, byte_end: 10880 }: ,
Token { kind: Name(Identifier), char_start: 10889, char_end: 10892, byte_start: 10889, byte_end: 10892 }: vim
Token { kind: Punctuator(Dot), char_start: 10892, char_end: 10893, byte_start: 10892, byte_end: 10893 }: .
Token { kind: Name(Identifier), char_start: 10893, char_end: 10894, byte_start: 10893, byte_end: 10894 }: g
Token { kind: Punctuator(Dot), char_start: 10894, char_end: 10895, byte_start: 10894, byte_end: 10895 }: .
Token { kind: Name(Identifier), char_start: 10895, char_end: 10926, byte_start: 10895, byte_end: 10926 }: CorpusChooserSelectionHighlight
Token { kind: Name(Keyword(Or)), char_start: 10927, char_end: 10929, byte_start: 10927, byte_end: 10929 }: or
Token { kind: Literal(Str(SingleQuoted)), char_start: 10930, char_end: 10940, byte_start: 10930, byte_end: 10940 }: 'PMenuSel'
Token { kind: Punctuator(Comma), char_start: 10940, char_end: 10941, byte_start: 10940, byte_end: 10941 }: ,
Token { kind: Name(Identifier), char_start: 10950, char_end: 10972, byte_start: 10950, byte_end: 10972 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 10973, char_end: 10974, byte_start: 10973, byte_end: 10974 }: -
Token { kind: Literal(Number), char_start: 10975, char_end: 10976, byte_start: 10975, byte_end: 10976 }: 1
Token { kind: Punctuator(Comma), char_start: 10976, char_end: 10977, byte_start: 10976, byte_end: 10977 }: ,
Token { kind: Comment(LineComment), char_start: 10978, char_end: 10998, byte_start: 10978, byte_end: 10998 }: -- line (0-indexed)

Token { kind: Literal(Number), char_start: 11006, char_end: 11007, byte_start: 11006, byte_end: 11007 }: 0
Token { kind: Punctuator(Comma), char_start: 11007, char_end: 11008, byte_start: 11007, byte_end: 11008 }: ,
Token { kind: Comment(LineComment), char_start: 11009, char_end: 11022, byte_start: 11009, byte_end: 11022 }: -- col_start

Token { kind: Op(Minus), char_start: 11030, char_end: 11031, byte_start: 11030, byte_end: 11031 }: -
Token { kind: Literal(Number), char_start: 11031, char_end: 11032, byte_start: 11031, byte_end: 11032 }: 1
Token { kind: Comment(LineComment), char_start: 11033, char_end: 11058, byte_start: 11033, byte_end: 11058 }: -- col_end (end-of-line)

Token { kind: Punctuator(Rparen), char_start: 11064, char_end: 11065, byte_start: 11064, byte_end: 11065 }: )
Token { kind: Name(Keyword(End)), char_start: 11070, char_end: 11073, byte_start: 11070, byte_end: 11073 }: end
Token { kind: Name(Identifier), char_start: 11078, char_end: 11084, byte_start: 11078, byte_end: 11084 }: corpus
Token { kind: Punctuator(Dot), char_start: 11084, char_end: 11085, byte_start: 11084, byte_end: 11085 }: .
Token { kind: Name(Identifier), char_start: 11085, char_end: 11092, byte_start: 11085, byte_end: 11092 }: preview
Token { kind: Punctuator(Lparen), char_start: 11092, char_end: 11093, byte_start: 11092, byte_end: 11093 }: (
Token { kind: Punctuator(Rparen), char_start: 11093, char_end: 11094, byte_start: 11093, byte_end: 11094 }: )
Token { kind: Name(Keyword(End)), char_start: 11097, char_end: 11100, byte_start: 11097, byte_end: 11100 }: end
Token { kind: Punctuator(Comma), char_start: 11100, char_end: 11101, byte_start: 11100, byte_end: 11101 }: ,
Token { kind: Name(Identifier), char_start: 11105, char_end: 11117, byte_start: 11105, byte_end: 11117 }: in_directory
Token { kind: Op(Assign), char_start: 11118, char_end: 11119, byte_start: 11118, byte_end: 11119 }: =
Token { kind: Name(Keyword(Function)), char_start: 11120, char_end: 11128, byte_start: 11120, byte_end: 11128 }: function
Token { kind: Punctuator(Lparen), char_start: 11128, char_end: 11129, byte_start: 11128, byte_end: 11129 }: (
Token { kind: Punctuator(Rparen), char_start: 11129, char_end: 11130, byte_start: 11129, byte_end: 11130 }: )
Token { kind: Name(Keyword(Local)), char_start: 11135, char_end: 11140, byte_start: 11135, byte_end: 11140 }: local
Token { kind: Name(Identifier), char_start: 11141, char_end: 11152, byte_start: 11141, byte_end: 11152 }: directories
Token { kind: Op(Assign), char_start: 11153, char_end: 11154, byte_start: 11153, byte_end: 11154 }: =
Token { kind: Name(Identifier), char_start: 11155, char_end: 11161, byte_start: 11155, byte_end: 11161 }: corpus
Token { kind: Punctuator(Dot), char_start: 11161, char_end: 11162, byte_start: 11161, byte_end: 11162 }: .
Token { kind: Name(Identifier), char_start: 11162, char_end: 11173, byte_start: 11162, byte_end: 11173 }: directories
Token { kind: Punctuator(Lparen), char_start: 11173, char_end: 11174, byte_start: 11173, byte_end: 11174 }: (
Token { kind: Punctuator(Rparen), char_start: 11174, char_end: 11175, byte_start: 11174, byte_end: 11175 }: )
Token { kind: Name(Keyword(Local)), char_start: 11180, char_end: 11185, byte_start: 11180, byte_end: 11185 }: local
Token { kind: Name(Identifier), char_start: 11186, char_end: 11189, byte_start: 11186, byte_end: 11189 }: cwd
Token { kind: Op(Assign), char_start: 11190, char_end: 11191, byte_start: 11190, byte_end: 11191 }: =
Token { kind: Name(Identifier), char_start: 11192, char_end: 11195, byte_start: 11192, byte_end: 11195 }: vim
Token { kind: Punctuator(Dot), char_start: 11195, char_end: 11196, byte_start: 11195, byte_end: 11196 }: .
Token { kind: Name(Identifier), char_start: 11196, char_end: 11198, byte_start: 11196, byte_end: 11198 }: fn
Token { kind: Punctuator(Dot), char_start: 11198, char_end: 11199, byte_start: 11198, byte_end: 11199 }: .
Token { kind: Name(Identifier), char_start: 11199, char_end: 11205, byte_start: 11199, byte_end: 11205 }: getcwd
Token { kind: Punctuator(Lparen), char_start: 11205, char_end: 11206, byte_start: 11205, byte_end: 11206 }: (
Token { kind: Punctuator(Rparen), char_start: 11206, char_end: 11207, byte_start: 11206, byte_end: 11207 }: )
Token { kind: Name(Keyword(Return)), char_start: 11212, char_end: 11218, byte_start: 11212, byte_end: 11218 }: return
Token { kind: Name(Identifier), char_start: 11219, char_end: 11222, byte_start: 11219, byte_end: 11222 }: vim
Token { kind: Punctuator(Dot), char_start: 11222, char_end: 11223, byte_start: 11222, byte_end: 11223 }: .
Token { kind: Name(Identifier), char_start: 11223, char_end: 11235, byte_start: 11223, byte_end: 11235 }: tbl_contains
Token { kind: Punctuator(Lparen), char_start: 11235, char_end: 11236, byte_start: 11235, byte_end: 11236 }: (
Token { kind: Name(Identifier), char_start: 11236, char_end: 11247, byte_start: 11236, byte_end: 11247 }: directories
Token { kind: Punctuator(Comma), char_start: 11247, char_end: 11248, byte_start: 11247, byte_end: 11248 }: ,
Token { kind: Name(Identifier), char_start: 11249, char_end: 11252, byte_start: 11249, byte_end: 11252 }: cwd
Token { kind: Punctuator(Rparen), char_start: 11252, char_end: 11253, byte_start: 11252, byte_end: 11253 }: )
Token { kind: Name(Keyword(End)), char_start: 11256, char_end: 11259, byte_start: 11256, byte_end: 11259 }: end
Token { kind: Punctuator(Comma), char_start: 11259, char_end: 11260, byte_start: 11259, byte_end: 11260 }: ,
Token { kind: Comment(LineComment), char_start: 11264, char_end: 11301, byte_start: 11264, byte_end: 11301 }: -- List all documents in the corpus.

Token { kind: Name(Identifier), char_start: 11303, char_end: 11307, byte_start: 11303, byte_end: 11307 }: list
Token { kind: Op(Assign), char_start: 11308, char_end: 11309, byte_start: 11308, byte_end: 11309 }: =
Token { kind: Name(Keyword(Function)), char_start: 11310, char_end: 11318, byte_start: 11310, byte_end: 11318 }: function
Token { kind: Punctuator(Lparen), char_start: 11318, char_end: 11319, byte_start: 11318, byte_end: 11319 }: (
Token { kind: Name(Identifier), char_start: 11319, char_end: 11327, byte_start: 11319, byte_end: 11327 }: callback
Token { kind: Punctuator(Rparen), char_start: 11327, char_end: 11328, byte_start: 11327, byte_end: 11328 }: )
Token { kind: Name(Keyword(If)), char_start: 11333, char_end: 11335, byte_start: 11333, byte_end: 11335 }: if
Token { kind: Name(Identifier), char_start: 11336, char_end: 11350, byte_start: 11336, byte_end: 11350 }: current_search
Token { kind: Op(Ne), char_start: 11351, char_end: 11353, byte_start: 11351, byte_end: 11353 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 11354, char_end: 11357, byte_start: 11354, byte_end: 11357 }: nil
Token { kind: Name(Keyword(Then)), char_start: 11358, char_end: 11362, byte_start: 11358, byte_end: 11362 }: then
Token { kind: Name(Identifier), char_start: 11369, char_end: 11383, byte_start: 11369, byte_end: 11383 }: current_search
Token { kind: Punctuator(Dot), char_start: 11383, char_end: 11384, byte_start: 11383, byte_end: 11384 }: .
Token { kind: Name(Identifier), char_start: 11384, char_end: 11390, byte_start: 11384, byte_end: 11390 }: cancel
Token { kind: Punctuator(Lparen), char_start: 11390, char_end: 11391, byte_start: 11390, byte_end: 11391 }: (
Token { kind: Punctuator(Rparen), char_start: 11391, char_end: 11392, byte_start: 11391, byte_end: 11392 }: )
Token { kind: Name(Keyword(End)), char_start: 11397, char_end: 11400, byte_start: 11397, byte_end: 11400 }: end
Token { kind: Name(Keyword(Local)), char_start: 11406, char_end: 11411, byte_start: 11406, byte_end: 11411 }: local
Token { kind: Name(Identifier), char_start: 11412, char_end: 11421, byte_start: 11412, byte_end: 11421 }: directory
Token { kind: Op(Assign), char_start: 11422, char_end: 11423, byte_start: 11422, byte_end: 11423 }: =
Token { kind: Name(Identifier), char_start: 11424, char_end: 11430, byte_start: 11424, byte_end: 11430 }: corpus
Token { kind: Punctuator(Dot), char_start: 11430, char_end: 11431, byte_start: 11430, byte_end: 11431 }: .
Token { kind: Name(Identifier), char_start: 11431, char_end: 11440, byte_start: 11431, byte_end: 11440 }: directory
Token { kind: Punctuator(Lparen), char_start: 11440, char_end: 11441, byte_start: 11440, byte_end: 11441 }: (
Token { kind: Punctuator(Rparen), char_start: 11441, char_end: 11442, byte_start: 11441, byte_end: 11442 }: )
Token { kind: Name(Keyword(If)), char_start: 11448, char_end: 11450, byte_start: 11448, byte_end: 11450 }: if
Token { kind: Name(Identifier), char_start: 11451, char_end: 11460, byte_start: 11451, byte_end: 11460 }: directory
Token { kind: Op(Eq), char_start: 11461, char_end: 11463, byte_start: 11461, byte_end: 11463 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 11464, char_end: 11467, byte_start: 11464, byte_end: 11467 }: nil
Token { kind: Name(Keyword(Then)), char_start: 11468, char_end: 11472, byte_start: 11468, byte_end: 11472 }: then
Token { kind: Name(Identifier), char_start: 11479, char_end: 11487, byte_start: 11479, byte_end: 11487 }: callback
Token { kind: Punctuator(Lparen), char_start: 11487, char_end: 11488, byte_start: 11487, byte_end: 11488 }: (
Token { kind: Punctuator(Lcurly), char_start: 11488, char_end: 11489, byte_start: 11488, byte_end: 11489 }: {
Token { kind: Punctuator(Rcurly), char_start: 11489, char_end: 11490, byte_start: 11489, byte_end: 11490 }: }
Token { kind: Punctuator(Rparen), char_start: 11490, char_end: 11491, byte_start: 11490, byte_end: 11491 }: )
Token { kind: Name(Keyword(Else)), char_start: 11496, char_end: 11500, byte_start: 11496, byte_end: 11500 }: else
Token { kind: Comment(LineComment), char_start: 11507, char_end: 11579, byte_start: 11507, byte_end: 11579 }: -- Using util.run here just for consistency, although the truth is this

Token { kind: Comment(LineComment), char_start: 11585, char_end: 11625, byte_start: 11585, byte_end: 11625 }: -- one is not going to be a bottleneck.

Token { kind: Name(Keyword(Local)), char_start: 11631, char_end: 11636, byte_start: 11631, byte_end: 11636 }: local
Token { kind: Name(Identifier), char_start: 11637, char_end: 11641, byte_start: 11637, byte_end: 11641 }: args
Token { kind: Op(Assign), char_start: 11642, char_end: 11643, byte_start: 11642, byte_end: 11643 }: =
Token { kind: Punctuator(Lcurly), char_start: 11644, char_end: 11645, byte_start: 11644, byte_end: 11645 }: {
Token { kind: Literal(Str(SingleQuoted)), char_start: 11654, char_end: 11664, byte_start: 11654, byte_end: 11664 }: 'ls-files'
Token { kind: Punctuator(Comma), char_start: 11664, char_end: 11665, byte_start: 11664, byte_end: 11665 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 11674, char_end: 11684, byte_start: 11674, byte_end: 11684 }: '--cached'
Token { kind: Punctuator(Comma), char_start: 11684, char_end: 11685, byte_start: 11684, byte_end: 11685 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 11694, char_end: 11704, byte_start: 11694, byte_end: 11704 }: '--others'
Token { kind: Punctuator(Comma), char_start: 11704, char_end: 11705, byte_start: 11704, byte_end: 11705 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 11714, char_end: 11718, byte_start: 11714, byte_end: 11718 }: '-z'
Token { kind: Punctuator(Comma), char_start: 11718, char_end: 11719, byte_start: 11718, byte_end: 11719 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 11728, char_end: 11732, byte_start: 11728, byte_end: 11732 }: '--'
Token { kind: Punctuator(Comma), char_start: 11732, char_end: 11733, byte_start: 11732, byte_end: 11733 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 11742, char_end: 11748, byte_start: 11742, byte_end: 11748 }: '*.md'
Token { kind: Punctuator(Rcurly), char_start: 11755, char_end: 11756, byte_start: 11755, byte_end: 11756 }: }
Token { kind: Name(Keyword(Local)), char_start: 11764, char_end: 11769, byte_start: 11764, byte_end: 11769 }: local
Token { kind: Name(Identifier), char_start: 11770, char_end: 11776, byte_start: 11770, byte_end: 11776 }: stdout
Token { kind: Op(Assign), char_start: 11777, char_end: 11778, byte_start: 11777, byte_end: 11778 }: =
Token { kind: Punctuator(Lcurly), char_start: 11779, char_end: 11780, byte_start: 11779, byte_end: 11780 }: {
Token { kind: Punctuator(Rcurly), char_start: 11780, char_end: 11781, byte_start: 11780, byte_end: 11781 }: }
Token { kind: Name(Identifier), char_start: 11789, char_end: 11803, byte_start: 11789, byte_end: 11803 }: current_search
Token { kind: Op(Assign), char_start: 11804, char_end: 11805, byte_start: 11804, byte_end: 11805 }: =
Token { kind: Name(Identifier), char_start: 11806, char_end: 11810, byte_start: 11806, byte_end: 11810 }: util
Token { kind: Punctuator(Dot), char_start: 11810, char_end: 11811, byte_start: 11810, byte_end: 11811 }: .
Token { kind: Name(Identifier), char_start: 11811, char_end: 11814, byte_start: 11811, byte_end: 11814 }: run
Token { kind: Punctuator(Lparen), char_start: 11814, char_end: 11815, byte_start: 11814, byte_end: 11815 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 11815, char_end: 11820, byte_start: 11815, byte_end: 11820 }: 'git'
Token { kind: Punctuator(Comma), char_start: 11820, char_end: 11821, byte_start: 11820, byte_end: 11821 }: ,
Token { kind: Name(Identifier), char_start: 11822, char_end: 11826, byte_start: 11822, byte_end: 11826 }: args
Token { kind: Punctuator(Comma), char_start: 11826, char_end: 11827, byte_start: 11826, byte_end: 11827 }: ,
Token { kind: Punctuator(Lcurly), char_start: 11828, char_end: 11829, byte_start: 11828, byte_end: 11829 }: {
Token { kind: Name(Identifier), char_start: 11838, char_end: 11841, byte_start: 11838, byte_end: 11841 }: cwd
Token { kind: Op(Assign), char_start: 11842, char_end: 11843, byte_start: 11842, byte_end: 11843 }: =
Token { kind: Name(Identifier), char_start: 11844, char_end: 11853, byte_start: 11844, byte_end: 11853 }: directory
Token { kind: Punctuator(Comma), char_start: 11853, char_end: 11854, byte_start: 11853, byte_end: 11854 }: ,
Token { kind: Name(Identifier), char_start: 11863, char_end: 11870, byte_start: 11863, byte_end: 11870 }: on_exit
Token { kind: Op(Assign), char_start: 11871, char_end: 11872, byte_start: 11871, byte_end: 11872 }: =
Token { kind: Name(Keyword(Function)), char_start: 11873, char_end: 11881, byte_start: 11873, byte_end: 11881 }: function
Token { kind: Punctuator(Lparen), char_start: 11881, char_end: 11882, byte_start: 11881, byte_end: 11882 }: (
Token { kind: Name(Identifier), char_start: 11882, char_end: 11886, byte_start: 11882, byte_end: 11886 }: code
Token { kind: Punctuator(Comma), char_start: 11886, char_end: 11887, byte_start: 11886, byte_end: 11887 }: ,
Token { kind: Name(Identifier), char_start: 11888, char_end: 11894, byte_start: 11888, byte_end: 11894 }: signal
Token { kind: Punctuator(Rparen), char_start: 11894, char_end: 11895, byte_start: 11894, byte_end: 11895 }: )
Token { kind: Name(Keyword(If)), char_start: 11906, char_end: 11908, byte_start: 11906, byte_end: 11908 }: if
Token { kind: Name(Identifier), char_start: 11909, char_end: 11913, byte_start: 11909, byte_end: 11913 }: code
Token { kind: Op(Eq), char_start: 11914, char_end: 11916, byte_start: 11914, byte_end: 11916 }: ==
Token { kind: Literal(Number), char_start: 11917, char_end: 11918, byte_start: 11917, byte_end: 11918 }: 0
Token { kind: Name(Keyword(Then)), char_start: 11919, char_end: 11923, byte_start: 11919, byte_end: 11923 }: then
Token { kind: Name(Keyword(Local)), char_start: 11936, char_end: 11941, byte_start: 11936, byte_end: 11941 }: local
Token { kind: Name(Identifier), char_start: 11942, char_end: 11946, byte_start: 11942, byte_end: 11946 }: list
Token { kind: Op(Assign), char_start: 11947, char_end: 11948, byte_start: 11947, byte_end: 11948 }: =
Token { kind: Punctuator(Lcurly), char_start: 11949, char_end: 11950, byte_start: 11949, byte_end: 11950 }: {
Token { kind: Punctuator(Rcurly), char_start: 11950, char_end: 11951, byte_start: 11950, byte_end: 11951 }: }
Token { kind: Comment(LineComment), char_start: 11964, char_end: 12026, byte_start: 11964, byte_end: 12026 }: -- Take care to ensure we don't cut a filename in half given:

Token { kind: Comment(LineComment), char_start: 12038, char_end: 12041, byte_start: 12038, byte_end: 12041 }: --

Token { kind: Comment(LineComment), char_start: 12053, char_end: 12098, byte_start: 12053, byte_end: 12098 }: --    chunk[1]: first file name\0second file

Token { kind: Comment(LineComment), char_start: 12110, char_end: 12150, byte_start: 12110, byte_end: 12150 }: --    chunk[2]: name\0third file name\0

Token { kind: Comment(LineComment), char_start: 12162, char_end: 12165, byte_start: 12162, byte_end: 12165 }: --

Token { kind: Name(Keyword(Local)), char_start: 12177, char_end: 12182, byte_start: 12177, byte_end: 12182 }: local
Token { kind: Name(Identifier), char_start: 12183, char_end: 12190, byte_start: 12183, byte_end: 12190 }: pending
Token { kind: Op(Assign), char_start: 12191, char_end: 12192, byte_start: 12191, byte_end: 12192 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 12193, char_end: 12195, byte_start: 12193, byte_end: 12195 }: ''
Token { kind: Name(Keyword(For)), char_start: 12208, char_end: 12211, byte_start: 12208, byte_end: 12211 }: for
Token { kind: Name(Identifier), char_start: 12212, char_end: 12213, byte_start: 12212, byte_end: 12213 }: _
Token { kind: Punctuator(Comma), char_start: 12213, char_end: 12214, byte_start: 12213, byte_end: 12214 }: ,
Token { kind: Name(Identifier), char_start: 12215, char_end: 12220, byte_start: 12215, byte_end: 12220 }: chunk
Token { kind: Name(Keyword(In)), char_start: 12221, char_end: 12223, byte_start: 12221, byte_end: 12223 }: in
Token { kind: Name(Identifier), char_start: 12224, char_end: 12230, byte_start: 12224, byte_end: 12230 }: ipairs
Token { kind: Punctuator(Lparen), char_start: 12230, char_end: 12231, byte_start: 12230, byte_end: 12231 }: (
Token { kind: Name(Identifier), char_start: 12231, char_end: 12237, byte_start: 12231, byte_end: 12237 }: stdout
Token { kind: Punctuator(Rparen), char_start: 12237, char_end: 12238, byte_start: 12237, byte_end: 12238 }: )
Token { kind: Name(Keyword(Do)), char_start: 12239, char_end: 12241, byte_start: 12239, byte_end: 12241 }: do
Token { kind: Name(Keyword(For)), char_start: 12256, char_end: 12259, byte_start: 12256, byte_end: 12259 }: for
Token { kind: Name(Identifier), char_start: 12260, char_end: 12265, byte_start: 12260, byte_end: 12265 }: match
Token { kind: Name(Keyword(In)), char_start: 12266, char_end: 12268, byte_start: 12266, byte_end: 12268 }: in
Token { kind: Name(Identifier), char_start: 12269, char_end: 12274, byte_start: 12269, byte_end: 12274 }: chunk
Token { kind: Punctuator(Colon), char_start: 12274, char_end: 12275, byte_start: 12274, byte_end: 12275 }: :
Token { kind: Name(Identifier), char_start: 12275, char_end: 12281, byte_start: 12275, byte_end: 12281 }: gmatch
Token { kind: Punctuator(Lparen), char_start: 12281, char_end: 12282, byte_start: 12281, byte_end: 12282 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 12282, char_end: 12290, byte_start: 12282, byte_end: 12290 }: '%Z*%z?'
Token { kind: Punctuator(Rparen), char_start: 12290, char_end: 12291, byte_start: 12290, byte_end: 12291 }: )
Token { kind: Name(Keyword(Do)), char_start: 12292, char_end: 12294, byte_start: 12292, byte_end: 12294 }: do
Token { kind: Name(Keyword(If)), char_start: 12311, char_end: 12313, byte_start: 12311, byte_end: 12313 }: if
Token { kind: Name(Identifier), char_start: 12314, char_end: 12317, byte_start: 12314, byte_end: 12317 }: vim
Token { kind: Punctuator(Dot), char_start: 12317, char_end: 12318, byte_start: 12317, byte_end: 12318 }: .
Token { kind: Name(Identifier), char_start: 12318, char_end: 12326, byte_start: 12318, byte_end: 12326 }: endswith
Token { kind: Punctuator(Lparen), char_start: 12326, char_end: 12327, byte_start: 12326, byte_end: 12327 }: (
Token { kind: Name(Identifier), char_start: 12327, char_end: 12332, byte_start: 12327, byte_end: 12332 }: match
Token { kind: Punctuator(Comma), char_start: 12332, char_end: 12333, byte_start: 12332, byte_end: 12333 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 12334, char_end: 12338, byte_start: 12334, byte_end: 12338 }: '\0'
Token { kind: Punctuator(Rparen), char_start: 12338, char_end: 12339, byte_start: 12338, byte_end: 12339 }: )
Token { kind: Name(Keyword(Then)), char_start: 12340, char_end: 12344, byte_start: 12340, byte_end: 12344 }: then
Token { kind: Name(Identifier), char_start: 12363, char_end: 12368, byte_start: 12363, byte_end: 12368 }: table
Token { kind: Punctuator(Dot), char_start: 12368, char_end: 12369, byte_start: 12368, byte_end: 12369 }: .
Token { kind: Name(Identifier), char_start: 12369, char_end: 12375, byte_start: 12369, byte_end: 12375 }: insert
Token { kind: Punctuator(Lparen), char_start: 12375, char_end: 12376, byte_start: 12375, byte_end: 12376 }: (
Token { kind: Name(Identifier), char_start: 12376, char_end: 12380, byte_start: 12376, byte_end: 12380 }: list
Token { kind: Punctuator(Comma), char_start: 12380, char_end: 12381, byte_start: 12380, byte_end: 12381 }: ,
Token { kind: Name(Identifier), char_start: 12382, char_end: 12389, byte_start: 12382, byte_end: 12389 }: pending
Token { kind: Op(Concat), char_start: 12390, char_end: 12392, byte_start: 12390, byte_end: 12392 }: ..
Token { kind: Name(Identifier), char_start: 12393, char_end: 12398, byte_start: 12393, byte_end: 12398 }: match
Token { kind: Punctuator(Colon), char_start: 12398, char_end: 12399, byte_start: 12398, byte_end: 12399 }: :
Token { kind: Name(Identifier), char_start: 12399, char_end: 12402, byte_start: 12399, byte_end: 12402 }: sub
Token { kind: Punctuator(Lparen), char_start: 12402, char_end: 12403, byte_start: 12402, byte_end: 12403 }: (
Token { kind: Literal(Number), char_start: 12403, char_end: 12404, byte_start: 12403, byte_end: 12404 }: 1
Token { kind: Punctuator(Comma), char_start: 12404, char_end: 12405, byte_start: 12404, byte_end: 12405 }: ,
Token { kind: Op(Minus), char_start: 12406, char_end: 12407, byte_start: 12406, byte_end: 12407 }: -
Token { kind: Literal(Number), char_start: 12407, char_end: 12408, byte_start: 12407, byte_end: 12408 }: 2
Token { kind: Punctuator(Rparen), char_start: 12408, char_end: 12409, byte_start: 12408, byte_end: 12409 }: )
Token { kind: Punctuator(Rparen), char_start: 12409, char_end: 12410, byte_start: 12409, byte_end: 12410 }: )
Token { kind: Name(Identifier), char_start: 12429, char_end: 12436, byte_start: 12429, byte_end: 12436 }: pending
Token { kind: Op(Assign), char_start: 12437, char_end: 12438, byte_start: 12437, byte_end: 12438 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 12439, char_end: 12441, byte_start: 12439, byte_end: 12441 }: ''
Token { kind: Name(Keyword(Else)), char_start: 12458, char_end: 12462, byte_start: 12458, byte_end: 12462 }: else
Token { kind: Name(Identifier), char_start: 12481, char_end: 12488, byte_start: 12481, byte_end: 12488 }: pending
Token { kind: Op(Assign), char_start: 12489, char_end: 12490, byte_start: 12489, byte_end: 12490 }: =
Token { kind: Name(Identifier), char_start: 12491, char_end: 12498, byte_start: 12491, byte_end: 12498 }: pending
Token { kind: Op(Concat), char_start: 12499, char_end: 12501, byte_start: 12499, byte_end: 12501 }: ..
Token { kind: Name(Identifier), char_start: 12502, char_end: 12507, byte_start: 12502, byte_end: 12507 }: match
Token { kind: Name(Keyword(End)), char_start: 12524, char_end: 12527, byte_start: 12524, byte_end: 12527 }: end
Token { kind: Name(Keyword(End)), char_start: 12542, char_end: 12545, byte_start: 12542, byte_end: 12545 }: end
Token { kind: Name(Keyword(End)), char_start: 12558, char_end: 12561, byte_start: 12558, byte_end: 12561 }: end
Token { kind: Name(Identifier), char_start: 12574, char_end: 12582, byte_start: 12574, byte_end: 12582 }: callback
Token { kind: Punctuator(Lparen), char_start: 12582, char_end: 12583, byte_start: 12582, byte_end: 12583 }: (
Token { kind: Name(Identifier), char_start: 12583, char_end: 12587, byte_start: 12583, byte_end: 12587 }: list
Token { kind: Punctuator(Rparen), char_start: 12587, char_end: 12588, byte_start: 12587, byte_end: 12588 }: )
Token { kind: Name(Keyword(Else)), char_start: 12599, char_end: 12603, byte_start: 12599, byte_end: 12603 }: else
Token { kind: Name(Identifier), char_start: 12616, char_end: 12624, byte_start: 12616, byte_end: 12624 }: callback
Token { kind: Punctuator(Lparen), char_start: 12624, char_end: 12625, byte_start: 12624, byte_end: 12625 }: (
Token { kind: Punctuator(Lcurly), char_start: 12625, char_end: 12626, byte_start: 12625, byte_end: 12626 }: {
Token { kind: Punctuator(Rcurly), char_start: 12626, char_end: 12627, byte_start: 12626, byte_end: 12627 }: }
Token { kind: Punctuator(Rparen), char_start: 12627, char_end: 12628, byte_start: 12627, byte_end: 12628 }: )
Token { kind: Name(Keyword(End)), char_start: 12639, char_end: 12642, byte_start: 12639, byte_end: 12642 }: end
Token { kind: Name(Keyword(End)), char_start: 12651, char_end: 12654, byte_start: 12651, byte_end: 12654 }: end
Token { kind: Punctuator(Comma), char_start: 12654, char_end: 12655, byte_start: 12654, byte_end: 12655 }: ,
Token { kind: Name(Identifier), char_start: 12664, char_end: 12673, byte_start: 12664, byte_end: 12673 }: on_stdout
Token { kind: Op(Assign), char_start: 12674, char_end: 12675, byte_start: 12674, byte_end: 12675 }: =
Token { kind: Name(Keyword(Function)), char_start: 12676, char_end: 12684, byte_start: 12676, byte_end: 12684 }: function
Token { kind: Punctuator(Lparen), char_start: 12684, char_end: 12685, byte_start: 12684, byte_end: 12685 }: (
Token { kind: Name(Identifier), char_start: 12685, char_end: 12688, byte_start: 12685, byte_end: 12688 }: err
Token { kind: Punctuator(Comma), char_start: 12688, char_end: 12689, byte_start: 12688, byte_end: 12689 }: ,
Token { kind: Name(Identifier), char_start: 12690, char_end: 12694, byte_start: 12690, byte_end: 12694 }: data
Token { kind: Punctuator(Rparen), char_start: 12694, char_end: 12695, byte_start: 12694, byte_end: 12695 }: )
Token { kind: Name(Keyword(If)), char_start: 12706, char_end: 12708, byte_start: 12706, byte_end: 12708 }: if
Token { kind: Name(Identifier), char_start: 12709, char_end: 12712, byte_start: 12709, byte_end: 12712 }: err
Token { kind: Op(Eq), char_start: 12713, char_end: 12715, byte_start: 12713, byte_end: 12715 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 12716, char_end: 12719, byte_start: 12716, byte_end: 12719 }: nil
Token { kind: Name(Keyword(Then)), char_start: 12720, char_end: 12724, byte_start: 12720, byte_end: 12724 }: then
Token { kind: Name(Identifier), char_start: 12737, char_end: 12742, byte_start: 12737, byte_end: 12742 }: table
Token { kind: Punctuator(Dot), char_start: 12742, char_end: 12743, byte_start: 12742, byte_end: 12743 }: .
Token { kind: Name(Identifier), char_start: 12743, char_end: 12749, byte_start: 12743, byte_end: 12749 }: insert
Token { kind: Punctuator(Lparen), char_start: 12749, char_end: 12750, byte_start: 12749, byte_end: 12750 }: (
Token { kind: Name(Identifier), char_start: 12750, char_end: 12756, byte_start: 12750, byte_end: 12756 }: stdout
Token { kind: Punctuator(Comma), char_start: 12756, char_end: 12757, byte_start: 12756, byte_end: 12757 }: ,
Token { kind: Name(Identifier), char_start: 12758, char_end: 12762, byte_start: 12758, byte_end: 12762 }: data
Token { kind: Punctuator(Rparen), char_start: 12762, char_end: 12763, byte_start: 12762, byte_end: 12763 }: )
Token { kind: Name(Keyword(End)), char_start: 12774, char_end: 12777, byte_start: 12774, byte_end: 12777 }: end
Token { kind: Name(Keyword(End)), char_start: 12786, char_end: 12789, byte_start: 12786, byte_end: 12789 }: end
Token { kind: Punctuator(Comma), char_start: 12789, char_end: 12790, byte_start: 12789, byte_end: 12790 }: ,
Token { kind: Punctuator(Rcurly), char_start: 12797, char_end: 12798, byte_start: 12797, byte_end: 12798 }: }
Token { kind: Punctuator(Rparen), char_start: 12798, char_end: 12799, byte_start: 12798, byte_end: 12799 }: )
Token { kind: Name(Keyword(End)), char_start: 12804, char_end: 12807, byte_start: 12804, byte_end: 12807 }: end
Token { kind: Name(Keyword(End)), char_start: 12810, char_end: 12813, byte_start: 12810, byte_end: 12813 }: end
Token { kind: Punctuator(Comma), char_start: 12813, char_end: 12814, byte_start: 12813, byte_end: 12814 }: ,
Token { kind: Name(Identifier), char_start: 12818, char_end: 12825, byte_start: 12818, byte_end: 12825 }: preview
Token { kind: Op(Assign), char_start: 12826, char_end: 12827, byte_start: 12826, byte_end: 12827 }: =
Token { kind: Name(Keyword(Function)), char_start: 12828, char_end: 12836, byte_start: 12828, byte_end: 12836 }: function
Token { kind: Punctuator(Lparen), char_start: 12836, char_end: 12837, byte_start: 12836, byte_end: 12837 }: (
Token { kind: Punctuator(Rparen), char_start: 12837, char_end: 12838, byte_start: 12837, byte_end: 12838 }: )
Token { kind: Name(Keyword(If)), char_start: 12843, char_end: 12845, byte_start: 12843, byte_end: 12845 }: if
Token { kind: Name(Identifier), char_start: 12846, char_end: 12860, byte_start: 12846, byte_end: 12860 }: preview_buffer
Token { kind: Op(Eq), char_start: 12861, char_end: 12863, byte_start: 12861, byte_end: 12863 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 12864, char_end: 12867, byte_start: 12864, byte_end: 12867 }: nil
Token { kind: Name(Keyword(Then)), char_start: 12868, char_end: 12872, byte_start: 12868, byte_end: 12872 }: then
Token { kind: Name(Identifier), char_start: 12879, char_end: 12893, byte_start: 12879, byte_end: 12893 }: preview_buffer
Token { kind: Op(Assign), char_start: 12894, char_end: 12895, byte_start: 12894, byte_end: 12895 }: =
Token { kind: Name(Identifier), char_start: 12896, char_end: 12899, byte_start: 12896, byte_end: 12899 }: vim
Token { kind: Punctuator(Dot), char_start: 12899, char_end: 12900, byte_start: 12899, byte_end: 12900 }: .
Token { kind: Name(Identifier), char_start: 12900, char_end: 12903, byte_start: 12900, byte_end: 12903 }: api
Token { kind: Punctuator(Dot), char_start: 12903, char_end: 12904, byte_start: 12903, byte_end: 12904 }: .
Token { kind: Name(Identifier), char_start: 12904, char_end: 12919, byte_start: 12904, byte_end: 12919 }: nvim_create_buf
Token { kind: Punctuator(Lparen), char_start: 12919, char_end: 12920, byte_start: 12919, byte_end: 12920 }: (
Token { kind: Name(Keyword(False)), char_start: 12929, char_end: 12934, byte_start: 12929, byte_end: 12934 }: false
Token { kind: Punctuator(Comma), char_start: 12934, char_end: 12935, byte_start: 12934, byte_end: 12935 }: ,
Token { kind: Comment(LineComment), char_start: 12936, char_end: 12947, byte_start: 12936, byte_end: 12947 }: -- listed?

Token { kind: Name(Keyword(True)), char_start: 12955, char_end: 12959, byte_start: 12955, byte_end: 12959 }: true
Token { kind: Comment(LineComment), char_start: 12960, char_end: 12972, byte_start: 12960, byte_end: 12972 }: -- scratch?

Token { kind: Punctuator(Rparen), char_start: 12978, char_end: 12979, byte_start: 12978, byte_end: 12979 }: )
Token { kind: Name(Keyword(End)), char_start: 12984, char_end: 12987, byte_start: 12984, byte_end: 12987 }: end
Token { kind: Name(Keyword(Local)), char_start: 12992, char_end: 12997, byte_start: 12992, byte_end: 12997 }: local
Token { kind: Name(Identifier), char_start: 12998, char_end: 13003, byte_start: 12998, byte_end: 13003 }: lines
Token { kind: Op(Assign), char_start: 13004, char_end: 13005, byte_start: 13004, byte_end: 13005 }: =
Token { kind: Name(Identifier), char_start: 13006, char_end: 13009, byte_start: 13006, byte_end: 13009 }: vim
Token { kind: Punctuator(Dot), char_start: 13009, char_end: 13010, byte_start: 13009, byte_end: 13010 }: .
Token { kind: Name(Identifier), char_start: 13010, char_end: 13011, byte_start: 13010, byte_end: 13011 }: o
Token { kind: Punctuator(Dot), char_start: 13011, char_end: 13012, byte_start: 13011, byte_end: 13012 }: .
Token { kind: Name(Identifier), char_start: 13012, char_end: 13017, byte_start: 13012, byte_end: 13017 }: lines
Token { kind: Name(Keyword(If)), char_start: 13022, char_end: 13024, byte_start: 13022, byte_end: 13024 }: if
Token { kind: Name(Identifier), char_start: 13025, char_end: 13039, byte_start: 13025, byte_end: 13039 }: preview_window
Token { kind: Op(Eq), char_start: 13040, char_end: 13042, byte_start: 13040, byte_end: 13042 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 13043, char_end: 13046, byte_start: 13043, byte_end: 13046 }: nil
Token { kind: Name(Keyword(Then)), char_start: 13047, char_end: 13051, byte_start: 13047, byte_end: 13051 }: then
Token { kind: Name(Keyword(Local)), char_start: 13058, char_end: 13063, byte_start: 13058, byte_end: 13063 }: local
Token { kind: Name(Identifier), char_start: 13064, char_end: 13069, byte_start: 13064, byte_end: 13069 }: width
Token { kind: Op(Assign), char_start: 13070, char_end: 13071, byte_start: 13070, byte_end: 13071 }: =
Token { kind: Name(Identifier), char_start: 13072, char_end: 13076, byte_start: 13072, byte_end: 13076 }: math
Token { kind: Punctuator(Dot), char_start: 13076, char_end: 13077, byte_start: 13076, byte_end: 13077 }: .
Token { kind: Name(Identifier), char_start: 13077, char_end: 13082, byte_start: 13077, byte_end: 13082 }: floor
Token { kind: Punctuator(Lparen), char_start: 13082, char_end: 13083, byte_start: 13082, byte_end: 13083 }: (
Token { kind: Name(Identifier), char_start: 13083, char_end: 13086, byte_start: 13083, byte_end: 13086 }: vim
Token { kind: Punctuator(Dot), char_start: 13086, char_end: 13087, byte_start: 13086, byte_end: 13087 }: .
Token { kind: Name(Identifier), char_start: 13087, char_end: 13088, byte_start: 13087, byte_end: 13088 }: o
Token { kind: Punctuator(Dot), char_start: 13088, char_end: 13089, byte_start: 13088, byte_end: 13089 }: .
Token { kind: Name(Identifier), char_start: 13089, char_end: 13096, byte_start: 13089, byte_end: 13096 }: columns
Token { kind: Op(Slash), char_start: 13097, char_end: 13098, byte_start: 13097, byte_end: 13098 }: /
Token { kind: Literal(Number), char_start: 13099, char_end: 13100, byte_start: 13099, byte_end: 13100 }: 2
Token { kind: Punctuator(Rparen), char_start: 13100, char_end: 13101, byte_start: 13100, byte_end: 13101 }: )
Token { kind: Name(Identifier), char_start: 13108, char_end: 13122, byte_start: 13108, byte_end: 13122 }: preview_window
Token { kind: Op(Assign), char_start: 13123, char_end: 13124, byte_start: 13123, byte_end: 13124 }: =
Token { kind: Name(Identifier), char_start: 13125, char_end: 13128, byte_start: 13125, byte_end: 13128 }: vim
Token { kind: Punctuator(Dot), char_start: 13128, char_end: 13129, byte_start: 13128, byte_end: 13129 }: .
Token { kind: Name(Identifier), char_start: 13129, char_end: 13132, byte_start: 13129, byte_end: 13132 }: api
Token { kind: Punctuator(Dot), char_start: 13132, char_end: 13133, byte_start: 13132, byte_end: 13133 }: .
Token { kind: Name(Identifier), char_start: 13133, char_end: 13146, byte_start: 13133, byte_end: 13146 }: nvim_open_win
Token { kind: Punctuator(Lparen), char_start: 13146, char_end: 13147, byte_start: 13146, byte_end: 13147 }: (
Token { kind: Name(Identifier), char_start: 13156, char_end: 13170, byte_start: 13156, byte_end: 13170 }: preview_buffer
Token { kind: Punctuator(Comma), char_start: 13170, char_end: 13171, byte_start: 13170, byte_end: 13171 }: ,
Token { kind: Name(Keyword(False)), char_start: 13180, char_end: 13185, byte_start: 13180, byte_end: 13185 }: false
Token { kind: Comment(BlockComment), char_start: 13186, char_end: 13202, byte_start: 13186, byte_end: 13202 }: --[[ enter? --]]
Token { kind: Punctuator(Comma), char_start: 13202, char_end: 13203, byte_start: 13202, byte_end: 13203 }: ,
Token { kind: Punctuator(Lcurly), char_start: 13204, char_end: 13205, byte_start: 13204, byte_end: 13205 }: {
Token { kind: Name(Identifier), char_start: 13218, char_end: 13221, byte_start: 13218, byte_end: 13221 }: col
Token { kind: Op(Assign), char_start: 13222, char_end: 13223, byte_start: 13222, byte_end: 13223 }: =
Token { kind: Name(Identifier), char_start: 13224, char_end: 13229, byte_start: 13224, byte_end: 13229 }: width
Token { kind: Punctuator(Comma), char_start: 13229, char_end: 13230, byte_start: 13229, byte_end: 13230 }: ,
Token { kind: Name(Identifier), char_start: 13243, char_end: 13246, byte_start: 13243, byte_end: 13246 }: row
Token { kind: Op(Assign), char_start: 13247, char_end: 13248, byte_start: 13247, byte_end: 13248 }: =
Token { kind: Literal(Number), char_start: 13249, char_end: 13250, byte_start: 13249, byte_end: 13250 }: 0
Token { kind: Punctuator(Comma), char_start: 13250, char_end: 13251, byte_start: 13250, byte_end: 13251 }: ,
Token { kind: Name(Identifier), char_start: 13264, char_end: 13273, byte_start: 13264, byte_end: 13273 }: focusable
Token { kind: Op(Assign), char_start: 13274, char_end: 13275, byte_start: 13274, byte_end: 13275 }: =
Token { kind: Name(Keyword(False)), char_start: 13276, char_end: 13281, byte_start: 13276, byte_end: 13281 }: false
Token { kind: Punctuator(Comma), char_start: 13281, char_end: 13282, byte_start: 13281, byte_end: 13282 }: ,
Token { kind: Name(Identifier), char_start: 13295, char_end: 13303, byte_start: 13295, byte_end: 13303 }: relative
Token { kind: Op(Assign), char_start: 13304, char_end: 13305, byte_start: 13304, byte_end: 13305 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 13306, char_end: 13314, byte_start: 13306, byte_end: 13314 }: 'editor'
Token { kind: Punctuator(Comma), char_start: 13314, char_end: 13315, byte_start: 13314, byte_end: 13315 }: ,
Token { kind: Name(Identifier), char_start: 13328, char_end: 13333, byte_start: 13328, byte_end: 13333 }: style
Token { kind: Op(Assign), char_start: 13334, char_end: 13335, byte_start: 13334, byte_end: 13335 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 13336, char_end: 13345, byte_start: 13336, byte_end: 13345 }: 'minimal'
Token { kind: Punctuator(Comma), char_start: 13345, char_end: 13346, byte_start: 13345, byte_end: 13346 }: ,
Token { kind: Name(Identifier), char_start: 13359, char_end: 13364, byte_start: 13359, byte_end: 13364 }: width
Token { kind: Op(Assign), char_start: 13365, char_end: 13366, byte_start: 13365, byte_end: 13366 }: =
Token { kind: Name(Identifier), char_start: 13367, char_end: 13372, byte_start: 13367, byte_end: 13372 }: width
Token { kind: Punctuator(Comma), char_start: 13372, char_end: 13373, byte_start: 13372, byte_end: 13373 }: ,
Token { kind: Name(Identifier), char_start: 13386, char_end: 13392, byte_start: 13386, byte_end: 13392 }: height
Token { kind: Op(Assign), char_start: 13393, char_end: 13394, byte_start: 13393, byte_end: 13394 }: =
Token { kind: Name(Identifier), char_start: 13395, char_end: 13400, byte_start: 13395, byte_end: 13400 }: lines
Token { kind: Op(Minus), char_start: 13401, char_end: 13402, byte_start: 13401, byte_end: 13402 }: -
Token { kind: Literal(Number), char_start: 13403, char_end: 13404, byte_start: 13403, byte_end: 13404 }: 2
Token { kind: Punctuator(Comma), char_start: 13404, char_end: 13405, byte_start: 13404, byte_end: 13405 }: ,
Token { kind: Punctuator(Rcurly), char_start: 13414, char_end: 13415, byte_start: 13414, byte_end: 13415 }: }
Token { kind: Punctuator(Rparen), char_start: 13422, char_end: 13423, byte_start: 13422, byte_end: 13423 }: )
Token { kind: Name(Identifier), char_start: 13430, char_end: 13433, byte_start: 13430, byte_end: 13433 }: vim
Token { kind: Punctuator(Dot), char_start: 13433, char_end: 13434, byte_start: 13433, byte_end: 13434 }: .
Token { kind: Name(Identifier), char_start: 13434, char_end: 13437, byte_start: 13434, byte_end: 13437 }: api
Token { kind: Punctuator(Dot), char_start: 13437, char_end: 13438, byte_start: 13437, byte_end: 13438 }: .
Token { kind: Name(Identifier), char_start: 13438, char_end: 13457, byte_start: 13438, byte_end: 13457 }: nvim_win_set_option
Token { kind: Punctuator(Lparen), char_start: 13457, char_end: 13458, byte_start: 13457, byte_end: 13458 }: (
Token { kind: Name(Identifier), char_start: 13467, char_end: 13481, byte_start: 13467, byte_end: 13481 }: preview_window
Token { kind: Punctuator(Comma), char_start: 13481, char_end: 13482, byte_start: 13481, byte_end: 13482 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 13491, char_end: 13505, byte_start: 13491, byte_end: 13505 }: 'winhighlight'
Token { kind: Punctuator(Comma), char_start: 13505, char_end: 13506, byte_start: 13505, byte_end: 13506 }: ,
Token { kind: Name(Identifier), char_start: 13515, char_end: 13518, byte_start: 13515, byte_end: 13518 }: vim
Token { kind: Punctuator(Dot), char_start: 13518, char_end: 13519, byte_start: 13518, byte_end: 13519 }: .
Token { kind: Name(Identifier), char_start: 13519, char_end: 13520, byte_start: 13519, byte_end: 13520 }: g
Token { kind: Punctuator(Dot), char_start: 13520, char_end: 13521, byte_start: 13520, byte_end: 13521 }: .
Token { kind: Name(Identifier), char_start: 13521, char_end: 13546, byte_start: 13521, byte_end: 13546 }: CorpusPreviewWinhighlight
Token { kind: Name(Keyword(Or)), char_start: 13547, char_end: 13549, byte_start: 13547, byte_end: 13549 }: or
Token { kind: Literal(Str(SingleQuoted)), char_start: 13550, char_end: 13606, byte_start: 13550, byte_end: 13606 }: 'EndOfBuffer:LineNr,FoldColumn:StatusLine,Normal:LineNr'
Token { kind: Punctuator(Rparen), char_start: 13613, char_end: 13614, byte_start: 13613, byte_end: 13614 }: )
Token { kind: Name(Identifier), char_start: 13621, char_end: 13624, byte_start: 13621, byte_end: 13624 }: vim
Token { kind: Punctuator(Dot), char_start: 13624, char_end: 13625, byte_start: 13624, byte_end: 13625 }: .
Token { kind: Name(Identifier), char_start: 13625, char_end: 13628, byte_start: 13625, byte_end: 13628 }: api
Token { kind: Punctuator(Dot), char_start: 13628, char_end: 13629, byte_start: 13628, byte_end: 13629 }: .
Token { kind: Name(Identifier), char_start: 13629, char_end: 13648, byte_start: 13629, byte_end: 13648 }: nvim_win_set_option
Token { kind: Punctuator(Lparen), char_start: 13648, char_end: 13649, byte_start: 13648, byte_end: 13649 }: (
Token { kind: Name(Identifier), char_start: 13658, char_end: 13672, byte_start: 13658, byte_end: 13672 }: preview_window
Token { kind: Punctuator(Comma), char_start: 13672, char_end: 13673, byte_start: 13672, byte_end: 13673 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 13682, char_end: 13694, byte_start: 13682, byte_end: 13694 }: 'foldcolumn'
Token { kind: Punctuator(Comma), char_start: 13694, char_end: 13695, byte_start: 13694, byte_end: 13695 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 13704, char_end: 13707, byte_start: 13704, byte_end: 13707 }: '1'
Token { kind: Punctuator(Rparen), char_start: 13714, char_end: 13715, byte_start: 13714, byte_end: 13715 }: )
Token { kind: Name(Identifier), char_start: 13722, char_end: 13725, byte_start: 13722, byte_end: 13725 }: vim
Token { kind: Punctuator(Dot), char_start: 13725, char_end: 13726, byte_start: 13725, byte_end: 13726 }: .
Token { kind: Name(Identifier), char_start: 13726, char_end: 13729, byte_start: 13726, byte_end: 13729 }: api
Token { kind: Punctuator(Dot), char_start: 13729, char_end: 13730, byte_start: 13729, byte_end: 13730 }: .
Token { kind: Name(Identifier), char_start: 13730, char_end: 13749, byte_start: 13730, byte_end: 13749 }: nvim_win_set_option
Token { kind: Punctuator(Lparen), char_start: 13749, char_end: 13750, byte_start: 13749, byte_end: 13750 }: (
Token { kind: Name(Identifier), char_start: 13759, char_end: 13773, byte_start: 13759, byte_end: 13773 }: preview_window
Token { kind: Punctuator(Comma), char_start: 13773, char_end: 13774, byte_start: 13773, byte_end: 13774 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 13783, char_end: 13795, byte_start: 13783, byte_end: 13795 }: 'foldenable'
Token { kind: Punctuator(Comma), char_start: 13795, char_end: 13796, byte_start: 13795, byte_end: 13796 }: ,
Token { kind: Name(Keyword(False)), char_start: 13805, char_end: 13810, byte_start: 13805, byte_end: 13810 }: false
Token { kind: Punctuator(Rparen), char_start: 13817, char_end: 13818, byte_start: 13817, byte_end: 13818 }: )
Token { kind: Name(Keyword(End)), char_start: 13823, char_end: 13826, byte_start: 13823, byte_end: 13826 }: end
Token { kind: Name(Keyword(Local)), char_start: 13831, char_end: 13836, byte_start: 13831, byte_end: 13836 }: local
Token { kind: Name(Identifier), char_start: 13837, char_end: 13841, byte_start: 13837, byte_end: 13841 }: file
Token { kind: Op(Assign), char_start: 13842, char_end: 13843, byte_start: 13842, byte_end: 13843 }: =
Token { kind: Name(Identifier), char_start: 13844, char_end: 13850, byte_start: 13844, byte_end: 13850 }: corpus
Token { kind: Punctuator(Dot), char_start: 13850, char_end: 13851, byte_start: 13850, byte_end: 13851 }: .
Token { kind: Name(Identifier), char_start: 13851, char_end: 13868, byte_start: 13851, byte_end: 13868 }: get_selected_file
Token { kind: Punctuator(Lparen), char_start: 13868, char_end: 13869, byte_start: 13868, byte_end: 13869 }: (
Token { kind: Punctuator(Rparen), char_start: 13869, char_end: 13870, byte_start: 13869, byte_end: 13870 }: )
Token { kind: Name(Keyword(Local)), char_start: 13875, char_end: 13880, byte_start: 13875, byte_end: 13880 }: local
Token { kind: Name(Identifier), char_start: 13881, char_end: 13889, byte_start: 13881, byte_end: 13889 }: contents
Token { kind: Op(Assign), char_start: 13890, char_end: 13891, byte_start: 13890, byte_end: 13891 }: =
Token { kind: Name(Keyword(Nil)), char_start: 13892, char_end: 13895, byte_start: 13892, byte_end: 13895 }: nil
Token { kind: Name(Keyword(If)), char_start: 13900, char_end: 13902, byte_start: 13900, byte_end: 13902 }: if
Token { kind: Name(Identifier), char_start: 13903, char_end: 13907, byte_start: 13903, byte_end: 13907 }: file
Token { kind: Op(Eq), char_start: 13908, char_end: 13910, byte_start: 13908, byte_end: 13910 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 13911, char_end: 13914, byte_start: 13911, byte_end: 13914 }: nil
Token { kind: Name(Keyword(Then)), char_start: 13915, char_end: 13919, byte_start: 13915, byte_end: 13919 }: then
Token { kind: Name(Identifier), char_start: 13926, char_end: 13934, byte_start: 13926, byte_end: 13934 }: contents
Token { kind: Op(Assign), char_start: 13935, char_end: 13936, byte_start: 13935, byte_end: 13936 }: =
Token { kind: Punctuator(Lcurly), char_start: 13937, char_end: 13938, byte_start: 13937, byte_end: 13938 }: {
Token { kind: Punctuator(Rcurly), char_start: 13938, char_end: 13939, byte_start: 13938, byte_end: 13939 }: }
Token { kind: Name(Keyword(Else)), char_start: 13944, char_end: 13948, byte_start: 13944, byte_end: 13948 }: else
Token { kind: Name(Identifier), char_start: 13955, char_end: 13963, byte_start: 13955, byte_end: 13963 }: contents
Token { kind: Op(Assign), char_start: 13964, char_end: 13965, byte_start: 13964, byte_end: 13965 }: =
Token { kind: Name(Identifier), char_start: 13966, char_end: 13969, byte_start: 13966, byte_end: 13969 }: vim
Token { kind: Punctuator(Dot), char_start: 13969, char_end: 13970, byte_start: 13969, byte_end: 13970 }: .
Token { kind: Name(Identifier), char_start: 13970, char_end: 13972, byte_start: 13970, byte_end: 13972 }: fn
Token { kind: Punctuator(Dot), char_start: 13972, char_end: 13973, byte_start: 13972, byte_end: 13973 }: .
Token { kind: Name(Identifier), char_start: 13973, char_end: 13981, byte_start: 13973, byte_end: 13981 }: readfile
Token { kind: Punctuator(Lparen), char_start: 13981, char_end: 13982, byte_start: 13981, byte_end: 13982 }: (
Token { kind: Name(Identifier), char_start: 13991, char_end: 13995, byte_start: 13991, byte_end: 13995 }: file
Token { kind: Punctuator(Comma), char_start: 13995, char_end: 13996, byte_start: 13995, byte_end: 13996 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 14005, char_end: 14007, byte_start: 14005, byte_end: 14007 }: ''
Token { kind: Punctuator(Comma), char_start: 14007, char_end: 14008, byte_start: 14007, byte_end: 14008 }: ,
Token { kind: Comment(LineComment), char_start: 14009, char_end: 14031, byte_start: 14009, byte_end: 14031 }: -- if "b" then binary

Token { kind: Name(Identifier), char_start: 14039, char_end: 14044, byte_start: 14039, byte_end: 14044 }: lines
Token { kind: Comment(LineComment), char_start: 14045, char_end: 14062, byte_start: 14045, byte_end: 14062 }: -- maximum lines

Token { kind: Punctuator(Rparen), char_start: 14068, char_end: 14069, byte_start: 14068, byte_end: 14069 }: )
Token { kind: Name(Keyword(End)), char_start: 14074, char_end: 14077, byte_start: 14074, byte_end: 14077 }: end
Token { kind: Comment(LineComment), char_start: 14082, char_end: 14157, byte_start: 14082, byte_end: 14157 }: -- Pad buffer with blank lines to make foldcolumn extend all the way down.

Token { kind: Comment(LineComment), char_start: 14161, char_end: 14210, byte_start: 14161, byte_end: 14210 }: -- Subtract two for statusline and command line.

Token { kind: Name(Keyword(Local)), char_start: 14214, char_end: 14219, byte_start: 14214, byte_end: 14219 }: local
Token { kind: Name(Identifier), char_start: 14220, char_end: 14227, byte_start: 14220, byte_end: 14227 }: padding
Token { kind: Op(Assign), char_start: 14228, char_end: 14229, byte_start: 14228, byte_end: 14229 }: =
Token { kind: Name(Identifier), char_start: 14230, char_end: 14235, byte_start: 14230, byte_end: 14235 }: lines
Token { kind: Op(Minus), char_start: 14236, char_end: 14237, byte_start: 14236, byte_end: 14237 }: -
Token { kind: Name(Identifier), char_start: 14238, char_end: 14243, byte_start: 14238, byte_end: 14243 }: table
Token { kind: Punctuator(Dot), char_start: 14243, char_end: 14244, byte_start: 14243, byte_end: 14244 }: .
Token { kind: Name(Identifier), char_start: 14244, char_end: 14248, byte_start: 14244, byte_end: 14248 }: getn
Token { kind: Punctuator(Lparen), char_start: 14248, char_end: 14249, byte_start: 14248, byte_end: 14249 }: (
Token { kind: Name(Identifier), char_start: 14249, char_end: 14257, byte_start: 14249, byte_end: 14257 }: contents
Token { kind: Punctuator(Rparen), char_start: 14257, char_end: 14258, byte_start: 14257, byte_end: 14258 }: )
Token { kind: Op(Minus), char_start: 14259, char_end: 14260, byte_start: 14259, byte_end: 14260 }: -
Token { kind: Literal(Number), char_start: 14261, char_end: 14262, byte_start: 14261, byte_end: 14262 }: 2
Token { kind: Name(Keyword(For)), char_start: 14267, char_end: 14270, byte_start: 14267, byte_end: 14270 }: for
Token { kind: Name(Identifier), char_start: 14271, char_end: 14272, byte_start: 14271, byte_end: 14272 }: i
Token { kind: Op(Assign), char_start: 14273, char_end: 14274, byte_start: 14273, byte_end: 14274 }: =
Token { kind: Literal(Number), char_start: 14275, char_end: 14276, byte_start: 14275, byte_end: 14276 }: 1
Token { kind: Punctuator(Comma), char_start: 14276, char_end: 14277, byte_start: 14276, byte_end: 14277 }: ,
Token { kind: Name(Identifier), char_start: 14278, char_end: 14285, byte_start: 14278, byte_end: 14285 }: padding
Token { kind: Name(Keyword(Do)), char_start: 14286, char_end: 14288, byte_start: 14286, byte_end: 14288 }: do
Token { kind: Name(Identifier), char_start: 14295, char_end: 14299, byte_start: 14295, byte_end: 14299 }: util
Token { kind: Punctuator(Dot), char_start: 14299, char_end: 14300, byte_start: 14299, byte_end: 14300 }: .
Token { kind: Name(Identifier), char_start: 14300, char_end: 14304, byte_start: 14300, byte_end: 14304 }: list
Token { kind: Punctuator(Dot), char_start: 14304, char_end: 14305, byte_start: 14304, byte_end: 14305 }: .
Token { kind: Name(Identifier), char_start: 14305, char_end: 14309, byte_start: 14305, byte_end: 14309 }: push
Token { kind: Punctuator(Lparen), char_start: 14309, char_end: 14310, byte_start: 14309, byte_end: 14310 }: (
Token { kind: Name(Identifier), char_start: 14310, char_end: 14318, byte_start: 14310, byte_end: 14318 }: contents
Token { kind: Punctuator(Comma), char_start: 14318, char_end: 14319, byte_start: 14318, byte_end: 14319 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 14320, char_end: 14322, byte_start: 14320, byte_end: 14322 }: ''
Token { kind: Punctuator(Rparen), char_start: 14322, char_end: 14323, byte_start: 14322, byte_end: 14323 }: )
Token { kind: Name(Keyword(End)), char_start: 14328, char_end: 14331, byte_start: 14328, byte_end: 14331 }: end
Token { kind: Name(Identifier), char_start: 14337, char_end: 14340, byte_start: 14337, byte_end: 14340 }: vim
Token { kind: Punctuator(Dot), char_start: 14340, char_end: 14341, byte_start: 14340, byte_end: 14341 }: .
Token { kind: Name(Identifier), char_start: 14341, char_end: 14344, byte_start: 14341, byte_end: 14344 }: api
Token { kind: Punctuator(Dot), char_start: 14344, char_end: 14345, byte_start: 14344, byte_end: 14345 }: .
Token { kind: Name(Identifier), char_start: 14345, char_end: 14363, byte_start: 14345, byte_end: 14363 }: nvim_buf_set_lines
Token { kind: Punctuator(Lparen), char_start: 14363, char_end: 14364, byte_start: 14363, byte_end: 14364 }: (
Token { kind: Name(Identifier), char_start: 14371, char_end: 14385, byte_start: 14371, byte_end: 14385 }: preview_buffer
Token { kind: Punctuator(Comma), char_start: 14385, char_end: 14386, byte_start: 14385, byte_end: 14386 }: ,
Token { kind: Literal(Number), char_start: 14393, char_end: 14394, byte_start: 14393, byte_end: 14394 }: 0
Token { kind: Punctuator(Comma), char_start: 14394, char_end: 14395, byte_start: 14394, byte_end: 14395 }: ,
Token { kind: Comment(LineComment), char_start: 14396, char_end: 14405, byte_start: 14396, byte_end: 14405 }: -- start

Token { kind: Op(Minus), char_start: 14411, char_end: 14412, byte_start: 14411, byte_end: 14412 }: -
Token { kind: Literal(Number), char_start: 14412, char_end: 14413, byte_start: 14412, byte_end: 14413 }: 1
Token { kind: Punctuator(Comma), char_start: 14413, char_end: 14414, byte_start: 14413, byte_end: 14414 }: ,
Token { kind: Comment(LineComment), char_start: 14415, char_end: 14422, byte_start: 14415, byte_end: 14422 }: -- end

Token { kind: Name(Keyword(False)), char_start: 14428, char_end: 14433, byte_start: 14428, byte_end: 14433 }: false
Token { kind: Punctuator(Comma), char_start: 14433, char_end: 14434, byte_start: 14433, byte_end: 14434 }: ,
Token { kind: Comment(LineComment), char_start: 14435, char_end: 14455, byte_start: 14435, byte_end: 14455 }: -- strict indexing?

Token { kind: Name(Identifier), char_start: 14461, char_end: 14469, byte_start: 14461, byte_end: 14469 }: contents
Token { kind: Punctuator(Rparen), char_start: 14474, char_end: 14475, byte_start: 14474, byte_end: 14475 }: )
Token { kind: Name(Identifier), char_start: 14480, char_end: 14483, byte_start: 14480, byte_end: 14483 }: vim
Token { kind: Punctuator(Dot), char_start: 14483, char_end: 14484, byte_start: 14483, byte_end: 14484 }: .
Token { kind: Name(Identifier), char_start: 14484, char_end: 14487, byte_start: 14484, byte_end: 14487 }: cmd
Token { kind: Punctuator(Lparen), char_start: 14487, char_end: 14488, byte_start: 14487, byte_end: 14488 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 14488, char_end: 14496, byte_start: 14488, byte_end: 14496 }: 'redraw'
Token { kind: Punctuator(Rparen), char_start: 14496, char_end: 14497, byte_start: 14496, byte_end: 14497 }: )
Token { kind: Name(Keyword(End)), char_start: 14500, char_end: 14503, byte_start: 14500, byte_end: 14503 }: end
Token { kind: Punctuator(Comma), char_start: 14503, char_end: 14504, byte_start: 14503, byte_end: 14504 }: ,
Token { kind: Name(Identifier), char_start: 14508, char_end: 14520, byte_start: 14508, byte_end: 14520 }: preview_next
Token { kind: Op(Assign), char_start: 14521, char_end: 14522, byte_start: 14521, byte_end: 14522 }: =
Token { kind: Name(Keyword(Function)), char_start: 14523, char_end: 14531, byte_start: 14523, byte_end: 14531 }: function
Token { kind: Punctuator(Lparen), char_start: 14531, char_end: 14532, byte_start: 14531, byte_end: 14532 }: (
Token { kind: Punctuator(Rparen), char_start: 14532, char_end: 14533, byte_start: 14532, byte_end: 14533 }: )
Token { kind: Name(Keyword(If)), char_start: 14538, char_end: 14540, byte_start: 14538, byte_end: 14540 }: if
Token { kind: Name(Identifier), char_start: 14541, char_end: 14563, byte_start: 14541, byte_end: 14563 }: chooser_selected_index
Token { kind: Op(Ne), char_start: 14564, char_end: 14566, byte_start: 14564, byte_end: 14566 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 14567, char_end: 14570, byte_start: 14567, byte_end: 14570 }: nil
Token { kind: Name(Keyword(Then)), char_start: 14571, char_end: 14575, byte_start: 14571, byte_end: 14575 }: then
Token { kind: Name(Keyword(If)), char_start: 14582, char_end: 14584, byte_start: 14582, byte_end: 14584 }: if
Token { kind: Name(Identifier), char_start: 14585, char_end: 14607, byte_start: 14585, byte_end: 14607 }: chooser_selected_index
Token { kind: Op(Lt), char_start: 14608, char_end: 14609, byte_start: 14608, byte_end: 14609 }: <
Token { kind: Name(Identifier), char_start: 14610, char_end: 14613, byte_start: 14610, byte_end: 14613 }: vim
Token { kind: Punctuator(Dot), char_start: 14613, char_end: 14614, byte_start: 14613, byte_end: 14614 }: .
Token { kind: Name(Identifier), char_start: 14614, char_end: 14617, byte_start: 14614, byte_end: 14617 }: api
Token { kind: Punctuator(Dot), char_start: 14617, char_end: 14618, byte_start: 14617, byte_end: 14618 }: .
Token { kind: Name(Identifier), char_start: 14618, char_end: 14637, byte_start: 14618, byte_end: 14637 }: nvim_buf_line_count
Token { kind: Punctuator(Lparen), char_start: 14637, char_end: 14638, byte_start: 14637, byte_end: 14638 }: (
Token { kind: Name(Identifier), char_start: 14638, char_end: 14652, byte_start: 14638, byte_end: 14652 }: chooser_buffer
Token { kind: Punctuator(Rparen), char_start: 14652, char_end: 14653, byte_start: 14652, byte_end: 14653 }: )
Token { kind: Name(Keyword(Then)), char_start: 14654, char_end: 14658, byte_start: 14654, byte_end: 14658 }: then
Token { kind: Name(Keyword(Local)), char_start: 14667, char_end: 14672, byte_start: 14667, byte_end: 14672 }: local
Token { kind: Name(Identifier), char_start: 14673, char_end: 14678, byte_start: 14673, byte_end: 14678 }: lines
Token { kind: Op(Assign), char_start: 14679, char_end: 14680, byte_start: 14679, byte_end: 14680 }: =
Token { kind: Name(Identifier), char_start: 14681, char_end: 14684, byte_start: 14681, byte_end: 14684 }: vim
Token { kind: Punctuator(Dot), char_start: 14684, char_end: 14685, byte_start: 14684, byte_end: 14685 }: .
Token { kind: Name(Identifier), char_start: 14685, char_end: 14688, byte_start: 14685, byte_end: 14688 }: api
Token { kind: Punctuator(Dot), char_start: 14688, char_end: 14689, byte_start: 14688, byte_end: 14689 }: .
Token { kind: Name(Identifier), char_start: 14689, char_end: 14707, byte_start: 14689, byte_end: 14707 }: nvim_buf_get_lines
Token { kind: Punctuator(Lparen), char_start: 14707, char_end: 14708, byte_start: 14707, byte_end: 14708 }: (
Token { kind: Name(Identifier), char_start: 14719, char_end: 14733, byte_start: 14719, byte_end: 14733 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 14733, char_end: 14734, byte_start: 14733, byte_end: 14734 }: ,
Token { kind: Name(Identifier), char_start: 14745, char_end: 14767, byte_start: 14745, byte_end: 14767 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 14768, char_end: 14769, byte_start: 14768, byte_end: 14769 }: -
Token { kind: Literal(Number), char_start: 14770, char_end: 14771, byte_start: 14770, byte_end: 14771 }: 1
Token { kind: Punctuator(Comma), char_start: 14771, char_end: 14772, byte_start: 14771, byte_end: 14772 }: ,
Token { kind: Name(Identifier), char_start: 14783, char_end: 14805, byte_start: 14783, byte_end: 14805 }: chooser_selected_index
Token { kind: Op(Plus), char_start: 14806, char_end: 14807, byte_start: 14806, byte_end: 14807 }: +
Token { kind: Literal(Number), char_start: 14808, char_end: 14809, byte_start: 14808, byte_end: 14809 }: 1
Token { kind: Punctuator(Comma), char_start: 14809, char_end: 14810, byte_start: 14809, byte_end: 14810 }: ,
Token { kind: Name(Keyword(False)), char_start: 14821, char_end: 14826, byte_start: 14821, byte_end: 14826 }: false
Token { kind: Punctuator(Rparen), char_start: 14835, char_end: 14836, byte_start: 14835, byte_end: 14836 }: )
Token { kind: Name(Identifier), char_start: 14845, char_end: 14848, byte_start: 14845, byte_end: 14848 }: vim
Token { kind: Punctuator(Dot), char_start: 14848, char_end: 14849, byte_start: 14848, byte_end: 14849 }: .
Token { kind: Name(Identifier), char_start: 14849, char_end: 14852, byte_start: 14849, byte_end: 14852 }: api
Token { kind: Punctuator(Dot), char_start: 14852, char_end: 14853, byte_start: 14852, byte_end: 14853 }: .
Token { kind: Name(Identifier), char_start: 14853, char_end: 14871, byte_start: 14853, byte_end: 14871 }: nvim_buf_set_lines
Token { kind: Punctuator(Lparen), char_start: 14871, char_end: 14872, byte_start: 14871, byte_end: 14872 }: (
Token { kind: Name(Identifier), char_start: 14883, char_end: 14897, byte_start: 14883, byte_end: 14897 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 14897, char_end: 14898, byte_start: 14897, byte_end: 14898 }: ,
Token { kind: Name(Identifier), char_start: 14909, char_end: 14931, byte_start: 14909, byte_end: 14931 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 14932, char_end: 14933, byte_start: 14932, byte_end: 14933 }: -
Token { kind: Literal(Number), char_start: 14934, char_end: 14935, byte_start: 14934, byte_end: 14935 }: 1
Token { kind: Punctuator(Comma), char_start: 14935, char_end: 14936, byte_start: 14935, byte_end: 14936 }: ,
Token { kind: Name(Identifier), char_start: 14947, char_end: 14969, byte_start: 14947, byte_end: 14969 }: chooser_selected_index
Token { kind: Op(Plus), char_start: 14970, char_end: 14971, byte_start: 14970, byte_end: 14971 }: +
Token { kind: Literal(Number), char_start: 14972, char_end: 14973, byte_start: 14972, byte_end: 14973 }: 1
Token { kind: Punctuator(Comma), char_start: 14973, char_end: 14974, byte_start: 14973, byte_end: 14974 }: ,
Token { kind: Name(Keyword(False)), char_start: 14985, char_end: 14990, byte_start: 14985, byte_end: 14990 }: false
Token { kind: Punctuator(Comma), char_start: 14990, char_end: 14991, byte_start: 14990, byte_end: 14991 }: ,
Token { kind: Comment(LineComment), char_start: 14992, char_end: 15012, byte_start: 14992, byte_end: 15012 }: -- strict indexing?

Token { kind: Punctuator(Lcurly), char_start: 15022, char_end: 15023, byte_start: 15022, byte_end: 15023 }: {
Token { kind: Punctuator(Lparen), char_start: 15036, char_end: 15037, byte_start: 15036, byte_end: 15037 }: (
Token { kind: Punctuator(Lcurly), char_start: 15037, char_end: 15038, byte_start: 15037, byte_end: 15038 }: {
Token { kind: Name(Identifier), char_start: 15038, char_end: 15043, byte_start: 15038, byte_end: 15043 }: lines
Token { kind: Punctuator(Lbracket), char_start: 15043, char_end: 15044, byte_start: 15043, byte_end: 15044 }: [
Token { kind: Literal(Number), char_start: 15044, char_end: 15045, byte_start: 15044, byte_end: 15045 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15045, char_end: 15046, byte_start: 15045, byte_end: 15046 }: ]
Token { kind: Punctuator(Colon), char_start: 15046, char_end: 15047, byte_start: 15046, byte_end: 15047 }: :
Token { kind: Name(Identifier), char_start: 15047, char_end: 15051, byte_start: 15047, byte_end: 15051 }: gsub
Token { kind: Punctuator(Lparen), char_start: 15051, char_end: 15052, byte_start: 15051, byte_end: 15052 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 15052, char_end: 15057, byte_start: 15052, byte_end: 15057 }: '^..'
Token { kind: Punctuator(Comma), char_start: 15057, char_end: 15058, byte_start: 15057, byte_end: 15058 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 15059, char_end: 15063, byte_start: 15059, byte_end: 15063 }: '  '
Token { kind: Punctuator(Rparen), char_start: 15063, char_end: 15064, byte_start: 15063, byte_end: 15064 }: )
Token { kind: Punctuator(Rcurly), char_start: 15064, char_end: 15065, byte_start: 15064, byte_end: 15065 }: }
Token { kind: Punctuator(Rparen), char_start: 15065, char_end: 15066, byte_start: 15065, byte_end: 15066 }: )
Token { kind: Punctuator(Lbracket), char_start: 15066, char_end: 15067, byte_start: 15066, byte_end: 15067 }: [
Token { kind: Literal(Number), char_start: 15067, char_end: 15068, byte_start: 15067, byte_end: 15068 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15068, char_end: 15069, byte_start: 15068, byte_end: 15069 }: ]
Token { kind: Punctuator(Comma), char_start: 15069, char_end: 15070, byte_start: 15069, byte_end: 15070 }: ,
Token { kind: Punctuator(Lparen), char_start: 15083, char_end: 15084, byte_start: 15083, byte_end: 15084 }: (
Token { kind: Punctuator(Lcurly), char_start: 15084, char_end: 15085, byte_start: 15084, byte_end: 15085 }: {
Token { kind: Name(Identifier), char_start: 15085, char_end: 15090, byte_start: 15085, byte_end: 15090 }: lines
Token { kind: Punctuator(Lbracket), char_start: 15090, char_end: 15091, byte_start: 15090, byte_end: 15091 }: [
Token { kind: Literal(Number), char_start: 15091, char_end: 15092, byte_start: 15091, byte_end: 15092 }: 2
Token { kind: Punctuator(Rbracket), char_start: 15092, char_end: 15093, byte_start: 15092, byte_end: 15093 }: ]
Token { kind: Punctuator(Colon), char_start: 15093, char_end: 15094, byte_start: 15093, byte_end: 15094 }: :
Token { kind: Name(Identifier), char_start: 15094, char_end: 15098, byte_start: 15094, byte_end: 15098 }: gsub
Token { kind: Punctuator(Lparen), char_start: 15098, char_end: 15099, byte_start: 15098, byte_end: 15099 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 15099, char_end: 15104, byte_start: 15099, byte_end: 15104 }: '^..'
Token { kind: Punctuator(Comma), char_start: 15104, char_end: 15105, byte_start: 15104, byte_end: 15105 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 15106, char_end: 15110, byte_start: 15106, byte_end: 15110 }: '> '
Token { kind: Punctuator(Rparen), char_start: 15110, char_end: 15111, byte_start: 15110, byte_end: 15111 }: )
Token { kind: Punctuator(Rcurly), char_start: 15111, char_end: 15112, byte_start: 15111, byte_end: 15112 }: }
Token { kind: Punctuator(Rparen), char_start: 15112, char_end: 15113, byte_start: 15112, byte_end: 15113 }: )
Token { kind: Punctuator(Lbracket), char_start: 15113, char_end: 15114, byte_start: 15113, byte_end: 15114 }: [
Token { kind: Literal(Number), char_start: 15114, char_end: 15115, byte_start: 15114, byte_end: 15115 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15115, char_end: 15116, byte_start: 15115, byte_end: 15116 }: ]
Token { kind: Punctuator(Comma), char_start: 15116, char_end: 15117, byte_start: 15116, byte_end: 15117 }: ,
Token { kind: Punctuator(Rcurly), char_start: 15128, char_end: 15129, byte_start: 15128, byte_end: 15129 }: }
Token { kind: Punctuator(Rparen), char_start: 15138, char_end: 15139, byte_start: 15138, byte_end: 15139 }: )
Token { kind: Name(Identifier), char_start: 15148, char_end: 15170, byte_start: 15148, byte_end: 15170 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 15171, char_end: 15172, byte_start: 15171, byte_end: 15172 }: =
Token { kind: Name(Identifier), char_start: 15173, char_end: 15195, byte_start: 15173, byte_end: 15195 }: chooser_selected_index
Token { kind: Op(Plus), char_start: 15196, char_end: 15197, byte_start: 15196, byte_end: 15197 }: +
Token { kind: Literal(Number), char_start: 15198, char_end: 15199, byte_start: 15198, byte_end: 15199 }: 1
Token { kind: Name(Identifier), char_start: 15208, char_end: 15214, byte_start: 15208, byte_end: 15214 }: corpus
Token { kind: Punctuator(Dot), char_start: 15214, char_end: 15215, byte_start: 15214, byte_end: 15215 }: .
Token { kind: Name(Identifier), char_start: 15215, char_end: 15234, byte_start: 15215, byte_end: 15234 }: highlight_selection
Token { kind: Punctuator(Lparen), char_start: 15234, char_end: 15235, byte_start: 15234, byte_end: 15235 }: (
Token { kind: Punctuator(Rparen), char_start: 15235, char_end: 15236, byte_start: 15235, byte_end: 15236 }: )
Token { kind: Name(Keyword(End)), char_start: 15243, char_end: 15246, byte_start: 15243, byte_end: 15246 }: end
Token { kind: Name(Keyword(End)), char_start: 15251, char_end: 15254, byte_start: 15251, byte_end: 15254 }: end
Token { kind: Name(Keyword(End)), char_start: 15257, char_end: 15260, byte_start: 15257, byte_end: 15260 }: end
Token { kind: Punctuator(Comma), char_start: 15260, char_end: 15261, byte_start: 15260, byte_end: 15261 }: ,
Token { kind: Comment(LineComment), char_start: 15265, char_end: 15322, byte_start: 15265, byte_end: 15322 }: -- TODO: DRY this up; it is very similar to preview_next

Token { kind: Name(Identifier), char_start: 15324, char_end: 15340, byte_start: 15324, byte_end: 15340 }: preview_previous
Token { kind: Op(Assign), char_start: 15341, char_end: 15342, byte_start: 15341, byte_end: 15342 }: =
Token { kind: Name(Keyword(Function)), char_start: 15343, char_end: 15351, byte_start: 15343, byte_end: 15351 }: function
Token { kind: Punctuator(Lparen), char_start: 15351, char_end: 15352, byte_start: 15351, byte_end: 15352 }: (
Token { kind: Punctuator(Rparen), char_start: 15352, char_end: 15353, byte_start: 15352, byte_end: 15353 }: )
Token { kind: Name(Keyword(If)), char_start: 15358, char_end: 15360, byte_start: 15358, byte_end: 15360 }: if
Token { kind: Name(Identifier), char_start: 15361, char_end: 15383, byte_start: 15361, byte_end: 15383 }: chooser_selected_index
Token { kind: Op(Ne), char_start: 15384, char_end: 15386, byte_start: 15384, byte_end: 15386 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 15387, char_end: 15390, byte_start: 15387, byte_end: 15390 }: nil
Token { kind: Name(Keyword(Then)), char_start: 15391, char_end: 15395, byte_start: 15391, byte_end: 15395 }: then
Token { kind: Name(Keyword(If)), char_start: 15402, char_end: 15404, byte_start: 15402, byte_end: 15404 }: if
Token { kind: Name(Identifier), char_start: 15405, char_end: 15427, byte_start: 15405, byte_end: 15427 }: chooser_selected_index
Token { kind: Op(Gt), char_start: 15428, char_end: 15429, byte_start: 15428, byte_end: 15429 }: >
Token { kind: Literal(Number), char_start: 15430, char_end: 15431, byte_start: 15430, byte_end: 15431 }: 1
Token { kind: Name(Keyword(Then)), char_start: 15432, char_end: 15436, byte_start: 15432, byte_end: 15436 }: then
Token { kind: Name(Keyword(Local)), char_start: 15445, char_end: 15450, byte_start: 15445, byte_end: 15450 }: local
Token { kind: Name(Identifier), char_start: 15451, char_end: 15456, byte_start: 15451, byte_end: 15456 }: lines
Token { kind: Op(Assign), char_start: 15457, char_end: 15458, byte_start: 15457, byte_end: 15458 }: =
Token { kind: Name(Identifier), char_start: 15459, char_end: 15462, byte_start: 15459, byte_end: 15462 }: vim
Token { kind: Punctuator(Dot), char_start: 15462, char_end: 15463, byte_start: 15462, byte_end: 15463 }: .
Token { kind: Name(Identifier), char_start: 15463, char_end: 15466, byte_start: 15463, byte_end: 15466 }: api
Token { kind: Punctuator(Dot), char_start: 15466, char_end: 15467, byte_start: 15466, byte_end: 15467 }: .
Token { kind: Name(Identifier), char_start: 15467, char_end: 15485, byte_start: 15467, byte_end: 15485 }: nvim_buf_get_lines
Token { kind: Punctuator(Lparen), char_start: 15485, char_end: 15486, byte_start: 15485, byte_end: 15486 }: (
Token { kind: Name(Identifier), char_start: 15497, char_end: 15511, byte_start: 15497, byte_end: 15511 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 15511, char_end: 15512, byte_start: 15511, byte_end: 15512 }: ,
Token { kind: Name(Identifier), char_start: 15523, char_end: 15545, byte_start: 15523, byte_end: 15545 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 15546, char_end: 15547, byte_start: 15546, byte_end: 15547 }: -
Token { kind: Literal(Number), char_start: 15548, char_end: 15549, byte_start: 15548, byte_end: 15549 }: 2
Token { kind: Punctuator(Comma), char_start: 15549, char_end: 15550, byte_start: 15549, byte_end: 15550 }: ,
Token { kind: Name(Identifier), char_start: 15561, char_end: 15583, byte_start: 15561, byte_end: 15583 }: chooser_selected_index
Token { kind: Punctuator(Comma), char_start: 15583, char_end: 15584, byte_start: 15583, byte_end: 15584 }: ,
Token { kind: Name(Keyword(False)), char_start: 15595, char_end: 15600, byte_start: 15595, byte_end: 15600 }: false
Token { kind: Punctuator(Rparen), char_start: 15609, char_end: 15610, byte_start: 15609, byte_end: 15610 }: )
Token { kind: Name(Identifier), char_start: 15619, char_end: 15622, byte_start: 15619, byte_end: 15622 }: vim
Token { kind: Punctuator(Dot), char_start: 15622, char_end: 15623, byte_start: 15622, byte_end: 15623 }: .
Token { kind: Name(Identifier), char_start: 15623, char_end: 15626, byte_start: 15623, byte_end: 15626 }: api
Token { kind: Punctuator(Dot), char_start: 15626, char_end: 15627, byte_start: 15626, byte_end: 15627 }: .
Token { kind: Name(Identifier), char_start: 15627, char_end: 15645, byte_start: 15627, byte_end: 15645 }: nvim_buf_set_lines
Token { kind: Punctuator(Lparen), char_start: 15645, char_end: 15646, byte_start: 15645, byte_end: 15646 }: (
Token { kind: Name(Identifier), char_start: 15657, char_end: 15671, byte_start: 15657, byte_end: 15671 }: chooser_buffer
Token { kind: Punctuator(Comma), char_start: 15671, char_end: 15672, byte_start: 15671, byte_end: 15672 }: ,
Token { kind: Name(Identifier), char_start: 15683, char_end: 15705, byte_start: 15683, byte_end: 15705 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 15706, char_end: 15707, byte_start: 15706, byte_end: 15707 }: -
Token { kind: Literal(Number), char_start: 15708, char_end: 15709, byte_start: 15708, byte_end: 15709 }: 2
Token { kind: Punctuator(Comma), char_start: 15709, char_end: 15710, byte_start: 15709, byte_end: 15710 }: ,
Token { kind: Name(Identifier), char_start: 15721, char_end: 15743, byte_start: 15721, byte_end: 15743 }: chooser_selected_index
Token { kind: Punctuator(Comma), char_start: 15743, char_end: 15744, byte_start: 15743, byte_end: 15744 }: ,
Token { kind: Name(Keyword(False)), char_start: 15755, char_end: 15760, byte_start: 15755, byte_end: 15760 }: false
Token { kind: Punctuator(Comma), char_start: 15760, char_end: 15761, byte_start: 15760, byte_end: 15761 }: ,
Token { kind: Comment(LineComment), char_start: 15762, char_end: 15782, byte_start: 15762, byte_end: 15782 }: -- strict indexing?

Token { kind: Punctuator(Lcurly), char_start: 15792, char_end: 15793, byte_start: 15792, byte_end: 15793 }: {
Token { kind: Punctuator(Lparen), char_start: 15806, char_end: 15807, byte_start: 15806, byte_end: 15807 }: (
Token { kind: Punctuator(Lcurly), char_start: 15807, char_end: 15808, byte_start: 15807, byte_end: 15808 }: {
Token { kind: Name(Identifier), char_start: 15808, char_end: 15813, byte_start: 15808, byte_end: 15813 }: lines
Token { kind: Punctuator(Lbracket), char_start: 15813, char_end: 15814, byte_start: 15813, byte_end: 15814 }: [
Token { kind: Literal(Number), char_start: 15814, char_end: 15815, byte_start: 15814, byte_end: 15815 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15815, char_end: 15816, byte_start: 15815, byte_end: 15816 }: ]
Token { kind: Punctuator(Colon), char_start: 15816, char_end: 15817, byte_start: 15816, byte_end: 15817 }: :
Token { kind: Name(Identifier), char_start: 15817, char_end: 15821, byte_start: 15817, byte_end: 15821 }: gsub
Token { kind: Punctuator(Lparen), char_start: 15821, char_end: 15822, byte_start: 15821, byte_end: 15822 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 15822, char_end: 15827, byte_start: 15822, byte_end: 15827 }: '^..'
Token { kind: Punctuator(Comma), char_start: 15827, char_end: 15828, byte_start: 15827, byte_end: 15828 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 15829, char_end: 15833, byte_start: 15829, byte_end: 15833 }: '> '
Token { kind: Punctuator(Rparen), char_start: 15833, char_end: 15834, byte_start: 15833, byte_end: 15834 }: )
Token { kind: Punctuator(Rcurly), char_start: 15834, char_end: 15835, byte_start: 15834, byte_end: 15835 }: }
Token { kind: Punctuator(Rparen), char_start: 15835, char_end: 15836, byte_start: 15835, byte_end: 15836 }: )
Token { kind: Punctuator(Lbracket), char_start: 15836, char_end: 15837, byte_start: 15836, byte_end: 15837 }: [
Token { kind: Literal(Number), char_start: 15837, char_end: 15838, byte_start: 15837, byte_end: 15838 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15838, char_end: 15839, byte_start: 15838, byte_end: 15839 }: ]
Token { kind: Punctuator(Comma), char_start: 15839, char_end: 15840, byte_start: 15839, byte_end: 15840 }: ,
Token { kind: Punctuator(Lparen), char_start: 15853, char_end: 15854, byte_start: 15853, byte_end: 15854 }: (
Token { kind: Punctuator(Lcurly), char_start: 15854, char_end: 15855, byte_start: 15854, byte_end: 15855 }: {
Token { kind: Name(Identifier), char_start: 15855, char_end: 15860, byte_start: 15855, byte_end: 15860 }: lines
Token { kind: Punctuator(Lbracket), char_start: 15860, char_end: 15861, byte_start: 15860, byte_end: 15861 }: [
Token { kind: Literal(Number), char_start: 15861, char_end: 15862, byte_start: 15861, byte_end: 15862 }: 2
Token { kind: Punctuator(Rbracket), char_start: 15862, char_end: 15863, byte_start: 15862, byte_end: 15863 }: ]
Token { kind: Punctuator(Colon), char_start: 15863, char_end: 15864, byte_start: 15863, byte_end: 15864 }: :
Token { kind: Name(Identifier), char_start: 15864, char_end: 15868, byte_start: 15864, byte_end: 15868 }: gsub
Token { kind: Punctuator(Lparen), char_start: 15868, char_end: 15869, byte_start: 15868, byte_end: 15869 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 15869, char_end: 15874, byte_start: 15869, byte_end: 15874 }: '^..'
Token { kind: Punctuator(Comma), char_start: 15874, char_end: 15875, byte_start: 15874, byte_end: 15875 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 15876, char_end: 15880, byte_start: 15876, byte_end: 15880 }: '  '
Token { kind: Punctuator(Rparen), char_start: 15880, char_end: 15881, byte_start: 15880, byte_end: 15881 }: )
Token { kind: Punctuator(Rcurly), char_start: 15881, char_end: 15882, byte_start: 15881, byte_end: 15882 }: }
Token { kind: Punctuator(Rparen), char_start: 15882, char_end: 15883, byte_start: 15882, byte_end: 15883 }: )
Token { kind: Punctuator(Lbracket), char_start: 15883, char_end: 15884, byte_start: 15883, byte_end: 15884 }: [
Token { kind: Literal(Number), char_start: 15884, char_end: 15885, byte_start: 15884, byte_end: 15885 }: 1
Token { kind: Punctuator(Rbracket), char_start: 15885, char_end: 15886, byte_start: 15885, byte_end: 15886 }: ]
Token { kind: Punctuator(Comma), char_start: 15886, char_end: 15887, byte_start: 15886, byte_end: 15887 }: ,
Token { kind: Punctuator(Rcurly), char_start: 15898, char_end: 15899, byte_start: 15898, byte_end: 15899 }: }
Token { kind: Punctuator(Rparen), char_start: 15908, char_end: 15909, byte_start: 15908, byte_end: 15909 }: )
Token { kind: Name(Identifier), char_start: 15918, char_end: 15940, byte_start: 15918, byte_end: 15940 }: chooser_selected_index
Token { kind: Op(Assign), char_start: 15941, char_end: 15942, byte_start: 15941, byte_end: 15942 }: =
Token { kind: Name(Identifier), char_start: 15943, char_end: 15965, byte_start: 15943, byte_end: 15965 }: chooser_selected_index
Token { kind: Op(Minus), char_start: 15966, char_end: 15967, byte_start: 15966, byte_end: 15967 }: -
Token { kind: Literal(Number), char_start: 15968, char_end: 15969, byte_start: 15968, byte_end: 15969 }: 1
Token { kind: Name(Identifier), char_start: 15978, char_end: 15984, byte_start: 15978, byte_end: 15984 }: corpus
Token { kind: Punctuator(Dot), char_start: 15984, char_end: 15985, byte_start: 15984, byte_end: 15985 }: .
Token { kind: Name(Identifier), char_start: 15985, char_end: 16004, byte_start: 15985, byte_end: 16004 }: highlight_selection
Token { kind: Punctuator(Lparen), char_start: 16004, char_end: 16005, byte_start: 16004, byte_end: 16005 }: (
Token { kind: Punctuator(Rparen), char_start: 16005, char_end: 16006, byte_start: 16005, byte_end: 16006 }: )
Token { kind: Name(Keyword(End)), char_start: 16013, char_end: 16016, byte_start: 16013, byte_end: 16016 }: end
Token { kind: Name(Keyword(End)), char_start: 16021, char_end: 16024, byte_start: 16021, byte_end: 16024 }: end
Token { kind: Name(Keyword(End)), char_start: 16027, char_end: 16030, byte_start: 16027, byte_end: 16030 }: end
Token { kind: Punctuator(Comma), char_start: 16030, char_end: 16031, byte_start: 16030, byte_end: 16031 }: ,
Token { kind: Name(Identifier), char_start: 16035, char_end: 16041, byte_start: 16035, byte_end: 16041 }: search
Token { kind: Op(Assign), char_start: 16042, char_end: 16043, byte_start: 16042, byte_end: 16043 }: =
Token { kind: Name(Keyword(Function)), char_start: 16044, char_end: 16052, byte_start: 16044, byte_end: 16052 }: function
Token { kind: Punctuator(Lparen), char_start: 16052, char_end: 16053, byte_start: 16052, byte_end: 16053 }: (
Token { kind: Name(Identifier), char_start: 16053, char_end: 16058, byte_start: 16053, byte_end: 16058 }: terms
Token { kind: Punctuator(Comma), char_start: 16058, char_end: 16059, byte_start: 16058, byte_end: 16059 }: ,
Token { kind: Name(Identifier), char_start: 16060, char_end: 16068, byte_start: 16060, byte_end: 16068 }: callback
Token { kind: Punctuator(Rparen), char_start: 16068, char_end: 16069, byte_start: 16068, byte_end: 16069 }: )
Token { kind: Name(Keyword(If)), char_start: 16074, char_end: 16076, byte_start: 16074, byte_end: 16076 }: if
Token { kind: Name(Identifier), char_start: 16077, char_end: 16091, byte_start: 16077, byte_end: 16091 }: current_search
Token { kind: Op(Ne), char_start: 16092, char_end: 16094, byte_start: 16092, byte_end: 16094 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 16095, char_end: 16098, byte_start: 16095, byte_end: 16098 }: nil
Token { kind: Name(Keyword(Then)), char_start: 16099, char_end: 16103, byte_start: 16099, byte_end: 16103 }: then
Token { kind: Name(Identifier), char_start: 16110, char_end: 16124, byte_start: 16110, byte_end: 16124 }: current_search
Token { kind: Punctuator(Dot), char_start: 16124, char_end: 16125, byte_start: 16124, byte_end: 16125 }: .
Token { kind: Name(Identifier), char_start: 16125, char_end: 16131, byte_start: 16125, byte_end: 16131 }: cancel
Token { kind: Punctuator(Lparen), char_start: 16131, char_end: 16132, byte_start: 16131, byte_end: 16132 }: (
Token { kind: Punctuator(Rparen), char_start: 16132, char_end: 16133, byte_start: 16132, byte_end: 16133 }: )
Token { kind: Name(Keyword(End)), char_start: 16138, char_end: 16141, byte_start: 16138, byte_end: 16141 }: end
Token { kind: Name(Keyword(Local)), char_start: 16147, char_end: 16152, byte_start: 16147, byte_end: 16152 }: local
Token { kind: Name(Identifier), char_start: 16153, char_end: 16162, byte_start: 16153, byte_end: 16162 }: directory
Token { kind: Op(Assign), char_start: 16163, char_end: 16164, byte_start: 16163, byte_end: 16164 }: =
Token { kind: Name(Identifier), char_start: 16165, char_end: 16171, byte_start: 16165, byte_end: 16171 }: corpus
Token { kind: Punctuator(Dot), char_start: 16171, char_end: 16172, byte_start: 16171, byte_end: 16172 }: .
Token { kind: Name(Identifier), char_start: 16172, char_end: 16181, byte_start: 16172, byte_end: 16181 }: directory
Token { kind: Punctuator(Lparen), char_start: 16181, char_end: 16182, byte_start: 16181, byte_end: 16182 }: (
Token { kind: Punctuator(Rparen), char_start: 16182, char_end: 16183, byte_start: 16182, byte_end: 16183 }: )
Token { kind: Name(Keyword(If)), char_start: 16189, char_end: 16191, byte_start: 16189, byte_end: 16191 }: if
Token { kind: Name(Identifier), char_start: 16192, char_end: 16201, byte_start: 16192, byte_end: 16201 }: directory
Token { kind: Op(Eq), char_start: 16202, char_end: 16204, byte_start: 16202, byte_end: 16204 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 16205, char_end: 16208, byte_start: 16205, byte_end: 16208 }: nil
Token { kind: Name(Keyword(Then)), char_start: 16209, char_end: 16213, byte_start: 16209, byte_end: 16213 }: then
Token { kind: Name(Identifier), char_start: 16220, char_end: 16228, byte_start: 16220, byte_end: 16228 }: callback
Token { kind: Punctuator(Lparen), char_start: 16228, char_end: 16229, byte_start: 16228, byte_end: 16229 }: (
Token { kind: Punctuator(Lcurly), char_start: 16229, char_end: 16230, byte_start: 16229, byte_end: 16230 }: {
Token { kind: Punctuator(Rcurly), char_start: 16230, char_end: 16231, byte_start: 16230, byte_end: 16231 }: }
Token { kind: Punctuator(Rparen), char_start: 16231, char_end: 16232, byte_start: 16231, byte_end: 16232 }: )
Token { kind: Name(Keyword(Else)), char_start: 16237, char_end: 16241, byte_start: 16237, byte_end: 16241 }: else
Token { kind: Name(Keyword(Local)), char_start: 16248, char_end: 16253, byte_start: 16248, byte_end: 16253 }: local
Token { kind: Name(Identifier), char_start: 16254, char_end: 16258, byte_start: 16254, byte_end: 16258 }: args
Token { kind: Op(Assign), char_start: 16259, char_end: 16260, byte_start: 16259, byte_end: 16260 }: =
Token { kind: Punctuator(Lcurly), char_start: 16261, char_end: 16262, byte_start: 16261, byte_end: 16262 }: {
Token { kind: Literal(Str(SingleQuoted)), char_start: 16271, char_end: 16277, byte_start: 16271, byte_end: 16277 }: 'grep'
Token { kind: Punctuator(Comma), char_start: 16277, char_end: 16278, byte_start: 16277, byte_end: 16278 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16287, char_end: 16291, byte_start: 16287, byte_end: 16291 }: '-I'
Token { kind: Punctuator(Comma), char_start: 16291, char_end: 16292, byte_start: 16291, byte_end: 16292 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16301, char_end: 16305, byte_start: 16301, byte_end: 16305 }: '-F'
Token { kind: Punctuator(Comma), char_start: 16305, char_end: 16306, byte_start: 16305, byte_end: 16306 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16315, char_end: 16319, byte_start: 16315, byte_end: 16319 }: '-l'
Token { kind: Punctuator(Comma), char_start: 16319, char_end: 16320, byte_start: 16319, byte_end: 16320 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16329, char_end: 16333, byte_start: 16329, byte_end: 16333 }: '-z'
Token { kind: Punctuator(Comma), char_start: 16333, char_end: 16334, byte_start: 16333, byte_end: 16334 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16343, char_end: 16356, byte_start: 16343, byte_end: 16356 }: '--all-match'
Token { kind: Punctuator(Comma), char_start: 16356, char_end: 16357, byte_start: 16356, byte_end: 16357 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16366, char_end: 16379, byte_start: 16366, byte_end: 16379 }: '--untracked'
Token { kind: Punctuator(Rcurly), char_start: 16386, char_end: 16387, byte_start: 16386, byte_end: 16387 }: }
Token { kind: Name(Keyword(If)), char_start: 16395, char_end: 16397, byte_start: 16395, byte_end: 16397 }: if
Token { kind: Name(Keyword(Not)), char_start: 16398, char_end: 16401, byte_start: 16398, byte_end: 16401 }: not
Token { kind: Name(Identifier), char_start: 16402, char_end: 16408, byte_start: 16402, byte_end: 16408 }: corpus
Token { kind: Punctuator(Dot), char_start: 16408, char_end: 16409, byte_start: 16408, byte_end: 16409 }: .
Token { kind: Name(Identifier), char_start: 16409, char_end: 16418, byte_start: 16409, byte_end: 16418 }: smartcase
Token { kind: Punctuator(Lparen), char_start: 16418, char_end: 16419, byte_start: 16418, byte_end: 16419 }: (
Token { kind: Name(Identifier), char_start: 16419, char_end: 16424, byte_start: 16419, byte_end: 16424 }: terms
Token { kind: Punctuator(Rparen), char_start: 16424, char_end: 16425, byte_start: 16424, byte_end: 16425 }: )
Token { kind: Name(Keyword(Then)), char_start: 16426, char_end: 16430, byte_start: 16426, byte_end: 16430 }: then
Token { kind: Name(Identifier), char_start: 16439, char_end: 16444, byte_start: 16439, byte_end: 16444 }: table
Token { kind: Punctuator(Dot), char_start: 16444, char_end: 16445, byte_start: 16444, byte_end: 16445 }: .
Token { kind: Name(Identifier), char_start: 16445, char_end: 16451, byte_start: 16445, byte_end: 16451 }: insert
Token { kind: Punctuator(Lparen), char_start: 16451, char_end: 16452, byte_start: 16451, byte_end: 16452 }: (
Token { kind: Name(Identifier), char_start: 16452, char_end: 16456, byte_start: 16452, byte_end: 16456 }: args
Token { kind: Punctuator(Comma), char_start: 16456, char_end: 16457, byte_start: 16456, byte_end: 16457 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16458, char_end: 16462, byte_start: 16458, byte_end: 16462 }: '-i'
Token { kind: Punctuator(Rparen), char_start: 16462, char_end: 16463, byte_start: 16462, byte_end: 16463 }: )
Token { kind: Name(Keyword(End)), char_start: 16470, char_end: 16473, byte_start: 16470, byte_end: 16473 }: end
Token { kind: Name(Keyword(For)), char_start: 16481, char_end: 16484, byte_start: 16481, byte_end: 16484 }: for
Token { kind: Name(Identifier), char_start: 16485, char_end: 16489, byte_start: 16485, byte_end: 16489 }: term
Token { kind: Name(Keyword(In)), char_start: 16490, char_end: 16492, byte_start: 16490, byte_end: 16492 }: in
Token { kind: Name(Identifier), char_start: 16493, char_end: 16498, byte_start: 16493, byte_end: 16498 }: terms
Token { kind: Punctuator(Colon), char_start: 16498, char_end: 16499, byte_start: 16498, byte_end: 16499 }: :
Token { kind: Name(Identifier), char_start: 16499, char_end: 16505, byte_start: 16499, byte_end: 16505 }: gmatch
Token { kind: Punctuator(Lparen), char_start: 16505, char_end: 16506, byte_start: 16505, byte_end: 16506 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 16506, char_end: 16511, byte_start: 16506, byte_end: 16511 }: '%S+'
Token { kind: Punctuator(Rparen), char_start: 16511, char_end: 16512, byte_start: 16511, byte_end: 16512 }: )
Token { kind: Name(Keyword(Do)), char_start: 16513, char_end: 16515, byte_start: 16513, byte_end: 16515 }: do
Token { kind: Name(Identifier), char_start: 16524, char_end: 16528, byte_start: 16524, byte_end: 16528 }: util
Token { kind: Punctuator(Dot), char_start: 16528, char_end: 16529, byte_start: 16528, byte_end: 16529 }: .
Token { kind: Name(Identifier), char_start: 16529, char_end: 16533, byte_start: 16529, byte_end: 16533 }: list
Token { kind: Punctuator(Dot), char_start: 16533, char_end: 16534, byte_start: 16533, byte_end: 16534 }: .
Token { kind: Name(Identifier), char_start: 16534, char_end: 16538, byte_start: 16534, byte_end: 16538 }: push
Token { kind: Punctuator(Lparen), char_start: 16538, char_end: 16539, byte_start: 16538, byte_end: 16539 }: (
Token { kind: Name(Identifier), char_start: 16539, char_end: 16543, byte_start: 16539, byte_end: 16543 }: args
Token { kind: Punctuator(Comma), char_start: 16543, char_end: 16544, byte_start: 16543, byte_end: 16544 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16545, char_end: 16549, byte_start: 16545, byte_end: 16549 }: '-e'
Token { kind: Punctuator(Comma), char_start: 16549, char_end: 16550, byte_start: 16549, byte_end: 16550 }: ,
Token { kind: Name(Identifier), char_start: 16551, char_end: 16555, byte_start: 16551, byte_end: 16555 }: term
Token { kind: Punctuator(Rparen), char_start: 16555, char_end: 16556, byte_start: 16555, byte_end: 16556 }: )
Token { kind: Name(Keyword(End)), char_start: 16563, char_end: 16566, byte_start: 16563, byte_end: 16566 }: end
Token { kind: Name(Identifier), char_start: 16574, char_end: 16578, byte_start: 16574, byte_end: 16578 }: util
Token { kind: Punctuator(Dot), char_start: 16578, char_end: 16579, byte_start: 16578, byte_end: 16579 }: .
Token { kind: Name(Identifier), char_start: 16579, char_end: 16583, byte_start: 16579, byte_end: 16583 }: list
Token { kind: Punctuator(Dot), char_start: 16583, char_end: 16584, byte_start: 16583, byte_end: 16584 }: .
Token { kind: Name(Identifier), char_start: 16584, char_end: 16588, byte_start: 16584, byte_end: 16588 }: push
Token { kind: Punctuator(Lparen), char_start: 16588, char_end: 16589, byte_start: 16588, byte_end: 16589 }: (
Token { kind: Name(Identifier), char_start: 16589, char_end: 16593, byte_start: 16589, byte_end: 16593 }: args
Token { kind: Punctuator(Comma), char_start: 16593, char_end: 16594, byte_start: 16593, byte_end: 16594 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16595, char_end: 16599, byte_start: 16595, byte_end: 16599 }: '--'
Token { kind: Punctuator(Comma), char_start: 16599, char_end: 16600, byte_start: 16599, byte_end: 16600 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 16601, char_end: 16607, byte_start: 16601, byte_end: 16607 }: '*.md'
Token { kind: Punctuator(Rparen), char_start: 16607, char_end: 16608, byte_start: 16607, byte_end: 16608 }: )
Token { kind: Name(Keyword(Local)), char_start: 16616, char_end: 16621, byte_start: 16616, byte_end: 16621 }: local
Token { kind: Name(Identifier), char_start: 16622, char_end: 16628, byte_start: 16622, byte_end: 16628 }: stdout
Token { kind: Op(Assign), char_start: 16629, char_end: 16630, byte_start: 16629, byte_end: 16630 }: =
Token { kind: Punctuator(Lcurly), char_start: 16631, char_end: 16632, byte_start: 16631, byte_end: 16632 }: {
Token { kind: Punctuator(Rcurly), char_start: 16632, char_end: 16633, byte_start: 16632, byte_end: 16633 }: }
Token { kind: Name(Identifier), char_start: 16641, char_end: 16655, byte_start: 16641, byte_end: 16655 }: current_search
Token { kind: Op(Assign), char_start: 16656, char_end: 16657, byte_start: 16656, byte_end: 16657 }: =
Token { kind: Name(Identifier), char_start: 16658, char_end: 16662, byte_start: 16658, byte_end: 16662 }: util
Token { kind: Punctuator(Dot), char_start: 16662, char_end: 16663, byte_start: 16662, byte_end: 16663 }: .
Token { kind: Name(Identifier), char_start: 16663, char_end: 16666, byte_start: 16663, byte_end: 16666 }: run
Token { kind: Punctuator(Lparen), char_start: 16666, char_end: 16667, byte_start: 16666, byte_end: 16667 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 16667, char_end: 16672, byte_start: 16667, byte_end: 16672 }: 'git'
Token { kind: Punctuator(Comma), char_start: 16672, char_end: 16673, byte_start: 16672, byte_end: 16673 }: ,
Token { kind: Name(Identifier), char_start: 16674, char_end: 16678, byte_start: 16674, byte_end: 16678 }: args
Token { kind: Punctuator(Comma), char_start: 16678, char_end: 16679, byte_start: 16678, byte_end: 16679 }: ,
Token { kind: Punctuator(Lcurly), char_start: 16680, char_end: 16681, byte_start: 16680, byte_end: 16681 }: {
Token { kind: Name(Identifier), char_start: 16690, char_end: 16693, byte_start: 16690, byte_end: 16693 }: cwd
Token { kind: Op(Assign), char_start: 16694, char_end: 16695, byte_start: 16694, byte_end: 16695 }: =
Token { kind: Name(Identifier), char_start: 16696, char_end: 16705, byte_start: 16696, byte_end: 16705 }: directory
Token { kind: Punctuator(Comma), char_start: 16705, char_end: 16706, byte_start: 16705, byte_end: 16706 }: ,
Token { kind: Name(Identifier), char_start: 16715, char_end: 16722, byte_start: 16715, byte_end: 16722 }: on_exit
Token { kind: Op(Assign), char_start: 16723, char_end: 16724, byte_start: 16723, byte_end: 16724 }: =
Token { kind: Name(Keyword(Function)), char_start: 16725, char_end: 16733, byte_start: 16725, byte_end: 16733 }: function
Token { kind: Punctuator(Lparen), char_start: 16733, char_end: 16734, byte_start: 16733, byte_end: 16734 }: (
Token { kind: Name(Identifier), char_start: 16734, char_end: 16738, byte_start: 16734, byte_end: 16738 }: code
Token { kind: Punctuator(Comma), char_start: 16738, char_end: 16739, byte_start: 16738, byte_end: 16739 }: ,
Token { kind: Name(Identifier), char_start: 16740, char_end: 16746, byte_start: 16740, byte_end: 16746 }: signal
Token { kind: Punctuator(Rparen), char_start: 16746, char_end: 16747, byte_start: 16746, byte_end: 16747 }: )
Token { kind: Name(Keyword(If)), char_start: 16758, char_end: 16760, byte_start: 16758, byte_end: 16760 }: if
Token { kind: Name(Identifier), char_start: 16761, char_end: 16765, byte_start: 16761, byte_end: 16765 }: code
Token { kind: Op(Eq), char_start: 16766, char_end: 16768, byte_start: 16766, byte_end: 16768 }: ==
Token { kind: Literal(Number), char_start: 16769, char_end: 16770, byte_start: 16769, byte_end: 16770 }: 0
Token { kind: Name(Keyword(Then)), char_start: 16771, char_end: 16775, byte_start: 16771, byte_end: 16775 }: then
Token { kind: Name(Keyword(Local)), char_start: 16788, char_end: 16793, byte_start: 16788, byte_end: 16793 }: local
Token { kind: Name(Identifier), char_start: 16794, char_end: 16798, byte_start: 16794, byte_end: 16798 }: list
Token { kind: Op(Assign), char_start: 16799, char_end: 16800, byte_start: 16799, byte_end: 16800 }: =
Token { kind: Punctuator(Lcurly), char_start: 16801, char_end: 16802, byte_start: 16801, byte_end: 16802 }: {
Token { kind: Punctuator(Rcurly), char_start: 16802, char_end: 16803, byte_start: 16802, byte_end: 16803 }: }
Token { kind: Comment(LineComment), char_start: 16816, char_end: 16879, byte_start: 16816, byte_end: 16879 }: -- Just like in `corpus.list()`, beware of file names that are

Token { kind: Comment(LineComment), char_start: 16891, char_end: 16917, byte_start: 16891, byte_end: 16917 }: -- split over two chunks.

Token { kind: Name(Keyword(Local)), char_start: 16929, char_end: 16934, byte_start: 16929, byte_end: 16934 }: local
Token { kind: Name(Identifier), char_start: 16935, char_end: 16942, byte_start: 16935, byte_end: 16942 }: pending
Token { kind: Op(Assign), char_start: 16943, char_end: 16944, byte_start: 16943, byte_end: 16944 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 16945, char_end: 16947, byte_start: 16945, byte_end: 16947 }: ''
Token { kind: Name(Keyword(For)), char_start: 16960, char_end: 16963, byte_start: 16960, byte_end: 16963 }: for
Token { kind: Name(Identifier), char_start: 16964, char_end: 16965, byte_start: 16964, byte_end: 16965 }: _
Token { kind: Punctuator(Comma), char_start: 16965, char_end: 16966, byte_start: 16965, byte_end: 16966 }: ,
Token { kind: Name(Identifier), char_start: 16967, char_end: 16972, byte_start: 16967, byte_end: 16972 }: chunk
Token { kind: Name(Keyword(In)), char_start: 16973, char_end: 16975, byte_start: 16973, byte_end: 16975 }: in
Token { kind: Name(Identifier), char_start: 16976, char_end: 16982, byte_start: 16976, byte_end: 16982 }: ipairs
Token { kind: Punctuator(Lparen), char_start: 16982, char_end: 16983, byte_start: 16982, byte_end: 16983 }: (
Token { kind: Name(Identifier), char_start: 16983, char_end: 16989, byte_start: 16983, byte_end: 16989 }: stdout
Token { kind: Punctuator(Rparen), char_start: 16989, char_end: 16990, byte_start: 16989, byte_end: 16990 }: )
Token { kind: Name(Keyword(Do)), char_start: 16991, char_end: 16993, byte_start: 16991, byte_end: 16993 }: do
Token { kind: Name(Keyword(For)), char_start: 17008, char_end: 17011, byte_start: 17008, byte_end: 17011 }: for
Token { kind: Name(Identifier), char_start: 17012, char_end: 17017, byte_start: 17012, byte_end: 17017 }: match
Token { kind: Name(Keyword(In)), char_start: 17018, char_end: 17020, byte_start: 17018, byte_end: 17020 }: in
Token { kind: Name(Identifier), char_start: 17021, char_end: 17026, byte_start: 17021, byte_end: 17026 }: chunk
Token { kind: Punctuator(Colon), char_start: 17026, char_end: 17027, byte_start: 17026, byte_end: 17027 }: :
Token { kind: Name(Identifier), char_start: 17027, char_end: 17033, byte_start: 17027, byte_end: 17033 }: gmatch
Token { kind: Punctuator(Lparen), char_start: 17033, char_end: 17034, byte_start: 17033, byte_end: 17034 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 17034, char_end: 17042, byte_start: 17034, byte_end: 17042 }: '%Z*%z?'
Token { kind: Punctuator(Rparen), char_start: 17042, char_end: 17043, byte_start: 17042, byte_end: 17043 }: )
Token { kind: Name(Keyword(Do)), char_start: 17044, char_end: 17046, byte_start: 17044, byte_end: 17046 }: do
Token { kind: Name(Keyword(If)), char_start: 17063, char_end: 17065, byte_start: 17063, byte_end: 17065 }: if
Token { kind: Name(Identifier), char_start: 17066, char_end: 17069, byte_start: 17066, byte_end: 17069 }: vim
Token { kind: Punctuator(Dot), char_start: 17069, char_end: 17070, byte_start: 17069, byte_end: 17070 }: .
Token { kind: Name(Identifier), char_start: 17070, char_end: 17078, byte_start: 17070, byte_end: 17078 }: endswith
Token { kind: Punctuator(Lparen), char_start: 17078, char_end: 17079, byte_start: 17078, byte_end: 17079 }: (
Token { kind: Name(Identifier), char_start: 17079, char_end: 17084, byte_start: 17079, byte_end: 17084 }: match
Token { kind: Punctuator(Comma), char_start: 17084, char_end: 17085, byte_start: 17084, byte_end: 17085 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 17086, char_end: 17090, byte_start: 17086, byte_end: 17090 }: '\0'
Token { kind: Punctuator(Rparen), char_start: 17090, char_end: 17091, byte_start: 17090, byte_end: 17091 }: )
Token { kind: Name(Keyword(Then)), char_start: 17092, char_end: 17096, byte_start: 17092, byte_end: 17096 }: then
Token { kind: Name(Keyword(Local)), char_start: 17115, char_end: 17120, byte_start: 17115, byte_end: 17120 }: local
Token { kind: Name(Identifier), char_start: 17121, char_end: 17125, byte_start: 17121, byte_end: 17125 }: file
Token { kind: Op(Assign), char_start: 17126, char_end: 17127, byte_start: 17126, byte_end: 17127 }: =
Token { kind: Name(Identifier), char_start: 17128, char_end: 17135, byte_start: 17128, byte_end: 17135 }: pending
Token { kind: Op(Concat), char_start: 17136, char_end: 17138, byte_start: 17136, byte_end: 17138 }: ..
Token { kind: Name(Identifier), char_start: 17139, char_end: 17144, byte_start: 17139, byte_end: 17144 }: match
Token { kind: Punctuator(Colon), char_start: 17144, char_end: 17145, byte_start: 17144, byte_end: 17145 }: :
Token { kind: Name(Identifier), char_start: 17145, char_end: 17148, byte_start: 17145, byte_end: 17148 }: sub
Token { kind: Punctuator(Lparen), char_start: 17148, char_end: 17149, byte_start: 17148, byte_end: 17149 }: (
Token { kind: Literal(Number), char_start: 17149, char_end: 17150, byte_start: 17149, byte_end: 17150 }: 1
Token { kind: Punctuator(Comma), char_start: 17150, char_end: 17151, byte_start: 17150, byte_end: 17151 }: ,
Token { kind: Op(Minus), char_start: 17152, char_end: 17153, byte_start: 17152, byte_end: 17153 }: -
Token { kind: Literal(Number), char_start: 17153, char_end: 17154, byte_start: 17153, byte_end: 17154 }: 2
Token { kind: Punctuator(Rparen), char_start: 17154, char_end: 17155, byte_start: 17154, byte_end: 17155 }: )
Token { kind: Name(Identifier), char_start: 17174, char_end: 17181, byte_start: 17174, byte_end: 17181 }: pending
Token { kind: Op(Assign), char_start: 17182, char_end: 17183, byte_start: 17182, byte_end: 17183 }: =
Token { kind: Literal(Str(SingleQuoted)), char_start: 17184, char_end: 17186, byte_start: 17184, byte_end: 17186 }: ''
Token { kind: Comment(LineComment), char_start: 17206, char_end: 17265, byte_start: 17206, byte_end: 17265 }: -- Note Git Bug here: -z here doesn't always prevent stuff

Token { kind: Comment(LineComment), char_start: 17283, char_end: 17345, byte_start: 17283, byte_end: 17345 }: -- from getting escaped; if in a subdirectory, `git grep` may

Token { kind: Comment(LineComment), char_start: 17363, char_end: 17387, byte_start: 17363, byte_end: 17387 }: -- return results like:

Token { kind: Comment(LineComment), char_start: 17405, char_end: 17408, byte_start: 17405, byte_end: 17408 }: --

Token { kind: Comment(LineComment), char_start: 17426, char_end: 17472, byte_start: 17426, byte_end: 17472 }: --    "\"HTML is probably what you want\".md"

Token { kind: Comment(LineComment), char_start: 17490, char_end: 17509, byte_start: 17490, byte_end: 17509 }: --    Akephalos.md

Token { kind: Comment(LineComment), char_start: 17527, char_end: 17555, byte_start: 17527, byte_end: 17555 }: --    JavaScript loading.md

Token { kind: Comment(LineComment), char_start: 17573, char_end: 17576, byte_start: 17573, byte_end: 17576 }: --

Token { kind: Comment(LineComment), char_start: 17594, char_end: 17699, byte_start: 17594, byte_end: 17699 }: -- See: https://public-inbox.org/git/CAOyLvt9=wRfpvGGJqLMi7=wLWu881pOur8c9qNEg+Xqhf8W2ww@mail.gmail.com/

Token { kind: Name(Keyword(If)), char_start: 17717, char_end: 17719, byte_start: 17717, byte_end: 17719 }: if
Token { kind: Name(Identifier), char_start: 17720, char_end: 17723, byte_start: 17720, byte_end: 17723 }: vim
Token { kind: Punctuator(Dot), char_start: 17723, char_end: 17724, byte_start: 17723, byte_end: 17724 }: .
Token { kind: Name(Identifier), char_start: 17724, char_end: 17734, byte_start: 17724, byte_end: 17734 }: startswith
Token { kind: Punctuator(Lparen), char_start: 17734, char_end: 17735, byte_start: 17734, byte_end: 17735 }: (
Token { kind: Name(Identifier), char_start: 17735, char_end: 17739, byte_start: 17735, byte_end: 17739 }: file
Token { kind: Punctuator(Comma), char_start: 17739, char_end: 17740, byte_start: 17739, byte_end: 17740 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 17741, char_end: 17744, byte_start: 17741, byte_end: 17744 }: '"'
Token { kind: Punctuator(Rparen), char_start: 17744, char_end: 17745, byte_start: 17744, byte_end: 17745 }: )
Token { kind: Name(Keyword(And)), char_start: 17746, char_end: 17749, byte_start: 17746, byte_end: 17749 }: and
Token { kind: Name(Identifier), char_start: 17750, char_end: 17753, byte_start: 17750, byte_end: 17753 }: vim
Token { kind: Punctuator(Dot), char_start: 17753, char_end: 17754, byte_start: 17753, byte_end: 17754 }: .
Token { kind: Name(Identifier), char_start: 17754, char_end: 17762, byte_start: 17754, byte_end: 17762 }: endswith
Token { kind: Punctuator(Lparen), char_start: 17762, char_end: 17763, byte_start: 17762, byte_end: 17763 }: (
Token { kind: Name(Identifier), char_start: 17763, char_end: 17767, byte_start: 17763, byte_end: 17767 }: file
Token { kind: Punctuator(Comma), char_start: 17767, char_end: 17768, byte_start: 17767, byte_end: 17768 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 17769, char_end: 17772, byte_start: 17769, byte_end: 17772 }: '"'
Token { kind: Punctuator(Rparen), char_start: 17772, char_end: 17773, byte_start: 17772, byte_end: 17773 }: )
Token { kind: Name(Keyword(Then)), char_start: 17774, char_end: 17778, byte_start: 17774, byte_end: 17778 }: then
Token { kind: Name(Identifier), char_start: 17799, char_end: 17804, byte_start: 17799, byte_end: 17804 }: table
Token { kind: Punctuator(Dot), char_start: 17804, char_end: 17805, byte_start: 17804, byte_end: 17805 }: .
Token { kind: Name(Identifier), char_start: 17805, char_end: 17811, byte_start: 17805, byte_end: 17811 }: insert
Token { kind: Punctuator(Lparen), char_start: 17811, char_end: 17812, byte_start: 17811, byte_end: 17812 }: (
Token { kind: Name(Identifier), char_start: 17812, char_end: 17816, byte_start: 17812, byte_end: 17816 }: list
Token { kind: Punctuator(Comma), char_start: 17816, char_end: 17817, byte_start: 17816, byte_end: 17817 }: ,
Token { kind: Name(Identifier), char_start: 17818, char_end: 17822, byte_start: 17818, byte_end: 17822 }: file
Token { kind: Punctuator(Colon), char_start: 17822, char_end: 17823, byte_start: 17822, byte_end: 17823 }: :
Token { kind: Name(Identifier), char_start: 17823, char_end: 17826, byte_start: 17823, byte_end: 17826 }: sub
Token { kind: Punctuator(Lparen), char_start: 17826, char_end: 17827, byte_start: 17826, byte_end: 17827 }: (
Token { kind: Literal(Number), char_start: 17827, char_end: 17828, byte_start: 17827, byte_end: 17828 }: 2
Token { kind: Punctuator(Comma), char_start: 17828, char_end: 17829, byte_start: 17828, byte_end: 17829 }: ,
Token { kind: Op(Minus), char_start: 17830, char_end: 17831, byte_start: 17830, byte_end: 17831 }: -
Token { kind: Literal(Number), char_start: 17831, char_end: 17832, byte_start: 17831, byte_end: 17832 }: 2
Token { kind: Punctuator(Rparen), char_start: 17832, char_end: 17833, byte_start: 17832, byte_end: 17833 }: )
Token { kind: Punctuator(Colon), char_start: 17833, char_end: 17834, byte_start: 17833, byte_end: 17834 }: :
Token { kind: Name(Identifier), char_start: 17834, char_end: 17838, byte_start: 17834, byte_end: 17838 }: gsub
Token { kind: Punctuator(Lparen), char_start: 17838, char_end: 17839, byte_start: 17838, byte_end: 17839 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 17839, char_end: 17844, byte_start: 17839, byte_end: 17844 }: '\\"'
Token { kind: Punctuator(Comma), char_start: 17844, char_end: 17845, byte_start: 17844, byte_end: 17845 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 17846, char_end: 17849, byte_start: 17846, byte_end: 17849 }: '"'
Token { kind: Punctuator(Rparen), char_start: 17849, char_end: 17850, byte_start: 17849, byte_end: 17850 }: )
Token { kind: Punctuator(Rparen), char_start: 17850, char_end: 17851, byte_start: 17850, byte_end: 17851 }: )
Token { kind: Name(Keyword(Else)), char_start: 17870, char_end: 17874, byte_start: 17870, byte_end: 17874 }: else
Token { kind: Name(Identifier), char_start: 17895, char_end: 17900, byte_start: 17895, byte_end: 17900 }: table
Token { kind: Punctuator(Dot), char_start: 17900, char_end: 17901, byte_start: 17900, byte_end: 17901 }: .
Token { kind: Name(Identifier), char_start: 17901, char_end: 17907, byte_start: 17901, byte_end: 17907 }: insert
Token { kind: Punctuator(Lparen), char_start: 17907, char_end: 17908, byte_start: 17907, byte_end: 17908 }: (
Token { kind: Name(Identifier), char_start: 17908, char_end: 17912, byte_start: 17908, byte_end: 17912 }: list
Token { kind: Punctuator(Comma), char_start: 17912, char_end: 17913, byte_start: 17912, byte_end: 17913 }: ,
Token { kind: Name(Identifier), char_start: 17914, char_end: 17918, byte_start: 17914, byte_end: 17918 }: file
Token { kind: Punctuator(Rparen), char_start: 17918, char_end: 17919, byte_start: 17918, byte_end: 17919 }: )
Token { kind: Name(Keyword(End)), char_start: 17938, char_end: 17941, byte_start: 17938, byte_end: 17941 }: end
Token { kind: Name(Keyword(Else)), char_start: 17958, char_end: 17962, byte_start: 17958, byte_end: 17962 }: else
Token { kind: Name(Identifier), char_start: 17981, char_end: 17988, byte_start: 17981, byte_end: 17988 }: pending
Token { kind: Op(Assign), char_start: 17989, char_end: 17990, byte_start: 17989, byte_end: 17990 }: =
Token { kind: Name(Identifier), char_start: 17991, char_end: 17998, byte_start: 17991, byte_end: 17998 }: pending
Token { kind: Op(Concat), char_start: 17999, char_end: 18001, byte_start: 17999, byte_end: 18001 }: ..
Token { kind: Name(Identifier), char_start: 18002, char_end: 18007, byte_start: 18002, byte_end: 18007 }: match
Token { kind: Name(Keyword(End)), char_start: 18024, char_end: 18027, byte_start: 18024, byte_end: 18027 }: end
Token { kind: Name(Keyword(End)), char_start: 18042, char_end: 18045, byte_start: 18042, byte_end: 18045 }: end
Token { kind: Name(Keyword(End)), char_start: 18058, char_end: 18061, byte_start: 18058, byte_end: 18061 }: end
Token { kind: Name(Identifier), char_start: 18074, char_end: 18082, byte_start: 18074, byte_end: 18082 }: callback
Token { kind: Punctuator(Lparen), char_start: 18082, char_end: 18083, byte_start: 18082, byte_end: 18083 }: (
Token { kind: Name(Identifier), char_start: 18083, char_end: 18087, byte_start: 18083, byte_end: 18087 }: list
Token { kind: Punctuator(Rparen), char_start: 18087, char_end: 18088, byte_start: 18087, byte_end: 18088 }: )
Token { kind: Name(Keyword(Elseif)), char_start: 18099, char_end: 18105, byte_start: 18099, byte_end: 18105 }: elseif
Token { kind: Name(Identifier), char_start: 18106, char_end: 18110, byte_start: 18106, byte_end: 18110 }: code
Token { kind: Op(Eq), char_start: 18111, char_end: 18113, byte_start: 18111, byte_end: 18113 }: ==
Token { kind: Literal(Number), char_start: 18114, char_end: 18115, byte_start: 18114, byte_end: 18115 }: 1
Token { kind: Name(Keyword(Then)), char_start: 18116, char_end: 18120, byte_start: 18116, byte_end: 18120 }: then
Token { kind: Comment(LineComment), char_start: 18133, char_end: 18193, byte_start: 18133, byte_end: 18193 }: -- No matches, but "git grep" itself was correctly invoked.

Token { kind: Name(Identifier), char_start: 18205, char_end: 18213, byte_start: 18205, byte_end: 18213 }: callback
Token { kind: Punctuator(Lparen), char_start: 18213, char_end: 18214, byte_start: 18213, byte_end: 18214 }: (
Token { kind: Punctuator(Lcurly), char_start: 18214, char_end: 18215, byte_start: 18214, byte_end: 18215 }: {
Token { kind: Punctuator(Rcurly), char_start: 18215, char_end: 18216, byte_start: 18215, byte_end: 18216 }: }
Token { kind: Punctuator(Rparen), char_start: 18216, char_end: 18217, byte_start: 18216, byte_end: 18217 }: )
Token { kind: Name(Keyword(End)), char_start: 18228, char_end: 18231, byte_start: 18228, byte_end: 18231 }: end
Token { kind: Name(Keyword(End)), char_start: 18240, char_end: 18243, byte_start: 18240, byte_end: 18243 }: end
Token { kind: Punctuator(Comma), char_start: 18243, char_end: 18244, byte_start: 18243, byte_end: 18244 }: ,
Token { kind: Name(Identifier), char_start: 18253, char_end: 18262, byte_start: 18253, byte_end: 18262 }: on_stdout
Token { kind: Op(Assign), char_start: 18263, char_end: 18264, byte_start: 18263, byte_end: 18264 }: =
Token { kind: Name(Keyword(Function)), char_start: 18265, char_end: 18273, byte_start: 18265, byte_end: 18273 }: function
Token { kind: Punctuator(Lparen), char_start: 18273, char_end: 18274, byte_start: 18273, byte_end: 18274 }: (
Token { kind: Name(Identifier), char_start: 18274, char_end: 18277, byte_start: 18274, byte_end: 18277 }: err
Token { kind: Punctuator(Comma), char_start: 18277, char_end: 18278, byte_start: 18277, byte_end: 18278 }: ,
Token { kind: Name(Identifier), char_start: 18279, char_end: 18283, byte_start: 18279, byte_end: 18283 }: data
Token { kind: Punctuator(Rparen), char_start: 18283, char_end: 18284, byte_start: 18283, byte_end: 18284 }: )
Token { kind: Comment(LineComment), char_start: 18295, char_end: 18344, byte_start: 18295, byte_end: 18344 }: -- Seems unlikely we'd get an `err` here, but...

Token { kind: Name(Keyword(If)), char_start: 18354, char_end: 18356, byte_start: 18354, byte_end: 18356 }: if
Token { kind: Name(Identifier), char_start: 18357, char_end: 18360, byte_start: 18357, byte_end: 18360 }: err
Token { kind: Op(Eq), char_start: 18361, char_end: 18363, byte_start: 18361, byte_end: 18363 }: ==
Token { kind: Name(Keyword(Nil)), char_start: 18364, char_end: 18367, byte_start: 18364, byte_end: 18367 }: nil
Token { kind: Name(Keyword(Then)), char_start: 18368, char_end: 18372, byte_start: 18368, byte_end: 18372 }: then
Token { kind: Name(Identifier), char_start: 18385, char_end: 18390, byte_start: 18385, byte_end: 18390 }: table
Token { kind: Punctuator(Dot), char_start: 18390, char_end: 18391, byte_start: 18390, byte_end: 18391 }: .
Token { kind: Name(Identifier), char_start: 18391, char_end: 18397, byte_start: 18391, byte_end: 18397 }: insert
Token { kind: Punctuator(Lparen), char_start: 18397, char_end: 18398, byte_start: 18397, byte_end: 18398 }: (
Token { kind: Name(Identifier), char_start: 18398, char_end: 18404, byte_start: 18398, byte_end: 18404 }: stdout
Token { kind: Punctuator(Comma), char_start: 18404, char_end: 18405, byte_start: 18404, byte_end: 18405 }: ,
Token { kind: Name(Identifier), char_start: 18406, char_end: 18410, byte_start: 18406, byte_end: 18410 }: data
Token { kind: Punctuator(Rparen), char_start: 18410, char_end: 18411, byte_start: 18410, byte_end: 18411 }: )
Token { kind: Name(Keyword(End)), char_start: 18422, char_end: 18425, byte_start: 18422, byte_end: 18425 }: end
Token { kind: Name(Keyword(End)), char_start: 18434, char_end: 18437, byte_start: 18434, byte_end: 18437 }: end
Token { kind: Punctuator(Comma), char_start: 18437, char_end: 18438, byte_start: 18437, byte_end: 18438 }: ,
Token { kind: Punctuator(Rcurly), char_start: 18445, char_end: 18446, byte_start: 18445, byte_end: 18446 }: }
Token { kind: Punctuator(Rparen), char_start: 18446, char_end: 18447, byte_start: 18446, byte_end: 18447 }: )
Token { kind: Name(Keyword(End)), char_start: 18452, char_end: 18455, byte_start: 18452, byte_end: 18455 }: end
Token { kind: Name(Keyword(End)), char_start: 18458, char_end: 18461, byte_start: 18458, byte_end: 18461 }: end
Token { kind: Punctuator(Comma), char_start: 18461, char_end: 18462, byte_start: 18461, byte_end: 18462 }: ,
Token { kind: Comment(LineComment), char_start: 18466, char_end: 18543, byte_start: 18466, byte_end: 18543 }: -- Turns `afile` into a simplified absolute path with all symlinks resolved.

Token { kind: Comment(LineComment), char_start: 18545, char_end: 18622, byte_start: 18545, byte_end: 18622 }: -- If `afile` corresponds to a directory any trailing slash will be removed.

Token { kind: Name(Identifier), char_start: 18624, char_end: 18633, byte_start: 18624, byte_end: 18633 }: normalize
Token { kind: Op(Assign), char_start: 18634, char_end: 18635, byte_start: 18634, byte_end: 18635 }: =
Token { kind: Name(Keyword(Function)), char_start: 18636, char_end: 18644, byte_start: 18636, byte_end: 18644 }: function
Token { kind: Punctuator(Lparen), char_start: 18644, char_end: 18645, byte_start: 18644, byte_end: 18645 }: (
Token { kind: Name(Identifier), char_start: 18645, char_end: 18650, byte_start: 18645, byte_end: 18650 }: afile
Token { kind: Punctuator(Rparen), char_start: 18650, char_end: 18651, byte_start: 18650, byte_end: 18651 }: )
Token { kind: Name(Keyword(Local)), char_start: 18656, char_end: 18661, byte_start: 18656, byte_end: 18661 }: local
Token { kind: Name(Identifier), char_start: 18662, char_end: 18666, byte_start: 18662, byte_end: 18666 }: file
Token { kind: Op(Assign), char_start: 18667, char_end: 18668, byte_start: 18667, byte_end: 18668 }: =
Token { kind: Name(Identifier), char_start: 18669, char_end: 18674, byte_start: 18669, byte_end: 18674 }: afile
Token { kind: Name(Keyword(If)), char_start: 18679, char_end: 18681, byte_start: 18679, byte_end: 18681 }: if
Token { kind: Name(Identifier), char_start: 18682, char_end: 18685, byte_start: 18682, byte_end: 18685 }: vim
Token { kind: Punctuator(Dot), char_start: 18685, char_end: 18686, byte_start: 18685, byte_end: 18686 }: .
Token { kind: Name(Identifier), char_start: 18686, char_end: 18696, byte_start: 18686, byte_end: 18696 }: startswith
Token { kind: Punctuator(Lparen), char_start: 18696, char_end: 18697, byte_start: 18696, byte_end: 18697 }: (
Token { kind: Name(Identifier), char_start: 18697, char_end: 18701, byte_start: 18697, byte_end: 18701 }: file
Token { kind: Punctuator(Comma), char_start: 18701, char_end: 18702, byte_start: 18701, byte_end: 18702 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 18703, char_end: 18706, byte_start: 18703, byte_end: 18706 }: '<'
Token { kind: Punctuator(Rparen), char_start: 18706, char_end: 18707, byte_start: 18706, byte_end: 18707 }: )
Token { kind: Name(Keyword(Then)), char_start: 18708, char_end: 18712, byte_start: 18708, byte_end: 18712 }: then
Token { kind: Name(Identifier), char_start: 18719, char_end: 18723, byte_start: 18719, byte_end: 18723 }: file
Token { kind: Op(Assign), char_start: 18724, char_end: 18725, byte_start: 18724, byte_end: 18725 }: =
Token { kind: Name(Identifier), char_start: 18726, char_end: 18729, byte_start: 18726, byte_end: 18729 }: vim
Token { kind: Punctuator(Dot), char_start: 18729, char_end: 18730, byte_start: 18729, byte_end: 18730 }: .
Token { kind: Name(Identifier), char_start: 18730, char_end: 18732, byte_start: 18730, byte_end: 18732 }: fn
Token { kind: Punctuator(Dot), char_start: 18732, char_end: 18733, byte_start: 18732, byte_end: 18733 }: .
Token { kind: Name(Identifier), char_start: 18733, char_end: 18739, byte_start: 18733, byte_end: 18739 }: expand
Token { kind: Punctuator(Lparen), char_start: 18739, char_end: 18740, byte_start: 18739, byte_end: 18740 }: (
Token { kind: Name(Identifier), char_start: 18740, char_end: 18744, byte_start: 18740, byte_end: 18744 }: file
Token { kind: Punctuator(Rparen), char_start: 18744, char_end: 18745, byte_start: 18744, byte_end: 18745 }: )
Token { kind: Name(Keyword(End)), char_start: 18750, char_end: 18753, byte_start: 18750, byte_end: 18753 }: end
Token { kind: Name(Identifier), char_start: 18758, char_end: 18762, byte_start: 18758, byte_end: 18762 }: file
Token { kind: Op(Assign), char_start: 18763, char_end: 18764, byte_start: 18763, byte_end: 18764 }: =
Token { kind: Name(Identifier), char_start: 18765, char_end: 18768, byte_start: 18765, byte_end: 18768 }: vim
Token { kind: Punctuator(Dot), char_start: 18768, char_end: 18769, byte_start: 18768, byte_end: 18769 }: .
Token { kind: Name(Identifier), char_start: 18769, char_end: 18771, byte_start: 18769, byte_end: 18771 }: fn
Token { kind: Punctuator(Dot), char_start: 18771, char_end: 18772, byte_start: 18771, byte_end: 18772 }: .
Token { kind: Name(Identifier), char_start: 18772, char_end: 18779, byte_start: 18772, byte_end: 18779 }: resolve
Token { kind: Punctuator(Lparen), char_start: 18779, char_end: 18780, byte_start: 18779, byte_end: 18780 }: (
Token { kind: Name(Identifier), char_start: 18780, char_end: 18783, byte_start: 18780, byte_end: 18783 }: vim
Token { kind: Punctuator(Dot), char_start: 18783, char_end: 18784, byte_start: 18783, byte_end: 18784 }: .
Token { kind: Name(Identifier), char_start: 18784, char_end: 18786, byte_start: 18784, byte_end: 18786 }: fn
Token { kind: Punctuator(Dot), char_start: 18786, char_end: 18787, byte_start: 18786, byte_end: 18787 }: .
Token { kind: Name(Identifier), char_start: 18787, char_end: 18798, byte_start: 18787, byte_end: 18798 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 18798, char_end: 18799, byte_start: 18798, byte_end: 18799 }: (
Token { kind: Name(Identifier), char_start: 18799, char_end: 18803, byte_start: 18799, byte_end: 18803 }: file
Token { kind: Punctuator(Comma), char_start: 18803, char_end: 18804, byte_start: 18803, byte_end: 18804 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 18805, char_end: 18809, byte_start: 18805, byte_end: 18809 }: ':p'
Token { kind: Punctuator(Rparen), char_start: 18809, char_end: 18810, byte_start: 18809, byte_end: 18810 }: )
Token { kind: Punctuator(Rparen), char_start: 18810, char_end: 18811, byte_start: 18810, byte_end: 18811 }: )
Token { kind: Name(Keyword(If)), char_start: 18816, char_end: 18818, byte_start: 18816, byte_end: 18818 }: if
Token { kind: Name(Identifier), char_start: 18819, char_end: 18822, byte_start: 18819, byte_end: 18822 }: vim
Token { kind: Punctuator(Dot), char_start: 18822, char_end: 18823, byte_start: 18822, byte_end: 18823 }: .
Token { kind: Name(Identifier), char_start: 18823, char_end: 18831, byte_start: 18823, byte_end: 18831 }: endswith
Token { kind: Punctuator(Lparen), char_start: 18831, char_end: 18832, byte_start: 18831, byte_end: 18832 }: (
Token { kind: Name(Identifier), char_start: 18832, char_end: 18836, byte_start: 18832, byte_end: 18836 }: file
Token { kind: Punctuator(Comma), char_start: 18836, char_end: 18837, byte_start: 18836, byte_end: 18837 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 18838, char_end: 18841, byte_start: 18838, byte_end: 18841 }: '/'
Token { kind: Punctuator(Rparen), char_start: 18841, char_end: 18842, byte_start: 18841, byte_end: 18842 }: )
Token { kind: Name(Keyword(Then)), char_start: 18843, char_end: 18847, byte_start: 18843, byte_end: 18847 }: then
Token { kind: Name(Keyword(Return)), char_start: 18854, char_end: 18860, byte_start: 18854, byte_end: 18860 }: return
Token { kind: Name(Identifier), char_start: 18861, char_end: 18865, byte_start: 18861, byte_end: 18865 }: file
Token { kind: Punctuator(Colon), char_start: 18865, char_end: 18866, byte_start: 18865, byte_end: 18866 }: :
Token { kind: Name(Identifier), char_start: 18866, char_end: 18869, byte_start: 18866, byte_end: 18869 }: sub
Token { kind: Punctuator(Lparen), char_start: 18869, char_end: 18870, byte_start: 18869, byte_end: 18870 }: (
Token { kind: Literal(Number), char_start: 18870, char_end: 18871, byte_start: 18870, byte_end: 18871 }: 0
Token { kind: Punctuator(Comma), char_start: 18871, char_end: 18872, byte_start: 18871, byte_end: 18872 }: ,
Token { kind: Name(Identifier), char_start: 18873, char_end: 18877, byte_start: 18873, byte_end: 18877 }: file
Token { kind: Punctuator(Colon), char_start: 18877, char_end: 18878, byte_start: 18877, byte_end: 18878 }: :
Token { kind: Name(Identifier), char_start: 18878, char_end: 18881, byte_start: 18878, byte_end: 18881 }: len
Token { kind: Punctuator(Lparen), char_start: 18881, char_end: 18882, byte_start: 18881, byte_end: 18882 }: (
Token { kind: Punctuator(Rparen), char_start: 18882, char_end: 18883, byte_start: 18882, byte_end: 18883 }: )
Token { kind: Op(Minus), char_start: 18884, char_end: 18885, byte_start: 18884, byte_end: 18885 }: -
Token { kind: Literal(Number), char_start: 18886, char_end: 18887, byte_start: 18886, byte_end: 18887 }: 1
Token { kind: Punctuator(Rparen), char_start: 18887, char_end: 18888, byte_start: 18887, byte_end: 18888 }: )
Token { kind: Name(Keyword(Else)), char_start: 18893, char_end: 18897, byte_start: 18893, byte_end: 18897 }: else
Token { kind: Name(Keyword(Return)), char_start: 18904, char_end: 18910, byte_start: 18904, byte_end: 18910 }: return
Token { kind: Name(Identifier), char_start: 18911, char_end: 18915, byte_start: 18911, byte_end: 18915 }: file
Token { kind: Name(Keyword(End)), char_start: 18920, char_end: 18923, byte_start: 18920, byte_end: 18923 }: end
Token { kind: Name(Keyword(End)), char_start: 18926, char_end: 18929, byte_start: 18926, byte_end: 18929 }: end
Token { kind: Punctuator(Comma), char_start: 18929, char_end: 18930, byte_start: 18929, byte_end: 18930 }: ,
Token { kind: Name(Identifier), char_start: 18934, char_end: 18937, byte_start: 18934, byte_end: 18937 }: log
Token { kind: Op(Assign), char_start: 18938, char_end: 18939, byte_start: 18938, byte_end: 18939 }: =
Token { kind: Name(Keyword(Function)), char_start: 18940, char_end: 18948, byte_start: 18940, byte_end: 18948 }: function
Token { kind: Punctuator(Lparen), char_start: 18948, char_end: 18949, byte_start: 18948, byte_end: 18949 }: (
Token { kind: Name(Identifier), char_start: 18949, char_end: 18956, byte_start: 18949, byte_end: 18956 }: message
Token { kind: Punctuator(Rparen), char_start: 18956, char_end: 18957, byte_start: 18956, byte_end: 18957 }: )
Token { kind: Name(Identifier), char_start: 18962, char_end: 18965, byte_start: 18962, byte_end: 18965 }: vim
Token { kind: Punctuator(Dot), char_start: 18965, char_end: 18966, byte_start: 18965, byte_end: 18966 }: .
Token { kind: Name(Identifier), char_start: 18966, char_end: 18969, byte_start: 18966, byte_end: 18969 }: api
Token { kind: Punctuator(Dot), char_start: 18969, char_end: 18970, byte_start: 18969, byte_end: 18970 }: .
Token { kind: Name(Identifier), char_start: 18970, char_end: 18982, byte_start: 18970, byte_end: 18982 }: nvim_command
Token { kind: Punctuator(Lparen), char_start: 18982, char_end: 18983, byte_start: 18982, byte_end: 18983 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 18983, char_end: 19003, byte_start: 18983, byte_end: 19003 }: 'unsilent echomsg "'
Token { kind: Op(Concat), char_start: 19004, char_end: 19006, byte_start: 19004, byte_end: 19006 }: ..
Token { kind: Name(Identifier), char_start: 19007, char_end: 19014, byte_start: 19007, byte_end: 19014 }: message
Token { kind: Op(Concat), char_start: 19015, char_end: 19017, byte_start: 19015, byte_end: 19017 }: ..
Token { kind: Literal(Str(SingleQuoted)), char_start: 19018, char_end: 19021, byte_start: 19018, byte_end: 19021 }: '"'
Token { kind: Punctuator(Rparen), char_start: 19021, char_end: 19022, byte_start: 19021, byte_end: 19022 }: )
Token { kind: Name(Keyword(End)), char_start: 19025, char_end: 19028, byte_start: 19025, byte_end: 19028 }: end
Token { kind: Punctuator(Comma), char_start: 19028, char_end: 19029, byte_start: 19028, byte_end: 19029 }: ,
Token { kind: Comment(LineComment), char_start: 19033, char_end: 19106, byte_start: 19033, byte_end: 19106 }: -- TODO: better name for the param here (it's more than just args; it is

Token { kind: Comment(LineComment), char_start: 19108, char_end: 19130, byte_start: 19108, byte_end: 19130 }: -- command plus args)

Token { kind: Name(Identifier), char_start: 19132, char_end: 19135, byte_start: 19132, byte_end: 19135 }: run
Token { kind: Op(Assign), char_start: 19136, char_end: 19137, byte_start: 19136, byte_end: 19137 }: =
Token { kind: Name(Keyword(Function)), char_start: 19138, char_end: 19146, byte_start: 19138, byte_end: 19146 }: function
Token { kind: Punctuator(Lparen), char_start: 19146, char_end: 19147, byte_start: 19146, byte_end: 19147 }: (
Token { kind: Name(Identifier), char_start: 19147, char_end: 19151, byte_start: 19147, byte_end: 19151 }: args
Token { kind: Punctuator(Rparen), char_start: 19151, char_end: 19152, byte_start: 19151, byte_end: 19152 }: )
Token { kind: Name(Keyword(Local)), char_start: 19157, char_end: 19162, byte_start: 19157, byte_end: 19162 }: local
Token { kind: Name(Identifier), char_start: 19163, char_end: 19170, byte_start: 19163, byte_end: 19170 }: command
Token { kind: Op(Assign), char_start: 19171, char_end: 19172, byte_start: 19171, byte_end: 19172 }: =
Token { kind: Name(Identifier), char_start: 19173, char_end: 19178, byte_start: 19173, byte_end: 19178 }: table
Token { kind: Punctuator(Dot), char_start: 19178, char_end: 19179, byte_start: 19178, byte_end: 19179 }: .
Token { kind: Name(Identifier), char_start: 19179, char_end: 19185, byte_start: 19179, byte_end: 19185 }: concat
Token { kind: Punctuator(Lparen), char_start: 19185, char_end: 19186, byte_start: 19185, byte_end: 19186 }: (
Token { kind: Name(Identifier), char_start: 19186, char_end: 19190, byte_start: 19186, byte_end: 19190 }: util
Token { kind: Punctuator(Dot), char_start: 19190, char_end: 19191, byte_start: 19190, byte_end: 19191 }: .
Token { kind: Name(Identifier), char_start: 19191, char_end: 19195, byte_start: 19191, byte_end: 19195 }: list
Token { kind: Punctuator(Dot), char_start: 19195, char_end: 19196, byte_start: 19195, byte_end: 19196 }: .
Token { kind: Name(Identifier), char_start: 19196, char_end: 19199, byte_start: 19196, byte_end: 19199 }: map
Token { kind: Punctuator(Lparen), char_start: 19199, char_end: 19200, byte_start: 19199, byte_end: 19200 }: (
Token { kind: Name(Identifier), char_start: 19200, char_end: 19204, byte_start: 19200, byte_end: 19204 }: args
Token { kind: Punctuator(Comma), char_start: 19204, char_end: 19205, byte_start: 19204, byte_end: 19205 }: ,
Token { kind: Name(Keyword(Function)), char_start: 19206, char_end: 19214, byte_start: 19206, byte_end: 19214 }: function
Token { kind: Punctuator(Lparen), char_start: 19214, char_end: 19215, byte_start: 19214, byte_end: 19215 }: (
Token { kind: Name(Identifier), char_start: 19215, char_end: 19219, byte_start: 19215, byte_end: 19219 }: word
Token { kind: Punctuator(Rparen), char_start: 19219, char_end: 19220, byte_start: 19219, byte_end: 19220 }: )
Token { kind: Name(Keyword(Return)), char_start: 19227, char_end: 19233, byte_start: 19227, byte_end: 19233 }: return
Token { kind: Name(Identifier), char_start: 19234, char_end: 19237, byte_start: 19234, byte_end: 19237 }: vim
Token { kind: Punctuator(Dot), char_start: 19237, char_end: 19238, byte_start: 19237, byte_end: 19238 }: .
Token { kind: Name(Identifier), char_start: 19238, char_end: 19240, byte_start: 19238, byte_end: 19240 }: fn
Token { kind: Punctuator(Dot), char_start: 19240, char_end: 19241, byte_start: 19240, byte_end: 19241 }: .
Token { kind: Name(Identifier), char_start: 19241, char_end: 19252, byte_start: 19241, byte_end: 19252 }: shellescape
Token { kind: Punctuator(Lparen), char_start: 19252, char_end: 19253, byte_start: 19252, byte_end: 19253 }: (
Token { kind: Name(Identifier), char_start: 19253, char_end: 19257, byte_start: 19253, byte_end: 19257 }: word
Token { kind: Punctuator(Rparen), char_start: 19257, char_end: 19258, byte_start: 19257, byte_end: 19258 }: )
Token { kind: Name(Keyword(End)), char_start: 19263, char_end: 19266, byte_start: 19263, byte_end: 19266 }: end
Token { kind: Punctuator(Rparen), char_start: 19266, char_end: 19267, byte_start: 19266, byte_end: 19267 }: )
Token { kind: Punctuator(Comma), char_start: 19267, char_end: 19268, byte_start: 19267, byte_end: 19268 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 19269, char_end: 19272, byte_start: 19269, byte_end: 19272 }: ' '
Token { kind: Punctuator(Rparen), char_start: 19272, char_end: 19273, byte_start: 19272, byte_end: 19273 }: )
Token { kind: Name(Keyword(Return)), char_start: 19278, char_end: 19284, byte_start: 19278, byte_end: 19284 }: return
Token { kind: Name(Identifier), char_start: 19285, char_end: 19288, byte_start: 19285, byte_end: 19288 }: vim
Token { kind: Punctuator(Dot), char_start: 19288, char_end: 19289, byte_start: 19288, byte_end: 19289 }: .
Token { kind: Name(Identifier), char_start: 19289, char_end: 19291, byte_start: 19289, byte_end: 19291 }: fn
Token { kind: Punctuator(Dot), char_start: 19291, char_end: 19292, byte_start: 19291, byte_end: 19292 }: .
Token { kind: Name(Identifier), char_start: 19292, char_end: 19302, byte_start: 19292, byte_end: 19302 }: systemlist
Token { kind: Punctuator(Lparen), char_start: 19302, char_end: 19303, byte_start: 19302, byte_end: 19303 }: (
Token { kind: Name(Identifier), char_start: 19303, char_end: 19310, byte_start: 19303, byte_end: 19310 }: command
Token { kind: Punctuator(Rparen), char_start: 19310, char_end: 19311, byte_start: 19310, byte_end: 19311 }: )
Token { kind: Name(Keyword(End)), char_start: 19314, char_end: 19317, byte_start: 19314, byte_end: 19317 }: end
Token { kind: Punctuator(Comma), char_start: 19317, char_end: 19318, byte_start: 19317, byte_end: 19318 }: ,
Token { kind: Comment(LineComment), char_start: 19322, char_end: 19396, byte_start: 19322, byte_end: 19396 }: -- Like 'smartcase', will be case-insensitive unless argument contains an

Token { kind: Comment(LineComment), char_start: 19398, char_end: 19419, byte_start: 19398, byte_end: 19419 }: -- uppercase letter.

Token { kind: Name(Identifier), char_start: 19421, char_end: 19430, byte_start: 19421, byte_end: 19430 }: smartcase
Token { kind: Op(Assign), char_start: 19431, char_end: 19432, byte_start: 19431, byte_end: 19432 }: =
Token { kind: Name(Keyword(Function)), char_start: 19433, char_end: 19441, byte_start: 19433, byte_end: 19441 }: function
Token { kind: Punctuator(Lparen), char_start: 19441, char_end: 19442, byte_start: 19441, byte_end: 19442 }: (
Token { kind: Name(Identifier), char_start: 19442, char_end: 19447, byte_start: 19442, byte_end: 19447 }: input
Token { kind: Punctuator(Rparen), char_start: 19447, char_end: 19448, byte_start: 19447, byte_end: 19448 }: )
Token { kind: Name(Keyword(Return)), char_start: 19453, char_end: 19459, byte_start: 19453, byte_end: 19459 }: return
Token { kind: Name(Identifier), char_start: 19460, char_end: 19465, byte_start: 19460, byte_end: 19465 }: input
Token { kind: Punctuator(Colon), char_start: 19465, char_end: 19466, byte_start: 19465, byte_end: 19466 }: :
Token { kind: Name(Identifier), char_start: 19466, char_end: 19471, byte_start: 19466, byte_end: 19471 }: match
Token { kind: Punctuator(Lparen), char_start: 19471, char_end: 19472, byte_start: 19471, byte_end: 19472 }: (
Token { kind: Literal(Str(SingleQuoted)), char_start: 19472, char_end: 19476, byte_start: 19472, byte_end: 19476 }: '%u'
Token { kind: Punctuator(Rparen), char_start: 19476, char_end: 19477, byte_start: 19476, byte_end: 19477 }: )
Token { kind: Op(Ne), char_start: 19478, char_end: 19480, byte_start: 19478, byte_end: 19480 }: ~=
Token { kind: Name(Keyword(Nil)), char_start: 19481, char_end: 19484, byte_start: 19481, byte_end: 19484 }: nil
Token { kind: Name(Keyword(End)), char_start: 19487, char_end: 19490, byte_start: 19487, byte_end: 19490 }: end
Token { kind: Punctuator(Comma), char_start: 19490, char_end: 19491, byte_start: 19490, byte_end: 19491 }: ,
Token { kind: Name(Identifier), char_start: 19495, char_end: 19509, byte_start: 19495, byte_end: 19509 }: title_for_file
Token { kind: Op(Assign), char_start: 19510, char_end: 19511, byte_start: 19510, byte_end: 19511 }: =
Token { kind: Name(Keyword(Function)), char_start: 19512, char_end: 19520, byte_start: 19512, byte_end: 19520 }: function
Token { kind: Punctuator(Lparen), char_start: 19520, char_end: 19521, byte_start: 19520, byte_end: 19521 }: (
Token { kind: Name(Identifier), char_start: 19521, char_end: 19525, byte_start: 19521, byte_end: 19525 }: file
Token { kind: Punctuator(Rparen), char_start: 19525, char_end: 19526, byte_start: 19525, byte_end: 19526 }: )
Token { kind: Name(Keyword(Return)), char_start: 19531, char_end: 19537, byte_start: 19531, byte_end: 19537 }: return
Token { kind: Name(Identifier), char_start: 19538, char_end: 19541, byte_start: 19538, byte_end: 19541 }: vim
Token { kind: Punctuator(Dot), char_start: 19541, char_end: 19542, byte_start: 19541, byte_end: 19542 }: .
Token { kind: Name(Identifier), char_start: 19542, char_end: 19544, byte_start: 19542, byte_end: 19544 }: fn
Token { kind: Punctuator(Dot), char_start: 19544, char_end: 19545, byte_start: 19544, byte_end: 19545 }: .
Token { kind: Name(Identifier), char_start: 19545, char_end: 19556, byte_start: 19545, byte_end: 19556 }: fnamemodify
Token { kind: Punctuator(Lparen), char_start: 19556, char_end: 19557, byte_start: 19556, byte_end: 19557 }: (
Token { kind: Name(Identifier), char_start: 19557, char_end: 19561, byte_start: 19557, byte_end: 19561 }: file
Token { kind: Punctuator(Comma), char_start: 19561, char_end: 19562, byte_start: 19561, byte_end: 19562 }: ,
Token { kind: Literal(Str(SingleQuoted)), char_start: 19563, char_end: 19569, byte_start: 19563, byte_end: 19569 }: ':t:r'
Token { kind: Punctuator(Rparen), char_start: 19569, char_end: 19570, byte_start: 19569, byte_end: 19570 }: )
Token { kind: Name(Keyword(End)), char_start: 19573, char_end: 19576, byte_start: 19573, byte_end: 19576 }: end
Token { kind: Punctuator(Comma), char_start: 19576, char_end: 19577, byte_start: 19576, byte_end: 19577 }: ,
Token { kind: Punctuator(Rcurly), char_start: 19578, char_end: 19579, byte_start: 19578, byte_end: 19579 }: }
Token { kind: Name(Keyword(Return)), char_start: 19581, char_end: 19587, byte_start: 19581, byte_end: 19587 }: return
Token { kind: Name(Identifier), char_start: 19588, char_end: 19594, byte_start: 19588, byte_end: 19594 }: corpus
